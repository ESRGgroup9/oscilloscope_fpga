// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_filter,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.422000,HLS_SYN_LAT=2745,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1463,HLS_SYN_LUT=513,HLS_VERSION=2019_2}" *)

module fir_filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_ant_address0,
        x_ant_ce0,
        x_ant_q0,
        x_coefs_address0,
        x_coefs_ce0,
        x_coefs_q0,
        dcValEn,
        ap_return
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] x_ant_address0;
output   x_ant_ce0;
input  [15:0] x_ant_q0;
output  [7:0] x_coefs_address0;
output   x_coefs_ce0;
input  [31:0] x_coefs_q0;
input  [0:0] dcValEn;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_ant_ce0;
reg x_coefs_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] i_fu_117_p2;
reg   [7:0] i_reg_282;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln20_fu_111_p2;
reg   [0:0] tmp_reg_297;
reg   [15:0] tmp_1_reg_303;
reg  signed [31:0] x_coefs_load_reg_308;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_2_reg_314;
reg   [15:0] x_ant_load_reg_319;
wire  signed [31:0] sub_ln35_fu_178_p2;
reg  signed [31:0] sub_ln35_reg_324;
wire    ap_CS_fsm_state4;
wire   [31:0] zext_ln35_fu_183_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] mul_ln35_reg_335;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_191_p2;
reg   [31:0] mul_ln37_reg_340;
wire    ap_CS_fsm_state12;
wire   [63:0] grp_fu_199_p2;
reg   [63:0] y64b_reg_355;
wire    ap_CS_fsm_state13;
wire   [63:0] grp_fu_208_p2;
reg   [63:0] y64b_1_reg_360;
wire   [63:0] y64b_2_fu_214_p3;
wire    ap_CS_fsm_state14;
reg   [63:0] y64b_0_reg_88;
reg   [7:0] i_0_reg_100;
wire   [63:0] zext_ln34_fu_123_p1;
wire   [31:0] y32b_fu_129_p4;
wire   [31:0] select_ln45_fu_139_p3;
wire   [31:0] y32b_1_fu_146_p2;
wire  signed [31:0] tmp_2_fu_170_p1;
wire   [15:0] grp_fu_186_p0;
wire   [15:0] grp_fu_191_p1;
wire   [63:0] grp_fu_199_p1;
wire   [63:0] grp_fu_208_p1;
wire    ap_CS_fsm_state15;
wire   [15:0] trunc_ln_fu_226_p4;
wire   [15:0] select_ln45_1_fu_219_p3;
wire   [0:0] xor_ln50_fu_247_p2;
wire   [0:0] icmp_ln53_fu_236_p2;
wire   [0:0] or_ln50_fu_260_p2;
wire   [15:0] select_ln50_fu_252_p3;
wire   [15:0] empty_6_fu_241_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

fir_filter_mul_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_filter_mul_16bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_186_p0),
    .din1(sub_ln35_reg_324),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

fir_filter_mul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
fir_filter_mul_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_coefs_load_reg_308),
    .din1(grp_fu_191_p1),
    .ce(1'b1),
    .dout(grp_fu_191_p2)
);

fir_filter_sub_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fir_filter_sub_64dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y64b_0_reg_88),
    .din1(grp_fu_199_p1),
    .ce(1'b1),
    .dout(grp_fu_199_p2)
);

fir_filter_add_64eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fir_filter_add_64eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y64b_0_reg_88),
    .din1(grp_fu_208_p1),
    .ce(1'b1),
    .dout(grp_fu_208_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_reg_100 <= i_reg_282;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_100 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        y64b_0_reg_88 <= y64b_2_fu_214_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y64b_0_reg_88 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_282 <= i_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_314 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        mul_ln35_reg_335 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_314 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        mul_ln37_reg_340 <= grp_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_314 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln35_reg_324 <= sub_ln35_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_303 <= {{y32b_1_fu_146_p2[31:16]}};
        tmp_reg_297 <= y32b_1_fu_146_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_2_reg_314 <= tmp_2_fu_170_p1[32'd31];
        x_ant_load_reg_319 <= x_ant_q0;
        x_coefs_load_reg_308 <= x_coefs_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_314 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        y64b_1_reg_360 <= grp_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_314 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        y64b_reg_355 <= grp_fu_199_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_ant_ce0 = 1'b1;
    end else begin
        x_ant_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_coefs_ce0 = 1'b1;
    end else begin
        x_coefs_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln20_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = ((or_ln50_fu_260_p2[0:0] === 1'b1) ? select_ln50_fu_252_p3 : empty_6_fu_241_p2);

assign empty_6_fu_241_p2 = (trunc_ln_fu_226_p4 + select_ln45_1_fu_219_p3);

assign grp_fu_186_p0 = zext_ln35_fu_183_p1;

assign grp_fu_191_p1 = zext_ln35_fu_183_p1;

assign grp_fu_199_p1 = mul_ln35_reg_335;

assign grp_fu_208_p1 = mul_ln37_reg_340;

assign i_fu_117_p2 = (i_0_reg_100 + 8'd1);

assign icmp_ln20_fu_111_p2 = ((i_0_reg_100 == 8'd211) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_236_p2 = ((tmp_1_reg_303 != 16'd0) ? 1'b1 : 1'b0);

assign or_ln50_fu_260_p2 = (tmp_reg_297 | icmp_ln53_fu_236_p2);

assign select_ln45_1_fu_219_p3 = ((dcValEn[0:0] === 1'b1) ? 16'd32767 : 16'd0);

assign select_ln45_fu_139_p3 = ((dcValEn[0:0] === 1'b1) ? 32'd32767 : 32'd0);

assign select_ln50_fu_252_p3 = ((xor_ln50_fu_247_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sub_ln35_fu_178_p2 = ($signed(32'd0) - $signed(x_coefs_load_reg_308));

assign tmp_2_fu_170_p1 = x_coefs_q0;

assign trunc_ln_fu_226_p4 = {{y64b_0_reg_88[30:15]}};

assign x_ant_address0 = zext_ln34_fu_123_p1;

assign x_coefs_address0 = zext_ln34_fu_123_p1;

assign xor_ln50_fu_247_p2 = (tmp_reg_297 ^ 1'd1);

assign y32b_1_fu_146_p2 = (y32b_fu_129_p4 + select_ln45_fu_139_p3);

assign y32b_fu_129_p4 = {{y64b_0_reg_88[46:15]}};

assign y64b_2_fu_214_p3 = ((tmp_2_reg_314[0:0] === 1'b1) ? y64b_reg_355 : y64b_1_reg_360);

assign zext_ln34_fu_123_p1 = i_0_reg_100;

assign zext_ln35_fu_183_p1 = x_ant_load_reg_319;

endmodule //fir_filter
