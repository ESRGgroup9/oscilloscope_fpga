// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir_filter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir_filter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir_filter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> fir_filter::ap_ST_fsm_state1 = "1";
const sc_lv<5> fir_filter::ap_ST_fsm_state2 = "10";
const sc_lv<5> fir_filter::ap_ST_fsm_state3 = "100";
const sc_lv<5> fir_filter::ap_ST_fsm_state4 = "1000";
const sc_lv<5> fir_filter::ap_ST_fsm_state5 = "10000";
const sc_lv<32> fir_filter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fir_filter::ap_const_lv32_1 = "1";
const sc_lv<32> fir_filter::ap_const_lv32_2 = "10";
const sc_lv<32> fir_filter::ap_const_lv32_3 = "11";
const sc_lv<32> fir_filter::ap_const_lv32_4 = "100";
const sc_lv<5> fir_filter::ap_const_lv5_0 = "00000";
const sc_lv<5> fir_filter::ap_const_lv5_17 = "10111";
const sc_lv<5> fir_filter::ap_const_lv5_1 = "1";
const sc_lv<32> fir_filter::ap_const_lv32_F = "1111";
const sc_lv<32> fir_filter::ap_const_lv32_1E = "11110";
const sc_lv<16> fir_filter::ap_const_lv16_7FF = "11111111111";
const sc_lv<16> fir_filter::ap_const_lv16_0 = "0000000000000000";
const sc_lv<12> fir_filter::ap_const_lv12_7FF = "11111111111";
const sc_lv<12> fir_filter::ap_const_lv12_0 = "000000000000";
const sc_lv<32> fir_filter::ap_const_lv32_1A = "11010";
const sc_lv<32> fir_filter::ap_const_lv32_C = "1100";
const sc_lv<4> fir_filter::ap_const_lv4_0 = "0000";
const sc_lv<1> fir_filter::ap_const_lv1_1 = "1";
const sc_lv<12> fir_filter::ap_const_lv12_FFF = "111111111111";
const bool fir_filter::ap_const_boolean_1 = true;

fir_filter::fir_filter(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln38_1_fu_171_p2);
    sensitive << ( select_ln38_1_fu_148_p3 );
    sensitive << ( trunc_ln_fu_155_p4 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_113_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_113_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_113_p2 );
    sensitive << ( select_ln41_1_fu_221_p3 );

    SC_METHOD(thread_i_fu_119_p2);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_icmp_ln17_fu_113_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_icmp_ln44_fu_195_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_113_p2 );
    sensitive << ( tmp_1_fu_185_p4 );

    SC_METHOD(thread_mul_ln31_fu_236_p1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( mul_ln31_fu_236_p10 );

    SC_METHOD(thread_mul_ln31_fu_236_p10);
    sensitive << ( x_ant_load_reg_270 );

    SC_METHOD(thread_mul_ln31_fu_236_p2);
    sensitive << ( x_coefs_load_reg_275 );
    sensitive << ( mul_ln31_fu_236_p1 );

    SC_METHOD(thread_or_ln41_fu_215_p2);
    sensitive << ( tmp_fu_177_p3 );
    sensitive << ( icmp_ln44_fu_195_p2 );

    SC_METHOD(thread_select_ln38_1_fu_148_p3);
    sensitive << ( dcValEn );

    SC_METHOD(thread_select_ln38_fu_141_p3);
    sensitive << ( dcValEn );

    SC_METHOD(thread_select_ln41_1_fu_221_p3);
    sensitive << ( or_ln41_fu_215_p2 );
    sensitive << ( select_ln41_fu_207_p3 );
    sensitive << ( add_ln38_1_fu_171_p2 );

    SC_METHOD(thread_select_ln41_fu_207_p3);
    sensitive << ( xor_ln41_fu_201_p2 );

    SC_METHOD(thread_tmp_1_fu_185_p4);
    sensitive << ( y16b_1_fu_165_p2 );

    SC_METHOD(thread_tmp_fu_177_p3);
    sensitive << ( y16b_1_fu_165_p2 );

    SC_METHOD(thread_trunc_ln_fu_155_p4);
    sensitive << ( y32b_0_reg_90 );

    SC_METHOD(thread_x_ant_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln31_fu_125_p1 );

    SC_METHOD(thread_x_ant_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_x_coefs_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln31_fu_125_p1 );

    SC_METHOD(thread_x_coefs_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_xor_ln41_fu_201_p2);
    sensitive << ( tmp_fu_177_p3 );

    SC_METHOD(thread_y16b_1_fu_165_p2);
    sensitive << ( y16b_fu_131_p4 );
    sensitive << ( select_ln38_fu_141_p3 );

    SC_METHOD(thread_y16b_fu_131_p4);
    sensitive << ( y32b_0_reg_90 );

    SC_METHOD(thread_y32b_fu_241_p2);
    sensitive << ( mul_ln31_reg_280 );
    sensitive << ( y32b_0_reg_90 );

    SC_METHOD(thread_zext_ln31_fu_125_p1);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_113_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_filter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_ant_address0, "(port)x_ant_address0");
    sc_trace(mVcdFile, x_ant_ce0, "(port)x_ant_ce0");
    sc_trace(mVcdFile, x_ant_q0, "(port)x_ant_q0");
    sc_trace(mVcdFile, x_coefs_address0, "(port)x_coefs_address0");
    sc_trace(mVcdFile, x_coefs_ce0, "(port)x_coefs_ce0");
    sc_trace(mVcdFile, x_coefs_q0, "(port)x_coefs_q0");
    sc_trace(mVcdFile, dcValEn, "(port)dcValEn");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_119_p2, "i_fu_119_p2");
    sc_trace(mVcdFile, i_reg_255, "i_reg_255");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln17_fu_113_p2, "icmp_ln17_fu_113_p2");
    sc_trace(mVcdFile, x_ant_load_reg_270, "x_ant_load_reg_270");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, x_coefs_load_reg_275, "x_coefs_load_reg_275");
    sc_trace(mVcdFile, mul_ln31_fu_236_p2, "mul_ln31_fu_236_p2");
    sc_trace(mVcdFile, mul_ln31_reg_280, "mul_ln31_reg_280");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, y32b_fu_241_p2, "y32b_fu_241_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, y32b_0_reg_90, "y32b_0_reg_90");
    sc_trace(mVcdFile, i_0_reg_102, "i_0_reg_102");
    sc_trace(mVcdFile, zext_ln31_fu_125_p1, "zext_ln31_fu_125_p1");
    sc_trace(mVcdFile, y16b_fu_131_p4, "y16b_fu_131_p4");
    sc_trace(mVcdFile, select_ln38_fu_141_p3, "select_ln38_fu_141_p3");
    sc_trace(mVcdFile, select_ln38_1_fu_148_p3, "select_ln38_1_fu_148_p3");
    sc_trace(mVcdFile, trunc_ln_fu_155_p4, "trunc_ln_fu_155_p4");
    sc_trace(mVcdFile, y16b_1_fu_165_p2, "y16b_1_fu_165_p2");
    sc_trace(mVcdFile, tmp_1_fu_185_p4, "tmp_1_fu_185_p4");
    sc_trace(mVcdFile, tmp_fu_177_p3, "tmp_fu_177_p3");
    sc_trace(mVcdFile, xor_ln41_fu_201_p2, "xor_ln41_fu_201_p2");
    sc_trace(mVcdFile, icmp_ln44_fu_195_p2, "icmp_ln44_fu_195_p2");
    sc_trace(mVcdFile, or_ln41_fu_215_p2, "or_ln41_fu_215_p2");
    sc_trace(mVcdFile, select_ln41_fu_207_p3, "select_ln41_fu_207_p3");
    sc_trace(mVcdFile, add_ln38_1_fu_171_p2, "add_ln38_1_fu_171_p2");
    sc_trace(mVcdFile, select_ln41_1_fu_221_p3, "select_ln41_1_fu_221_p3");
    sc_trace(mVcdFile, mul_ln31_fu_236_p1, "mul_ln31_fu_236_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, mul_ln31_fu_236_p10, "mul_ln31_fu_236_p10");
#endif

    }
    mHdltvinHandle.open("fir_filter.hdltvin.dat");
    mHdltvoutHandle.open("fir_filter.hdltvout.dat");
}

fir_filter::~fir_filter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void fir_filter::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_102 = i_reg_255.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_102 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        y32b_0_reg_90 = y32b_fu_241_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        y32b_0_reg_90 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_255 = i_fu_119_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        mul_ln31_reg_280 = mul_ln31_fu_236_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_ant_load_reg_270 = x_ant_q0.read();
        x_coefs_load_reg_275 = x_coefs_q0.read();
    }
}

void fir_filter::thread_add_ln38_1_fu_171_p2() {
    add_ln38_1_fu_171_p2 = (!select_ln38_1_fu_148_p3.read().is_01() || !trunc_ln_fu_155_p4.read().is_01())? sc_lv<12>(): (sc_biguint<12>(select_ln38_1_fu_148_p3.read()) + sc_biguint<12>(trunc_ln_fu_155_p4.read()));
}

void fir_filter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir_filter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir_filter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir_filter::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir_filter::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fir_filter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_113_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir_filter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir_filter::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_113_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir_filter::thread_ap_return() {
    ap_return = esl_zext<16,12>(select_ln41_1_fu_221_p3.read());
}

void fir_filter::thread_i_fu_119_p2() {
    i_fu_119_p2 = (!i_0_reg_102.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_102.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void fir_filter::thread_icmp_ln17_fu_113_p2() {
    icmp_ln17_fu_113_p2 = (!i_0_reg_102.read().is_01() || !ap_const_lv5_17.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_102.read() == ap_const_lv5_17);
}

void fir_filter::thread_icmp_ln44_fu_195_p2() {
    icmp_ln44_fu_195_p2 = (!tmp_1_fu_185_p4.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_185_p4.read() != ap_const_lv4_0);
}

void fir_filter::thread_mul_ln31_fu_236_p1() {
    mul_ln31_fu_236_p1 =  (sc_lv<16>) (mul_ln31_fu_236_p10.read());
}

void fir_filter::thread_mul_ln31_fu_236_p10() {
    mul_ln31_fu_236_p10 = esl_zext<32,16>(x_ant_load_reg_270.read());
}

void fir_filter::thread_mul_ln31_fu_236_p2() {
    mul_ln31_fu_236_p2 = (!x_coefs_load_reg_275.read().is_01() || !mul_ln31_fu_236_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(x_coefs_load_reg_275.read()) * sc_biguint<16>(mul_ln31_fu_236_p1.read());
}

void fir_filter::thread_or_ln41_fu_215_p2() {
    or_ln41_fu_215_p2 = (tmp_fu_177_p3.read() | icmp_ln44_fu_195_p2.read());
}

void fir_filter::thread_select_ln38_1_fu_148_p3() {
    select_ln38_1_fu_148_p3 = (!dcValEn.read()[0].is_01())? sc_lv<12>(): ((dcValEn.read()[0].to_bool())? ap_const_lv12_7FF: ap_const_lv12_0);
}

void fir_filter::thread_select_ln38_fu_141_p3() {
    select_ln38_fu_141_p3 = (!dcValEn.read()[0].is_01())? sc_lv<16>(): ((dcValEn.read()[0].to_bool())? ap_const_lv16_7FF: ap_const_lv16_0);
}

void fir_filter::thread_select_ln41_1_fu_221_p3() {
    select_ln41_1_fu_221_p3 = (!or_ln41_fu_215_p2.read()[0].is_01())? sc_lv<12>(): ((or_ln41_fu_215_p2.read()[0].to_bool())? select_ln41_fu_207_p3.read(): add_ln38_1_fu_171_p2.read());
}

void fir_filter::thread_select_ln41_fu_207_p3() {
    select_ln41_fu_207_p3 = (!xor_ln41_fu_201_p2.read()[0].is_01())? sc_lv<12>(): ((xor_ln41_fu_201_p2.read()[0].to_bool())? ap_const_lv12_FFF: ap_const_lv12_0);
}

void fir_filter::thread_tmp_1_fu_185_p4() {
    tmp_1_fu_185_p4 = y16b_1_fu_165_p2.read().range(15, 12);
}

void fir_filter::thread_tmp_fu_177_p3() {
    tmp_fu_177_p3 = y16b_1_fu_165_p2.read().range(15, 15);
}

void fir_filter::thread_trunc_ln_fu_155_p4() {
    trunc_ln_fu_155_p4 = y32b_0_reg_90.read().range(26, 15);
}

void fir_filter::thread_x_ant_address0() {
    x_ant_address0 =  (sc_lv<5>) (zext_ln31_fu_125_p1.read());
}

void fir_filter::thread_x_ant_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_ant_ce0 = ap_const_logic_1;
    } else {
        x_ant_ce0 = ap_const_logic_0;
    }
}

void fir_filter::thread_x_coefs_address0() {
    x_coefs_address0 =  (sc_lv<5>) (zext_ln31_fu_125_p1.read());
}

void fir_filter::thread_x_coefs_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_coefs_ce0 = ap_const_logic_1;
    } else {
        x_coefs_ce0 = ap_const_logic_0;
    }
}

void fir_filter::thread_xor_ln41_fu_201_p2() {
    xor_ln41_fu_201_p2 = (tmp_fu_177_p3.read() ^ ap_const_lv1_1);
}

void fir_filter::thread_y16b_1_fu_165_p2() {
    y16b_1_fu_165_p2 = (!y16b_fu_131_p4.read().is_01() || !select_ln38_fu_141_p3.read().is_01())? sc_lv<16>(): (sc_biguint<16>(y16b_fu_131_p4.read()) + sc_biguint<16>(select_ln38_fu_141_p3.read()));
}

void fir_filter::thread_y16b_fu_131_p4() {
    y16b_fu_131_p4 = y32b_0_reg_90.read().range(30, 15);
}

void fir_filter::thread_y32b_fu_241_p2() {
    y32b_fu_241_p2 = (!mul_ln31_reg_280.read().is_01() || !y32b_0_reg_90.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln31_reg_280.read()) + sc_biguint<32>(y32b_0_reg_90.read()));
}

void fir_filter::thread_zext_ln31_fu_125_p1() {
    zext_ln31_fu_125_p1 = esl_zext<64,5>(i_0_reg_102.read());
}

void fir_filter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_113_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void fir_filter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_ant_address0\" :  \"" << x_ant_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_ant_ce0\" :  \"" << x_ant_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_ant_q0\" :  \"" << x_ant_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_coefs_address0\" :  \"" << x_coefs_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_coefs_ce0\" :  \"" << x_coefs_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_coefs_q0\" :  \"" << x_coefs_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dcValEn\" :  \"" << dcValEn.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

