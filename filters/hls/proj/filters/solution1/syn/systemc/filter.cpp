// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "filter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic filter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic filter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> filter::ap_ST_fsm_state1 = "1";
const sc_lv<6> filter::ap_ST_fsm_state2 = "10";
const sc_lv<6> filter::ap_ST_fsm_state3 = "100";
const sc_lv<6> filter::ap_ST_fsm_state4 = "1000";
const sc_lv<6> filter::ap_ST_fsm_state5 = "10000";
const sc_lv<6> filter::ap_ST_fsm_state6 = "100000";
const sc_lv<32> filter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> filter::ap_const_lv32_1 = "1";
const sc_lv<32> filter::ap_const_lv32_2 = "10";
const sc_lv<32> filter::ap_const_lv32_3 = "11";
const sc_lv<32> filter::ap_const_lv32_4 = "100";
const sc_lv<1> filter::ap_const_lv1_1 = "1";
const sc_lv<5> filter::ap_const_lv5_1C = "11100";
const sc_lv<1> filter::ap_const_lv1_0 = "0";
const sc_lv<32> filter::ap_const_lv32_5 = "101";
const sc_lv<5> filter::ap_const_lv5_0 = "00000";
const sc_lv<5> filter::ap_const_lv5_1F = "11111";
const sc_lv<16> filter::ap_const_lv16_1DF = "111011111";
const bool filter::ap_const_boolean_1 = true;

filter::filter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    x_ant_U = new filter_x_ant("x_ant_U");
    x_ant_U->clk(ap_clk);
    x_ant_U->reset(ap_rst);
    x_ant_U->address0(x_ant_address0);
    x_ant_U->ce0(x_ant_ce0);
    x_ant_U->we0(x_ant_we0);
    x_ant_U->d0(x_ant_d0);
    x_ant_U->q0(x_ant_q0);
    x_coefs_U = new filter_x_coefs("x_coefs_U");
    x_coefs_U->clk(ap_clk);
    x_coefs_U->reset(ap_rst);
    x_coefs_U->address0(x_coefs_address0);
    x_coefs_U->ce0(x_coefs_ce0);
    x_coefs_U->q0(x_coefs_q0);
    filter_mul_mul_16bkb_U1 = new filter_mul_mul_16bkb<1,1,16,12,28>("filter_mul_mul_16bkb_U1");
    filter_mul_mul_16bkb_U1->din0(mul_ln25_fu_148_p0);
    filter_mul_mul_16bkb_U1->din1(mul_ln25_fu_148_p1);
    filter_mul_mul_16bkb_U1->dout(mul_ln25_fu_148_p2);
    filter_mac_muladdcud_U2 = new filter_mac_muladdcud<1,1,10,16,16,16>("filter_mac_muladdcud_U2");
    filter_mac_muladdcud_U2->din0(grp_fu_154_p0);
    filter_mac_muladdcud_U2->din1(x);
    filter_mac_muladdcud_U2->din2(add_ln32_reg_211);
    filter_mac_muladdcud_U2->dout(grp_fu_154_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln23_fu_98_p2);
    sensitive << ( i_0_reg_76 );

    SC_METHOD(thread_add_ln32_fu_142_p2);
    sensitive << ( trunc_ln25_1_fu_138_p1 );
    sensitive << ( trunc_ln25_fu_135_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_154_p3 );

    SC_METHOD(thread_grp_fu_154_p0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_icmp_ln27_fu_114_p2);
    sensitive << ( add_ln23_fu_98_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mul_ln25_fu_148_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( mul_ln25_fu_148_p00 );

    SC_METHOD(thread_mul_ln25_fu_148_p00);
    sensitive << ( x_ant_load_reg_190 );

    SC_METHOD(thread_mul_ln25_fu_148_p1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( mul_ln25_fu_148_p10 );

    SC_METHOD(thread_mul_ln25_fu_148_p10);
    sensitive << ( x_coefs_load_reg_195 );

    SC_METHOD(thread_trunc_ln25_1_fu_138_p1);
    sensitive << ( y_0_reg_87 );

    SC_METHOD(thread_trunc_ln25_fu_135_p1);
    sensitive << ( mul_ln25_reg_200 );

    SC_METHOD(thread_x_ant_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln23_1_reg_176 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln23_fu_104_p1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_x_ant_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_x_ant_d0);
    sensitive << ( x );
    sensitive << ( x_ant_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_x_ant_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_x_coefs_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln23_1_fu_109_p1 );

    SC_METHOD(thread_x_coefs_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_y_fu_129_p2);
    sensitive << ( y_0_reg_87 );
    sensitive << ( zext_ln25_2_fu_126_p1 );

    SC_METHOD(thread_zext_ln23_1_fu_109_p1);
    sensitive << ( i_0_reg_76 );

    SC_METHOD(thread_zext_ln23_fu_104_p1);
    sensitive << ( add_ln23_fu_98_p2 );

    SC_METHOD(thread_zext_ln25_2_fu_126_p1);
    sensitive << ( mul_ln25_reg_200 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln27_reg_186 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "filter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, x_ant_address0, "x_ant_address0");
    sc_trace(mVcdFile, x_ant_ce0, "x_ant_ce0");
    sc_trace(mVcdFile, x_ant_we0, "x_ant_we0");
    sc_trace(mVcdFile, x_ant_d0, "x_ant_d0");
    sc_trace(mVcdFile, x_ant_q0, "x_ant_q0");
    sc_trace(mVcdFile, x_coefs_address0, "x_coefs_address0");
    sc_trace(mVcdFile, x_coefs_ce0, "x_coefs_ce0");
    sc_trace(mVcdFile, x_coefs_q0, "x_coefs_q0");
    sc_trace(mVcdFile, add_ln23_fu_98_p2, "add_ln23_fu_98_p2");
    sc_trace(mVcdFile, add_ln23_reg_166, "add_ln23_reg_166");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln23_1_fu_109_p1, "zext_ln23_1_fu_109_p1");
    sc_trace(mVcdFile, zext_ln23_1_reg_176, "zext_ln23_1_reg_176");
    sc_trace(mVcdFile, icmp_ln27_fu_114_p2, "icmp_ln27_fu_114_p2");
    sc_trace(mVcdFile, icmp_ln27_reg_186, "icmp_ln27_reg_186");
    sc_trace(mVcdFile, x_ant_load_reg_190, "x_ant_load_reg_190");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, x_coefs_load_reg_195, "x_coefs_load_reg_195");
    sc_trace(mVcdFile, mul_ln25_fu_148_p2, "mul_ln25_fu_148_p2");
    sc_trace(mVcdFile, mul_ln25_reg_200, "mul_ln25_reg_200");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, y_fu_129_p2, "y_fu_129_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, add_ln32_fu_142_p2, "add_ln32_fu_142_p2");
    sc_trace(mVcdFile, add_ln32_reg_211, "add_ln32_reg_211");
    sc_trace(mVcdFile, i_0_reg_76, "i_0_reg_76");
    sc_trace(mVcdFile, y_0_reg_87, "y_0_reg_87");
    sc_trace(mVcdFile, zext_ln23_fu_104_p1, "zext_ln23_fu_104_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln25_2_fu_126_p1, "zext_ln25_2_fu_126_p1");
    sc_trace(mVcdFile, trunc_ln25_1_fu_138_p1, "trunc_ln25_1_fu_138_p1");
    sc_trace(mVcdFile, trunc_ln25_fu_135_p1, "trunc_ln25_fu_135_p1");
    sc_trace(mVcdFile, mul_ln25_fu_148_p0, "mul_ln25_fu_148_p0");
    sc_trace(mVcdFile, mul_ln25_fu_148_p1, "mul_ln25_fu_148_p1");
    sc_trace(mVcdFile, grp_fu_154_p0, "grp_fu_154_p0");
    sc_trace(mVcdFile, grp_fu_154_p3, "grp_fu_154_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, mul_ln25_fu_148_p00, "mul_ln25_fu_148_p00");
    sc_trace(mVcdFile, mul_ln25_fu_148_p10, "mul_ln25_fu_148_p10");
#endif

    }
    mHdltvinHandle.open("filter.hdltvin.dat");
    mHdltvoutHandle.open("filter.hdltvout.dat");
}

filter::~filter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete x_ant_U;
    delete x_coefs_U;
    delete filter_mul_mul_16bkb_U1;
    delete filter_mac_muladdcud_U2;
}

void filter::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln27_reg_186.read(), ap_const_lv1_0))) {
        i_0_reg_76 = add_ln23_reg_166.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_76 = ap_const_lv5_1C;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln27_reg_186.read(), ap_const_lv1_0))) {
        y_0_reg_87 = y_fu_129_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        y_0_reg_87 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln23_reg_166 = add_ln23_fu_98_p2.read();
        icmp_ln27_reg_186 = icmp_ln27_fu_114_p2.read();
        zext_ln23_1_reg_176 = zext_ln23_1_fu_109_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln27_reg_186.read(), ap_const_lv1_1))) {
        add_ln32_reg_211 = add_ln32_fu_142_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        mul_ln25_reg_200 = mul_ln25_fu_148_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_ant_load_reg_190 = x_ant_q0.read();
        x_coefs_load_reg_195 = x_coefs_q0.read();
    }
}

void filter::thread_add_ln23_fu_98_p2() {
    add_ln23_fu_98_p2 = (!i_0_reg_76.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_76.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void filter::thread_add_ln32_fu_142_p2() {
    add_ln32_fu_142_p2 = (!trunc_ln25_1_fu_138_p1.read().is_01() || !trunc_ln25_fu_135_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(trunc_ln25_1_fu_138_p1.read()) + sc_biguint<16>(trunc_ln25_fu_135_p1.read()));
}

void filter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void filter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void filter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void filter::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void filter::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void filter::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void filter::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void filter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void filter::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void filter::thread_ap_return() {
    ap_return = grp_fu_154_p3.read();
}

void filter::thread_grp_fu_154_p0() {
    grp_fu_154_p0 =  (sc_lv<10>) (ap_const_lv16_1DF);
}

void filter::thread_icmp_ln27_fu_114_p2() {
    icmp_ln27_fu_114_p2 = (!add_ln23_fu_98_p2.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(add_ln23_fu_98_p2.read() == ap_const_lv5_0);
}

void filter::thread_mul_ln25_fu_148_p0() {
    mul_ln25_fu_148_p0 =  (sc_lv<16>) (mul_ln25_fu_148_p00.read());
}

void filter::thread_mul_ln25_fu_148_p00() {
    mul_ln25_fu_148_p00 = esl_zext<28,16>(x_ant_load_reg_190.read());
}

void filter::thread_mul_ln25_fu_148_p1() {
    mul_ln25_fu_148_p1 =  (sc_lv<12>) (mul_ln25_fu_148_p10.read());
}

void filter::thread_mul_ln25_fu_148_p10() {
    mul_ln25_fu_148_p10 = esl_zext<28,12>(x_coefs_load_reg_195.read());
}

void filter::thread_trunc_ln25_1_fu_138_p1() {
    trunc_ln25_1_fu_138_p1 = y_0_reg_87.read().range(16-1, 0);
}

void filter::thread_trunc_ln25_fu_135_p1() {
    trunc_ln25_fu_135_p1 = mul_ln25_reg_200.read().range(16-1, 0);
}

void filter::thread_x_ant_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_ant_address0 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_ant_address0 =  (sc_lv<5>) (zext_ln23_1_reg_176.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_ant_address0 =  (sc_lv<5>) (zext_ln23_fu_104_p1.read());
    } else {
        x_ant_address0 = "XXXXX";
    }
}

void filter::thread_x_ant_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        x_ant_ce0 = ap_const_logic_1;
    } else {
        x_ant_ce0 = ap_const_logic_0;
    }
}

void filter::thread_x_ant_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_ant_d0 = x.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_ant_d0 = x_ant_q0.read();
    } else {
        x_ant_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void filter::thread_x_ant_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        x_ant_we0 = ap_const_logic_1;
    } else {
        x_ant_we0 = ap_const_logic_0;
    }
}

void filter::thread_x_coefs_address0() {
    x_coefs_address0 =  (sc_lv<5>) (zext_ln23_1_fu_109_p1.read());
}

void filter::thread_x_coefs_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_coefs_ce0 = ap_const_logic_1;
    } else {
        x_coefs_ce0 = ap_const_logic_0;
    }
}

void filter::thread_y_fu_129_p2() {
    y_fu_129_p2 = (!zext_ln25_2_fu_126_p1.read().is_01() || !y_0_reg_87.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln25_2_fu_126_p1.read()) + sc_biguint<32>(y_0_reg_87.read()));
}

void filter::thread_zext_ln23_1_fu_109_p1() {
    zext_ln23_1_fu_109_p1 = esl_zext<64,5>(i_0_reg_76.read());
}

void filter::thread_zext_ln23_fu_104_p1() {
    zext_ln23_fu_104_p1 = esl_zext<64,5>(add_ln23_fu_98_p2.read());
}

void filter::thread_zext_ln25_2_fu_126_p1() {
    zext_ln25_2_fu_126_p1 = esl_zext<32,28>(mul_ln25_reg_200.read());
}

void filter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln27_reg_186.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void filter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

