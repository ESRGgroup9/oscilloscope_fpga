// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_filter_HH_
#define _fir_filter_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct fir_filter : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > x_ant_address0;
    sc_out< sc_logic > x_ant_ce0;
    sc_in< sc_lv<16> > x_ant_q0;
    sc_out< sc_lv<5> > x_coefs_address0;
    sc_out< sc_logic > x_coefs_ce0;
    sc_in< sc_lv<32> > x_coefs_q0;
    sc_in< sc_lv<1> > dcValEn;
    sc_out< sc_lv<16> > ap_return;


    // Module declarations
    fir_filter(sc_module_name name);
    SC_HAS_PROCESS(fir_filter);

    ~fir_filter();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_fu_119_p2;
    sc_signal< sc_lv<5> > i_reg_255;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln17_fu_113_p2;
    sc_signal< sc_lv<16> > x_ant_load_reg_270;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > x_coefs_load_reg_275;
    sc_signal< sc_lv<32> > mul_ln31_fu_236_p2;
    sc_signal< sc_lv<32> > mul_ln31_reg_280;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > y32b_fu_241_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > y32b_0_reg_90;
    sc_signal< sc_lv<5> > i_0_reg_102;
    sc_signal< sc_lv<64> > zext_ln31_fu_125_p1;
    sc_signal< sc_lv<16> > y16b_fu_131_p4;
    sc_signal< sc_lv<16> > select_ln38_fu_141_p3;
    sc_signal< sc_lv<12> > select_ln38_1_fu_148_p3;
    sc_signal< sc_lv<12> > trunc_ln_fu_155_p4;
    sc_signal< sc_lv<16> > y16b_1_fu_165_p2;
    sc_signal< sc_lv<4> > tmp_1_fu_185_p4;
    sc_signal< sc_lv<1> > tmp_fu_177_p3;
    sc_signal< sc_lv<1> > xor_ln41_fu_201_p2;
    sc_signal< sc_lv<1> > icmp_ln44_fu_195_p2;
    sc_signal< sc_lv<1> > or_ln41_fu_215_p2;
    sc_signal< sc_lv<12> > select_ln41_fu_207_p3;
    sc_signal< sc_lv<12> > add_ln38_1_fu_171_p2;
    sc_signal< sc_lv<12> > select_ln41_1_fu_221_p3;
    sc_signal< sc_lv<16> > mul_ln31_fu_236_p1;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_lv<32> > mul_ln31_fu_236_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<5> ap_const_lv5_17;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<16> ap_const_lv16_7FF;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<12> ap_const_lv12_7FF;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<12> ap_const_lv12_FFF;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln38_1_fu_171_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_fu_119_p2();
    void thread_icmp_ln17_fu_113_p2();
    void thread_icmp_ln44_fu_195_p2();
    void thread_mul_ln31_fu_236_p1();
    void thread_mul_ln31_fu_236_p10();
    void thread_mul_ln31_fu_236_p2();
    void thread_or_ln41_fu_215_p2();
    void thread_select_ln38_1_fu_148_p3();
    void thread_select_ln38_fu_141_p3();
    void thread_select_ln41_1_fu_221_p3();
    void thread_select_ln41_fu_207_p3();
    void thread_tmp_1_fu_185_p4();
    void thread_tmp_fu_177_p3();
    void thread_trunc_ln_fu_155_p4();
    void thread_x_ant_address0();
    void thread_x_ant_ce0();
    void thread_x_coefs_address0();
    void thread_x_coefs_ce0();
    void thread_xor_ln41_fu_201_p2();
    void thread_y16b_1_fu_165_p2();
    void thread_y16b_fu_131_p4();
    void thread_y32b_fu_241_p2();
    void thread_zext_ln31_fu_125_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
