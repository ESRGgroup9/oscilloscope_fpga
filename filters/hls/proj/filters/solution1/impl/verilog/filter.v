// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="filter,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=113,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=170,HLS_SYN_LUT=194,HLS_VERSION=2019_2}" *)

module filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] x;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] x_ant_address0;
reg    x_ant_ce0;
reg    x_ant_we0;
reg   [15:0] x_ant_d0;
wire   [15:0] x_ant_q0;
wire   [4:0] x_coefs_address0;
reg    x_coefs_ce0;
wire   [11:0] x_coefs_q0;
wire   [4:0] add_ln23_fu_98_p2;
reg   [4:0] add_ln23_reg_166;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln23_1_fu_109_p1;
reg   [63:0] zext_ln23_1_reg_176;
wire   [0:0] icmp_ln27_fu_114_p2;
reg   [0:0] icmp_ln27_reg_186;
reg   [15:0] x_ant_load_reg_190;
wire    ap_CS_fsm_state3;
reg   [11:0] x_coefs_load_reg_195;
wire   [27:0] mul_ln25_fu_148_p2;
reg   [27:0] mul_ln25_reg_200;
wire    ap_CS_fsm_state4;
wire   [31:0] y_fu_129_p2;
wire    ap_CS_fsm_state5;
(* use_dsp48 = "no" *) wire   [15:0] add_ln32_fu_142_p2;
reg   [15:0] add_ln32_reg_211;
reg   [4:0] i_0_reg_76;
reg   [31:0] y_0_reg_87;
wire   [63:0] zext_ln23_fu_104_p1;
wire    ap_CS_fsm_state6;
wire   [31:0] zext_ln25_2_fu_126_p1;
wire   [15:0] trunc_ln25_1_fu_138_p1;
wire   [15:0] trunc_ln25_fu_135_p1;
wire   [15:0] mul_ln25_fu_148_p0;
wire   [11:0] mul_ln25_fu_148_p1;
wire   [9:0] grp_fu_154_p0;
wire  signed [15:0] grp_fu_154_p3;
reg   [5:0] ap_NS_fsm;
wire   [27:0] mul_ln25_fu_148_p00;
wire   [27:0] mul_ln25_fu_148_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

filter_x_ant #(
    .DataWidth( 16 ),
    .AddressRange( 29 ),
    .AddressWidth( 5 ))
x_ant_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_ant_address0),
    .ce0(x_ant_ce0),
    .we0(x_ant_we0),
    .d0(x_ant_d0),
    .q0(x_ant_q0)
);

filter_x_coefs #(
    .DataWidth( 12 ),
    .AddressRange( 29 ),
    .AddressWidth( 5 ))
x_coefs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_coefs_address0),
    .ce0(x_coefs_ce0),
    .q0(x_coefs_q0)
);

filter_mul_mul_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
filter_mul_mul_16bkb_U1(
    .din0(mul_ln25_fu_148_p0),
    .din1(mul_ln25_fu_148_p1),
    .dout(mul_ln25_fu_148_p2)
);

filter_mac_muladdcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
filter_mac_muladdcud_U2(
    .din0(grp_fu_154_p0),
    .din1(x),
    .din2(add_ln32_reg_211),
    .dout(grp_fu_154_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_186 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_76 <= add_ln23_reg_166;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_76 <= 5'd28;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_186 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        y_0_reg_87 <= y_fu_129_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_0_reg_87 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln23_reg_166 <= add_ln23_fu_98_p2;
        icmp_ln27_reg_186 <= icmp_ln27_fu_114_p2;
        zext_ln23_1_reg_176[4 : 0] <= zext_ln23_1_fu_109_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_186 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln32_reg_211 <= add_ln32_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln25_reg_200 <= mul_ln25_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_ant_load_reg_190 <= x_ant_q0;
        x_coefs_load_reg_195 <= x_coefs_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_ant_address0 = 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_ant_address0 = zext_ln23_1_reg_176;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_ant_address0 = zext_ln23_fu_104_p1;
    end else begin
        x_ant_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        x_ant_ce0 = 1'b1;
    end else begin
        x_ant_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_ant_d0 = x;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_ant_d0 = x_ant_q0;
    end else begin
        x_ant_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        x_ant_we0 = 1'b1;
    end else begin
        x_ant_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_coefs_ce0 = 1'b1;
    end else begin
        x_coefs_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln27_reg_186 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_98_p2 = ($signed(i_0_reg_76) + $signed(5'd31));

assign add_ln32_fu_142_p2 = (trunc_ln25_1_fu_138_p1 + trunc_ln25_fu_135_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = grp_fu_154_p3;

assign grp_fu_154_p0 = 16'd479;

assign icmp_ln27_fu_114_p2 = ((add_ln23_fu_98_p2 == 5'd0) ? 1'b1 : 1'b0);

assign mul_ln25_fu_148_p0 = mul_ln25_fu_148_p00;

assign mul_ln25_fu_148_p00 = x_ant_load_reg_190;

assign mul_ln25_fu_148_p1 = mul_ln25_fu_148_p10;

assign mul_ln25_fu_148_p10 = x_coefs_load_reg_195;

assign trunc_ln25_1_fu_138_p1 = y_0_reg_87[15:0];

assign trunc_ln25_fu_135_p1 = mul_ln25_reg_200[15:0];

assign x_coefs_address0 = zext_ln23_1_fu_109_p1;

assign y_fu_129_p2 = (zext_ln25_2_fu_126_p1 + y_0_reg_87);

assign zext_ln23_1_fu_109_p1 = i_0_reg_76;

assign zext_ln23_fu_104_p1 = add_ln23_fu_98_p2;

assign zext_ln25_2_fu_126_p1 = mul_ln25_reg_200;

always @ (posedge ap_clk) begin
    zext_ln23_1_reg_176[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //filter
