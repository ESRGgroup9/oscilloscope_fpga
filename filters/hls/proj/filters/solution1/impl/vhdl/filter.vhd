-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "filter,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=113,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=170,HLS_SYN_LUT=194,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv16_1DF : STD_LOGIC_VECTOR (15 downto 0) := "0000000111011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_ant_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_ant_ce0 : STD_LOGIC;
    signal x_ant_we0 : STD_LOGIC;
    signal x_ant_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_ant_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_coefs_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_coefs_ce0 : STD_LOGIC;
    signal x_coefs_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln23_fu_98_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_reg_166 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln23_1_fu_109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_reg_176 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln27_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_ant_load_reg_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_coefs_load_reg_195 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln25_fu_148_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln25_reg_200 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln32_fu_142_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln32_fu_142_p2 : signal is "no";
    signal add_ln32_reg_211 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_76 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_0_reg_87 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln23_fu_104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln25_2_fu_126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln25_1_fu_138_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln25_fu_135_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln25_fu_148_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln25_fu_148_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_154_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_154_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln25_fu_148_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln25_fu_148_p10 : STD_LOGIC_VECTOR (27 downto 0);

    component filter_mul_mul_16bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component filter_mac_muladdcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component filter_x_ant IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component filter_x_coefs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    x_ant_U : component filter_x_ant
    generic map (
        DataWidth => 16,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_ant_address0,
        ce0 => x_ant_ce0,
        we0 => x_ant_we0,
        d0 => x_ant_d0,
        q0 => x_ant_q0);

    x_coefs_U : component filter_x_coefs
    generic map (
        DataWidth => 12,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_coefs_address0,
        ce0 => x_coefs_ce0,
        q0 => x_coefs_q0);

    filter_mul_mul_16bkb_U1 : component filter_mul_mul_16bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln25_fu_148_p0,
        din1 => mul_ln25_fu_148_p1,
        dout => mul_ln25_fu_148_p2);

    filter_mac_muladdcud_U2 : component filter_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_154_p0,
        din1 => x,
        din2 => add_ln32_reg_211,
        dout => grp_fu_154_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_76 <= add_ln23_reg_166;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_76 <= ap_const_lv5_1C;
            end if; 
        end if;
    end process;

    y_0_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_0_reg_87 <= y_fu_129_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_0_reg_87 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln23_reg_166 <= add_ln23_fu_98_p2;
                icmp_ln27_reg_186 <= icmp_ln27_fu_114_p2;
                    zext_ln23_1_reg_176(4 downto 0) <= zext_ln23_1_fu_109_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_186 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln32_reg_211 <= add_ln32_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln25_reg_200 <= mul_ln25_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_ant_load_reg_190 <= x_ant_q0;
                x_coefs_load_reg_195 <= x_coefs_q0;
            end if;
        end if;
    end process;
    zext_ln23_1_reg_176(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln27_reg_186, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln27_reg_186 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln23_fu_98_p2 <= std_logic_vector(unsigned(i_0_reg_76) + unsigned(ap_const_lv5_1F));
    add_ln32_fu_142_p2 <= std_logic_vector(unsigned(trunc_ln25_1_fu_138_p1) + unsigned(trunc_ln25_fu_135_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_154_p3;
    grp_fu_154_p0 <= ap_const_lv16_1DF(10 - 1 downto 0);
    icmp_ln27_fu_114_p2 <= "1" when (add_ln23_fu_98_p2 = ap_const_lv5_0) else "0";
    mul_ln25_fu_148_p0 <= mul_ln25_fu_148_p00(16 - 1 downto 0);
    mul_ln25_fu_148_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_ant_load_reg_190),28));
    mul_ln25_fu_148_p1 <= mul_ln25_fu_148_p10(12 - 1 downto 0);
    mul_ln25_fu_148_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_coefs_load_reg_195),28));
    trunc_ln25_1_fu_138_p1 <= y_0_reg_87(16 - 1 downto 0);
    trunc_ln25_fu_135_p1 <= mul_ln25_reg_200(16 - 1 downto 0);

    x_ant_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln23_1_reg_176, ap_CS_fsm_state3, zext_ln23_fu_104_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_ant_address0 <= ap_const_lv5_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_ant_address0 <= zext_ln23_1_reg_176(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_ant_address0 <= zext_ln23_fu_104_p1(5 - 1 downto 0);
        else 
            x_ant_address0 <= "XXXXX";
        end if; 
    end process;


    x_ant_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x_ant_ce0 <= ap_const_logic_1;
        else 
            x_ant_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ant_d0_assign_proc : process(x, x_ant_q0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_ant_d0 <= x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_ant_d0 <= x_ant_q0;
        else 
            x_ant_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_ant_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x_ant_we0 <= ap_const_logic_1;
        else 
            x_ant_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_coefs_address0 <= zext_ln23_1_fu_109_p1(5 - 1 downto 0);

    x_coefs_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_coefs_ce0 <= ap_const_logic_1;
        else 
            x_coefs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_fu_129_p2 <= std_logic_vector(unsigned(zext_ln25_2_fu_126_p1) + unsigned(y_0_reg_87));
    zext_ln23_1_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_76),64));
    zext_ln23_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_98_p2),64));
    zext_ln25_2_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln25_reg_200),32));
end behav;
