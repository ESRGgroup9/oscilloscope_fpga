-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_ant_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ant_ce0 : OUT STD_LOGIC;
    x_ant_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_coefs_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_coefs_ce0 : OUT STD_LOGIC;
    x_coefs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dcValEn : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fir_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_filter,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=114,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=16,HLS_SYN_FF=1818,HLS_SYN_LUT=3999,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_3F00000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111100000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_409FFC0000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000010011111111111000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FFF : STD_LOGIC_VECTOR (15 downto 0) := "0000111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal mask_table1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table1_ce0 : STD_LOGIC;
    signal mask_table1_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_195_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_626 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln18_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_coefs_load_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_ant_load_reg_646 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln20_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_1_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_661 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_666 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal select_ln24_fu_220_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln24_reg_671 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_676 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal p_Result_s_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_V_reg_691 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_1_fu_248_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_1_reg_699 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln368_fu_267_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_reg_710 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln849_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln849_1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_1_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_349_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_8_reg_728 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln19_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_reg_743 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_V_4_reg_748 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_5_fu_452_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_5_reg_754 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Val2_14_fu_549_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal y_0_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_165 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln20_1_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal mul_ln20_fu_210_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_V_fu_252_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln32_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_6_fu_285_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_5_fu_292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_3_fu_316_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_2_fu_306_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_7_fu_298_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_sig_V_3_fu_320_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1309_fu_337_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sign_V_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_fu_326_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_V_fu_343_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln849_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_369_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln849_fu_380_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln849_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln849_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln849_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln19_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln849_1_fu_401_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln19_1_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln475_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_9_fu_426_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_V_fu_456_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln502_fu_469_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_472_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_486_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_478_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_491_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_495_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_1_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_511_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_465_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_fu_507_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_515_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_7_fu_527_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_521_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_539_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal result_V_1_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_15_fu_562_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_576_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_8_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_fu_596_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_8_fu_592_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln20_fu_210_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component fir_filter_dadd_6cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fir_filter_dmul_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fir_filter_sitodpeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fir_filter_mask_tbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;



begin
    mask_table1_U : component fir_filter_mask_tbkb
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table1_address0,
        ce0 => mask_table1_ce0,
        q0 => mask_table1_q0);

    fir_filter_dadd_6cud_U1 : component fir_filter_dadd_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_666,
        din1 => select_ln24_reg_671,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    fir_filter_dmul_6dEe_U2 : component fir_filter_dmul_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_661,
        din1 => ap_const_lv64_3F00000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    fir_filter_sitodpeOg_U3 : component fir_filter_sitodpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_0_reg_153,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_165 <= i_reg_626;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_0_reg_165 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    y_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                y_0_reg_153 <= y_1_fu_215_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                y_0_reg_153 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_626 <= i_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                icmp_ln19_1_reg_738 <= icmp_ln19_1_fu_364_p2;
                icmp_ln19_reg_733 <= icmp_ln19_fu_359_p2;
                icmp_ln849_1_reg_722 <= icmp_ln849_1_fu_276_p2;
                icmp_ln849_reg_715 <= icmp_ln849_fu_271_p2;
                p_Result_8_reg_728 <= p_Result_8_fu_349_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln20_reg_651 <= mul_ln20_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                p_Result_9_reg_743 <= p_Val2_9_fu_426_p3(63 downto 63);
                tmp_V_4_reg_748 <= p_Val2_9_fu_426_p3(62 downto 52);
                tmp_V_5_reg_754 <= tmp_V_5_fu_452_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                p_Result_s_reg_682 <= p_Val2_s_fu_227_p1(63 downto 63);
                tmp_V_1_reg_699 <= tmp_V_1_fu_248_p1;
                tmp_V_reg_691 <= p_Val2_s_fu_227_p1(62 downto 52);
                trunc_ln368_reg_710 <= trunc_ln368_fu_267_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                p_Val2_14_reg_759 <= p_Val2_14_fu_549_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    select_ln24_reg_671(52 downto 42) <= select_ln24_fu_220_p3(52 downto 42);    select_ln24_reg_671(55) <= select_ln24_fu_220_p3(55);    select_ln24_reg_671(62) <= select_ln24_fu_220_p3(62);
                tmp_6_reg_666 <= grp_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_reg_661 <= grp_fu_185_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_ant_load_reg_646 <= x_ant_q0;
                x_coefs_load_reg_641 <= x_coefs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                x_assign_reg_676 <= grp_fu_176_p2;
            end if;
        end if;
    end process;
    select_ln24_reg_671(41 downto 0) <= "000000000000000000000000000000000000000000";
    select_ln24_reg_671(54 downto 53) <= "00";
    select_ln24_reg_671(61 downto 56) <= "000000";
    select_ln24_reg_671(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, icmp_ln18_fu_189_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln18_fu_189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln502_fu_472_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_469_p1));
    and_ln19_1_fu_417_p2 <= (icmp_ln849_reg_715 and and_ln19_fu_412_p2);
    and_ln19_fu_412_p2 <= (p_Result_s_reg_682 and or_ln19_fu_408_p2);
    and_ln849_fu_396_p2 <= (xor_ln849_fu_391_p2 and icmp_ln849_1_reg_722);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_return <= 
        select_ln27_fu_596_p3 when (or_ln27_fu_604_p2(0) = '1') else 
        empty_8_fu_592_p1;
    bitcast_ln475_fu_422_p1 <= select_ln849_1_fu_401_p3;
    bitcast_ln849_fu_387_p1 <= select_ln849_fu_380_p3;
    empty_8_fu_592_p1 <= p_Val2_15_fu_562_p3(16 - 1 downto 0);
    i_fu_195_p2 <= std_logic_vector(unsigned(i_0_reg_165) + unsigned(ap_const_lv5_1));
    icmp_ln18_fu_189_p2 <= "1" when (i_0_reg_165 = ap_const_lv5_17) else "0";
    icmp_ln19_1_fu_364_p2 <= "0" when (tmp_V_reg_691 = ap_const_lv11_0) else "1";
    icmp_ln19_fu_359_p2 <= "0" when (tmp_V_1_reg_699 = ap_const_lv52_0) else "1";
    icmp_ln29_fu_586_p2 <= "1" when (signed(tmp_9_fu_576_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln849_1_fu_276_p2 <= "1" when (unsigned(tmp_V_reg_691) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln849_fu_271_p2 <= "1" when (unsigned(tmp_V_reg_691) < unsigned(ap_const_lv11_3FF)) else "0";
    index_V_fu_252_p4 <= p_Val2_s_fu_227_p1(57 downto 52);
    isNeg_fu_478_p3 <= add_ln502_fu_472_p2(11 downto 11);
    mantissa_V_fu_456_p4 <= ((ap_const_lv1_1 & tmp_V_5_reg_754) & ap_const_lv1_0);
    mask_table1_address0 <= zext_ln498_fu_262_p1(6 - 1 downto 0);

    mask_table1_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            mask_table1_ce0 <= ap_const_logic_1;
        else 
            mask_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln20_fu_210_p1 <= mul_ln20_fu_210_p10(16 - 1 downto 0);
    mul_ln20_fu_210_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_ant_load_reg_646),32));
    mul_ln20_fu_210_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(x_coefs_load_reg_641) * signed('0' &mul_ln20_fu_210_p1))), 32));
    or_ln19_fu_408_p2 <= (icmp_ln19_reg_733 or icmp_ln19_1_reg_738);
    or_ln27_fu_604_p2 <= (tmp_8_fu_568_p3 or icmp_ln29_fu_586_p2);
    or_ln849_fu_376_p2 <= (icmp_ln849_reg_715 or icmp_ln849_1_reg_722);
    p_Result_5_fu_369_p3 <= (p_Result_s_reg_682 & ap_const_lv63_0);
    p_Result_6_fu_285_p3 <= (ap_const_lv1_1 & trunc_ln368_reg_710);
    p_Result_7_fu_298_p3 <= p_Val2_5_fu_292_p2(63 downto 63);
    p_Result_8_fu_349_p4 <= ((xs_sign_V_fu_332_p2 & xs_exp_V_fu_326_p3) & xs_sig_V_fu_343_p2);
    p_Val2_14_fu_549_p3 <= 
        zext_ln662_fu_535_p1 when (isNeg_fu_478_p3(0) = '1') else 
        tmp_2_fu_539_p4;
    p_Val2_15_fu_562_p3 <= 
        result_V_1_fu_557_p2 when (p_Result_9_reg_743(0) = '1') else 
        p_Val2_14_reg_759;
    p_Val2_5_fu_292_p2 <= std_logic_vector(unsigned(zext_ln32_fu_281_p1) + unsigned(p_Result_6_fu_285_p3));
    p_Val2_9_fu_426_p3 <= 
        ap_const_lv64_BFF0000000000000 when (and_ln19_1_fu_417_p2(0) = '1') else 
        bitcast_ln475_fu_422_p1;
    p_Val2_s_fu_227_p1 <= x_assign_reg_676;
    r_V_1_fu_521_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_465_p1),to_integer(unsigned('0' & zext_ln1287_fu_507_p1(31-1 downto 0)))));
    r_V_fu_515_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_456_p4),to_integer(unsigned('0' & zext_ln1285_fu_511_p1(31-1 downto 0)))));
    result_V_1_fu_557_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_14_reg_759));
    select_ln24_fu_220_p3 <= 
        ap_const_lv64_409FFC0000000000 when (dcValEn(0) = '1') else 
        ap_const_lv64_0;
    select_ln27_fu_596_p3 <= 
        ap_const_lv16_0 when (tmp_8_fu_568_p3(0) = '1') else 
        ap_const_lv16_FFF;
    select_ln849_1_fu_401_p3 <= 
        x_assign_reg_676 when (and_ln849_fu_396_p2(0) = '1') else 
        bitcast_ln849_fu_387_p1;
    select_ln849_fu_380_p3 <= 
        p_Result_5_fu_369_p3 when (or_ln849_fu_376_p2(0) = '1') else 
        p_Result_8_reg_728;
        sext_ln1311_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_495_p3),32));

        sext_ln1311_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_486_p2),12));

    sub_ln1311_fu_486_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_4_reg_748));
    tmp_2_fu_539_p4 <= r_V_1_fu_521_p2(84 downto 53);
    tmp_7_fu_527_p3 <= r_V_fu_515_p2(53 downto 53);
    tmp_8_fu_568_p3 <= p_Val2_15_fu_562_p3(31 downto 31);
    tmp_9_fu_576_p4 <= p_Val2_15_fu_562_p3(31 downto 12);
    tmp_V_1_fu_248_p1 <= p_Val2_s_fu_227_p1(52 - 1 downto 0);
    tmp_V_2_fu_306_p4 <= p_Val2_5_fu_292_p2(62 downto 52);
    tmp_V_3_fu_316_p1 <= p_Val2_5_fu_292_p2(52 - 1 downto 0);
    tmp_V_5_fu_452_p1 <= p_Val2_9_fu_426_p3(52 - 1 downto 0);
    trunc_ln368_fu_267_p1 <= p_Val2_s_fu_227_p1(63 - 1 downto 0);
    ush_fu_495_p3 <= 
        sext_ln1311_fu_491_p1 when (isNeg_fu_478_p3(0) = '1') else 
        add_ln502_fu_472_p2;
    x_ant_address0 <= zext_ln20_1_fu_201_p1(5 - 1 downto 0);

    x_ant_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_ant_ce0 <= ap_const_logic_1;
        else 
            x_ant_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_coefs_address0 <= zext_ln20_1_fu_201_p1(5 - 1 downto 0);

    x_coefs_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_coefs_ce0 <= ap_const_logic_1;
        else 
            x_coefs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1309_fu_337_p2 <= (mask_table1_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xor_ln849_fu_391_p2 <= (icmp_ln849_reg_715 xor ap_const_lv1_1);
    xs_exp_V_fu_326_p3 <= 
        tmp_V_2_fu_306_p4 when (p_Result_s_reg_682(0) = '1') else 
        tmp_V_reg_691;
    xs_sig_V_3_fu_320_p3 <= 
        tmp_V_3_fu_316_p1 when (p_Result_s_reg_682(0) = '1') else 
        tmp_V_1_reg_699;
    xs_sig_V_fu_343_p2 <= (xs_sig_V_3_fu_320_p3 and xor_ln1309_fu_337_p2);
    xs_sign_V_fu_332_p2 <= (p_Result_s_reg_682 and p_Result_7_fu_298_p3);
    y_1_fu_215_p2 <= std_logic_vector(unsigned(mul_ln20_reg_651) + unsigned(y_0_reg_153));
    zext_ln1285_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_503_p1),54));
    zext_ln1287_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_503_p1),137));
    zext_ln20_1_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_165),64));
    zext_ln32_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table1_q0),64));
    zext_ln498_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_252_p4),64));
    zext_ln502_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_748),12));
    zext_ln662_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_527_p3),32));
    zext_ln682_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_456_p4),137));
end behav;
