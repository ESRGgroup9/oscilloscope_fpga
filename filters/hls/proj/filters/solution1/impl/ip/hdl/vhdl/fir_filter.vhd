-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_ant_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ant_ce0 : OUT STD_LOGIC;
    x_ant_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_coefs_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_coefs_ce0 : OUT STD_LOGIC;
    x_coefs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dcValEn : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fir_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_filter,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=93,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=127,HLS_SYN_LUT=220,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv16_7FF : STD_LOGIC_VECTOR (15 downto 0) := "0000011111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_7FF : STD_LOGIC_VECTOR (11 downto 0) := "011111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_119_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_255 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln17_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_ant_load_reg_270 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_coefs_load_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y32b_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal y32b_0_reg_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_102 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_fu_125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y16b_fu_131_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln38_fu_141_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln38_1_fu_148_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln_fu_155_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal y16b_1_fu_165_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_185_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_177_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln41_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_207_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_1_fu_171_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln41_1_fu_221_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln31_fu_236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln31_fu_236_p10 : STD_LOGIC_VECTOR (31 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_102 <= i_reg_255;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_102 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    y32b_0_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                y32b_0_reg_90 <= y32b_fu_241_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y32b_0_reg_90 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_255 <= i_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln31_reg_280 <= mul_ln31_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_ant_load_reg_270 <= x_ant_q0;
                x_coefs_load_reg_275 <= x_coefs_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln17_fu_113_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln17_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln38_1_fu_171_p2 <= std_logic_vector(unsigned(select_ln38_1_fu_148_p3) + unsigned(trunc_ln_fu_155_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_113_p2)
    begin
        if (((icmp_ln17_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_113_p2)
    begin
        if (((icmp_ln17_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_1_fu_221_p3),16));
    i_fu_119_p2 <= std_logic_vector(unsigned(i_0_reg_102) + unsigned(ap_const_lv5_1));
    icmp_ln17_fu_113_p2 <= "1" when (i_0_reg_102 = ap_const_lv5_17) else "0";
    icmp_ln44_fu_195_p2 <= "0" when (tmp_1_fu_185_p4 = ap_const_lv4_0) else "1";
    mul_ln31_fu_236_p1 <= mul_ln31_fu_236_p10(16 - 1 downto 0);
    mul_ln31_fu_236_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_ant_load_reg_270),32));
    mul_ln31_fu_236_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(x_coefs_load_reg_275) * signed('0' &mul_ln31_fu_236_p1))), 32));
    or_ln41_fu_215_p2 <= (tmp_fu_177_p3 or icmp_ln44_fu_195_p2);
    select_ln38_1_fu_148_p3 <= 
        ap_const_lv12_7FF when (dcValEn(0) = '1') else 
        ap_const_lv12_0;
    select_ln38_fu_141_p3 <= 
        ap_const_lv16_7FF when (dcValEn(0) = '1') else 
        ap_const_lv16_0;
    select_ln41_1_fu_221_p3 <= 
        select_ln41_fu_207_p3 when (or_ln41_fu_215_p2(0) = '1') else 
        add_ln38_1_fu_171_p2;
    select_ln41_fu_207_p3 <= 
        ap_const_lv12_FFF when (xor_ln41_fu_201_p2(0) = '1') else 
        ap_const_lv12_0;
    tmp_1_fu_185_p4 <= y16b_1_fu_165_p2(15 downto 12);
    tmp_fu_177_p3 <= y16b_1_fu_165_p2(15 downto 15);
    trunc_ln_fu_155_p4 <= y32b_0_reg_90(26 downto 15);
    x_ant_address0 <= zext_ln31_fu_125_p1(5 - 1 downto 0);

    x_ant_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_ant_ce0 <= ap_const_logic_1;
        else 
            x_ant_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_coefs_address0 <= zext_ln31_fu_125_p1(5 - 1 downto 0);

    x_coefs_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_coefs_ce0 <= ap_const_logic_1;
        else 
            x_coefs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln41_fu_201_p2 <= (tmp_fu_177_p3 xor ap_const_lv1_1);
    y16b_1_fu_165_p2 <= std_logic_vector(unsigned(y16b_fu_131_p4) + unsigned(select_ln38_fu_141_p3));
    y16b_fu_131_p4 <= y32b_0_reg_90(30 downto 15);
    y32b_fu_241_p2 <= std_logic_vector(unsigned(mul_ln31_reg_280) + unsigned(y32b_0_reg_90));
    zext_ln31_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_102),64));
end behav;
