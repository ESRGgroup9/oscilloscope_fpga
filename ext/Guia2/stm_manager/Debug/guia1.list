
guia1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fdc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c8  0800a1e0  0800a1e0  0001a1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5a8  0800b5a8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5a8  0800b5a8  0001b5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b0  0800b5b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b0  0800b5b0  0001b5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b5b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000080  0800b638  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  0800b638  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002265f  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c2  00000000  00000000  0004270d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00046ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  000482f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cad3  00000000  00000000  00049528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c41a  00000000  00000000  00075ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105110  00000000  00000000  00092415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00197525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea4  00000000  00000000  00197578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a1c4 	.word	0x0800a1c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800a1c4 	.word	0x0800a1c4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <MX_ADC1_Init+0xa0>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800064c:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800066e:	f002 fbe1 	bl	8002e34 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000678:	f001 fa74 	bl	8001b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800068e:	f002 fe5d 	bl	800334c <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000698:	f001 fa64 	bl	8001b64 <Error_Handler>
  }

}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000027c 	.word	0x2000027c
 80006a8:	40012000 	.word	0x40012000

080006ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a25      	ldr	r2, [pc, #148]	; (8000760 <HAL_ADC_MspInit+0xb4>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d143      	bne.n	8000756 <HAL_ADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	4a24      	ldr	r2, [pc, #144]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d8:	6453      	str	r3, [r2, #68]	; 0x44
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fe:	2301      	movs	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000702:	2303      	movs	r3, #3
 8000704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4815      	ldr	r0, [pc, #84]	; (8000768 <HAL_ADC_MspInit+0xbc>)
 8000712:	f004 f85f 	bl	80047d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2012      	movs	r0, #18
 800071c:	f003 f94b 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000720:	2012      	movs	r0, #18
 8000722:	f003 f964 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */
	
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
		
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	; 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40012000 	.word	0x40012000
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000

0800076c <ADC_Config_Channel>:
}

/* USER CODE BEGIN 1 */

char ADC_Config_Channel(ADC_HandleTypeDef* hadc, uint8_t addr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	ADC_ChannelConfTypeDef channel_config = {0};
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]

	/**** ADC1 CHANNELS ****/
	// IN0  - IN7  in pins PA0 - PA7
	// IN8  - IN9  in pins PB0 - PB1
	// IN10 - IN15 in pins PC0 - PC5
	pin = addr;
 8000786:	4a2d      	ldr	r2, [pc, #180]	; (800083c <ADC_Config_Channel+0xd0>)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	7013      	strb	r3, [r2, #0]
	port = 2; // GPIO Port C
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <ADC_Config_Channel+0xd4>)
 800078e:	2202      	movs	r2, #2
 8000790:	701a      	strb	r2, [r3, #0]
	
	if(addr < 8) 				// Channels IN0 - IN7
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	2b07      	cmp	r3, #7
 8000796:	d803      	bhi.n	80007a0 <ADC_Config_Channel+0x34>
		port = 0;		 			// GPIO Port A
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <ADC_Config_Channel+0xd4>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e012      	b.n	80007c6 <ADC_Config_Channel+0x5a>
	else if(addr < 10)  // Channels IN8 - IN9
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b09      	cmp	r3, #9
 80007a4:	d809      	bhi.n	80007ba <ADC_Config_Channel+0x4e>
	{
		port = 1;					// GPIO Port B
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <ADC_Config_Channel+0xd4>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
		pin -= 8;					// Pins 0 - 1
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <ADC_Config_Channel+0xd0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3b08      	subs	r3, #8
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <ADC_Config_Channel+0xd0>)
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e005      	b.n	80007c6 <ADC_Config_Channel+0x5a>
	}
	else								// Channels IN10 - IN15
		pin -= 10;				// Pins 0 - 5
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <ADC_Config_Channel+0xd0>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	3b0a      	subs	r3, #10
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <ADC_Config_Channel+0xd0>)
 80007c4:	701a      	strb	r2, [r3, #0]
	
	pin_mode = GPIO_PIN_MODE(port, pin); // Save pin mode
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <ADC_Config_Channel+0xd4>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <ADC_Config_Channel+0xd8>)
 80007ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <ADC_Config_Channel+0xd0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	fa22 f303 	lsr.w	r3, r2, r3
 80007de:	f003 0303 	and.w	r3, r3, #3
 80007e2:	4a19      	ldr	r2, [pc, #100]	; (8000848 <ADC_Config_Channel+0xdc>)
 80007e4:	6013      	str	r3, [r2, #0]
	if((pin_mode != GPIO_MODE_INPUT) && (pin_mode != GPIO_MODE_ANALOG)) // PinMode as output push-pull?
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <ADC_Config_Channel+0xdc>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <ADC_Config_Channel+0x8e>
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <ADC_Config_Channel+0xdc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d001      	beq.n	80007fa <ADC_Config_Channel+0x8e>
		return (char)(-1);
 80007f6:	23ff      	movs	r3, #255	; 0xff
 80007f8:	e01b      	b.n	8000832 <ADC_Config_Channel+0xc6>
	
	GPIO_config_pins(port, (1<<pin), GPIO_MODE_ANALOG);
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <ADC_Config_Channel+0xd4>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <ADC_Config_Channel+0xd0>)
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	4611      	mov	r1, r2
 8000804:	2201      	movs	r2, #1
 8000806:	408a      	lsls	r2, r1
 8000808:	4611      	mov	r1, r2
 800080a:	2203      	movs	r2, #3
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fc55 	bl	80010bc <GPIO_config_pins>
	
	channel_config.Channel = ADC_Channels[addr];
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <ADC_Config_Channel+0xe0>)
 8000816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081a:	60bb      	str	r3, [r7, #8]
	channel_config.Rank = ADC_REGULAR_RANK_1;
 800081c:	2301      	movs	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
  channel_config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
	
	HAL_ADC_ConfigChannel(hadc, &channel_config);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4619      	mov	r1, r3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f002 fd8e 	bl	800334c <HAL_ADC_ConfigChannel>
	
	return 0;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200002c4 	.word	0x200002c4
 8000840:	200002cc 	.word	0x200002cc
 8000844:	0800ad24 	.word	0x0800ad24
 8000848:	20000350 	.word	0x20000350
 800084c:	0800abd4 	.word	0x0800abd4

08000850 <ADC_DeConfig_Channel>:

void ADC_DeConfig_Channel(ADC_HandleTypeDef* hadc, uint8_t addr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
		GPIO_config_pins(port, (1<<pin), pin_mode);
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <ADC_DeConfig_Channel+0x30>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <ADC_DeConfig_Channel+0x34>)
 8000862:	7812      	ldrb	r2, [r2, #0]
 8000864:	4611      	mov	r1, r2
 8000866:	2201      	movs	r2, #1
 8000868:	408a      	lsls	r2, r1
 800086a:	4611      	mov	r1, r2
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <ADC_DeConfig_Channel+0x38>)
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fc23 	bl	80010bc <GPIO_config_pins>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200002cc 	.word	0x200002cc
 8000884:	200002c4 	.word	0x200002c4
 8000888:	20000350 	.word	0x20000350

0800088c <ADC_Polling_Conv>:

uint32_t ADC_Polling_Conv(ADC_HandleTypeDef* hadc)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	uint32_t dig_val = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
//	while(hadc->State == HAL_BUSY)
//		;
//	dig_val = HAL_ADC_GetValue(hadc);
//	HAL_ADC_Stop(hadc);
	
	return dig_val;
 8000898:	68fb      	ldr	r3, [r7, #12]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	static float y;
	
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState) 1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	4827      	ldr	r0, [pc, #156]	; (8000954 <HAL_ADC_ConvCpltCallback+0xac>)
 80008b6:	f004 f951 	bl	8004b5c <HAL_GPIO_WritePin>
	
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0); //#debug
	if(hadc->Instance == ADC1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a26      	ldr	r2, [pc, #152]	; (8000958 <HAL_ADC_ConvCpltCallback+0xb0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d142      	bne.n	800094a <HAL_ADC_ConvCpltCallback+0xa2>
	{
		adcValue = HAL_ADC_GetValue(&hadc1);
 80008c4:	4825      	ldr	r0, [pc, #148]	; (800095c <HAL_ADC_ConvCpltCallback+0xb4>)
 80008c6:	f002 fd1f 	bl	8003308 <HAL_ADC_GetValue>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a24      	ldr	r2, [pc, #144]	; (8000960 <HAL_ADC_ConvCpltCallback+0xb8>)
 80008ce:	6013      	str	r3, [r2, #0]
		smps_left--;
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <HAL_ADC_ConvCpltCallback+0xbc>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	3b01      	subs	r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <HAL_ADC_ConvCpltCallback+0xbc>)
 80008dc:	701a      	strb	r2, [r3, #0]
		
		// apply selected filter
		y = filter_calc(&f, adcValue);
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <HAL_ADC_ConvCpltCallback+0xb8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4820      	ldr	r0, [pc, #128]	; (8000968 <HAL_ADC_ConvCpltCallback+0xc0>)
 80008e6:	f000 fb05 	bl	8000ef4 <filter_calc>
 80008ea:	eef0 7a40 	vmov.f32	s15, s0
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 80008f0:	edc3 7a00 	vstr	s15, [r3]

		if(y == -1) // is filter disabled?
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 80008f6:	edd3 7a00 	vldr	s15, [r3]
 80008fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80008fe:	eef4 7a47 	vcmp.f32	s15, s14
 8000902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000906:	d105      	bne.n	8000914 <HAL_ADC_ConvCpltCallback+0x6c>
			// Add new value to buffer
			output(adcValue);
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_ADC_ConvCpltCallback+0xb8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f833 	bl	8000978 <output>
 8000912:	e015      	b.n	8000940 <HAL_ADC_ConvCpltCallback+0x98>
		else
		{
				if(y > 4095)  // larger than max digital DAC value?
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000970 <HAL_ADC_ConvCpltCallback+0xc8>
 800091e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000926:	dd02      	ble.n	800092e <HAL_ADC_ConvCpltCallback+0x86>
					// send max value
					y = 4095;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <HAL_ADC_ConvCpltCallback+0xcc>)
 800092c:	601a      	str	r2, [r3, #0]
			
			// Add filtered value to buffer
			output(y);
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000930:	edd3 7a00 	vldr	s15, [r3]
 8000934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000938:	ee17 0a90 	vmov	r0, s15
 800093c:	f000 f81c 	bl	8000978 <output>
		}
		
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState) 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <HAL_ADC_ConvCpltCallback+0xac>)
 8000946:	f004 f909 	bl	8004b5c <HAL_GPIO_WritePin>
		//adcFlag = 1;
	}
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400
 8000958:	40012000 	.word	0x40012000
 800095c:	2000027c 	.word	0x2000027c
 8000960:	200002c8 	.word	0x200002c8
 8000964:	20000278 	.word	0x20000278
 8000968:	200000b8 	.word	0x200000b8
 800096c:	200000a0 	.word	0x200000a0
 8000970:	457ff000 	.word	0x457ff000
 8000974:	457ff000 	.word	0x457ff000

08000978 <output>:

static void output(uint32_t value)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
//	char str[16];
	ADC_Values[ADC_Val_index & (ADC_VALUES_LEN - 1)] = value;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <output+0x6c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	4917      	ldr	r1, [pc, #92]	; (80009e8 <output+0x70>)
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	ADC_Val_index++;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <output+0x6c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	3301      	adds	r3, #1
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <output+0x6c>)
 800099e:	701a      	strb	r2, [r3, #0]
	
//	sprintf(str, "n%d v%d\n\r", ADC_smp_num, value);
//	UART_puts(str);

	ADC_smp_num++;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <output+0x74>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	3301      	adds	r3, #1
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <output+0x74>)
 80009ac:	801a      	strh	r2, [r3, #0]

	// Send to DAC
	// DAC ready to send?
	if(HAL_DAC_GetState(&hdac) != HAL_DAC_STATE_READY)
 80009ae:	4810      	ldr	r0, [pc, #64]	; (80009f0 <output+0x78>)
 80009b0:	f003 fa6e 	bl	8003e90 <HAL_DAC_GetState>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d003      	beq.n	80009c2 <output+0x4a>
		HAL_DAC_Stop(&hdac,DAC1_CHANNEL_1);
 80009ba:	2100      	movs	r1, #0
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <output+0x78>)
 80009be:	f003 f8a4 	bl	8003b0a <HAL_DAC_Stop>
	// Start DAC and send value
	if(HAL_DAC_Start(&hdac,DAC1_CHANNEL_1) == HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <output+0x78>)
 80009c6:	f003 f84e 	bl	8003a66 <HAL_DAC_Start>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d105      	bne.n	80009dc <output+0x64>
		HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, value);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <output+0x78>)
 80009d8:	f003 f9c8 	bl	8003d6c <HAL_DAC_SetValue>

}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000009c 	.word	0x2000009c
 80009e8:	200002d0 	.word	0x200002d0
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000354 	.word	0x20000354

080009f4 <print_adcValues>:

void print_adcValues(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af02      	add	r7, sp, #8
	char str[16];
	uint8_t arr_index = (ADC_Val_index - (ADC_smp_num - 1)), i;
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <print_adcValues+0x6c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <print_adcValues+0x70>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	75fb      	strb	r3, [r7, #23]
	
	for(i = 1; i < ADC_smp_num; i++)
 8000a10:	2301      	movs	r3, #1
 8000a12:	75bb      	strb	r3, [r7, #22]
 8000a14:	e017      	b.n	8000a46 <print_adcValues+0x52>
	{
		snprintf(str, sizeof(str), "n%d v%ld\n\r", i, ADC_Values[arr_index & (ADC_VALUES_LEN - 1)]);
 8000a16:	7dba      	ldrb	r2, [r7, #22]
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	f003 031f 	and.w	r3, r3, #31
 8000a1e:	4912      	ldr	r1, [pc, #72]	; (8000a68 <print_adcValues+0x74>)
 8000a20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a24:	1d38      	adds	r0, r7, #4
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <print_adcValues+0x78>)
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	f007 fbf3 	bl	8008218 <sniprintf>
		UART_puts(str);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 f911 	bl	8002c5c <UART_puts>
		arr_index++;
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	75fb      	strb	r3, [r7, #23]
	for(i = 1; i < ADC_smp_num; i++)
 8000a40:	7dbb      	ldrb	r3, [r7, #22]
 8000a42:	3301      	adds	r3, #1
 8000a44:	75bb      	strb	r3, [r7, #22]
 8000a46:	7dbb      	ldrb	r3, [r7, #22]
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <print_adcValues+0x70>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d3e0      	bcc.n	8000a16 <print_adcValues+0x22>
	}	
}	
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000009c 	.word	0x2000009c
 8000a64:	20000000 	.word	0x20000000
 8000a68:	200002d0 	.word	0x200002d0
 8000a6c:	0800a1e0 	.word	0x0800a1e0

08000a70 <exec_cmd>:
		0
	},
};

char exec_cmd(const char *str)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	char err;
	
	err = parse_cmd(cmd_list, str);
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	4818      	ldr	r0, [pc, #96]	; (8000adc <exec_cmd+0x6c>)
 8000a7c:	f001 f878 	bl	8001b70 <parse_cmd>
 8000a80:	4603      	mov	r3, r0
 8000a82:	73fb      	strb	r3, [r7, #15]
	
	switch(err)
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	3bf9      	subs	r3, #249	; 0xf9
 8000a88:	2b05      	cmp	r3, #5
 8000a8a:	d821      	bhi.n	8000ad0 <exec_cmd+0x60>
 8000a8c:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <exec_cmd+0x24>)
 8000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a92:	bf00      	nop
 8000a94:	08000ac9 	.word	0x08000ac9
 8000a98:	08000ac1 	.word	0x08000ac1
 8000a9c:	08000aad 	.word	0x08000aad
 8000aa0:	08000ad1 	.word	0x08000ad1
 8000aa4:	08000ad1 	.word	0x08000ad1
 8000aa8:	08000ad1 	.word	0x08000ad1
	{
		case (char)(-ECMDNF):
			// No command found
			UART_puts("Command [");
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <exec_cmd+0x70>)
 8000aae:	f002 f8d5 	bl	8002c5c <UART_puts>
			UART_puts(Rx_Buffer);
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <exec_cmd+0x74>)
 8000ab4:	f002 f8d2 	bl	8002c5c <UART_puts>
			UART_puts("] not found.\n\r");
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <exec_cmd+0x78>)
 8000aba:	f002 f8cf 	bl	8002c5c <UART_puts>
			break;
 8000abe:	e007      	b.n	8000ad0 <exec_cmd+0x60>
		
		case (char)(-EINVARG):
			// Invalid Arguments
			UART_puts("Invalid arguments.\n\r");
 8000ac0:	480a      	ldr	r0, [pc, #40]	; (8000aec <exec_cmd+0x7c>)
 8000ac2:	f002 f8cb 	bl	8002c5c <UART_puts>
			break;
 8000ac6:	e003      	b.n	8000ad0 <exec_cmd+0x60>
			// Command list is empty
		//case (char)(-ENOLIST):
			// No memory available or bad allocation of memory
			break;
		case (char)(-EPERM):
			UART_puts("No permission.\n\r");
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <exec_cmd+0x80>)
 8000aca:	f002 f8c7 	bl	8002c5c <UART_puts>
			break;
 8000ace:	bf00      	nop
	}
	
	return err;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	0800ac14 	.word	0x0800ac14
 8000ae0:	0800a5ac 	.word	0x0800a5ac
 8000ae4:	200005e8 	.word	0x200005e8
 8000ae8:	0800a5b8 	.word	0x0800a5b8
 8000aec:	0800a5c8 	.word	0x0800a5c8
 8000af0:	0800a5e0 	.word	0x0800a5e0

08000af4 <print_arg_help>:
@brief	 	 Print a list of the valid commands
******************************************************************************/
#define OPDONE 		2

static char print_arg_help(const Command_t *p, char arg[])
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0c4      	sub	sp, #272	; 0x110
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	6018      	str	r0, [r3, #0]
 8000afe:	463b      	mov	r3, r7
 8000b00:	6019      	str	r1, [r3, #0]
	char str[256];

	if(strcmp(p->cmd,arg) == 0)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	463b      	mov	r3, r7
 8000b0a:	6819      	ldr	r1, [r3, #0]
 8000b0c:	4610      	mov	r0, r2
 8000b0e:	f7ff fb97 	bl	8000240 <strcmp>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d119      	bne.n	8000b4c <print_arg_help+0x58>
	{
		snprintf(str, sizeof(str), "%-6s %-28s\n\r%s\n\r", p->cmd, p->help, p->usage);
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	1d3a      	adds	r2, r7, #4
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	6892      	ldr	r2, [r2, #8]
 8000b2a:	f107 0008 	add.w	r0, r7, #8
 8000b2e:	9201      	str	r2, [sp, #4]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	460b      	mov	r3, r1
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <print_arg_help+0x64>)
 8000b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3a:	f007 fb6d 	bl	8008218 <sniprintf>
		UART_puts(str);
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 f88a 	bl	8002c5c <UART_puts>
		return OPDONE;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e000      	b.n	8000b4e <print_arg_help+0x5a>
	}

	return ECMDNF;
 8000b4c:	2305      	movs	r3, #5
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	0800a5f4 	.word	0x0800a5f4

08000b5c <print_full_help>:

static char print_full_help(const Command_t *p, char arg[])
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0a4      	sub	sp, #144	; 0x90
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
	char str[128];

//	snprintf(str, sizeof(str), "%-6s %-28s %s\n\r", p->cmd, p->help, p->usage);
	snprintf(str, sizeof(str), "%-6s %s\n\r", p->cmd, p->help);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f107 0008 	add.w	r0, r7, #8
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	4613      	mov	r3, r2
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <print_full_help+0x38>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	f007 fb4d 	bl	8008218 <sniprintf>
	UART_puts(str);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 f86a 	bl	8002c5c <UART_puts>

	return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3788      	adds	r7, #136	; 0x88
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	0800a608 	.word	0x0800a608

08000b98 <help_cb>:

char help_cb(uint8_t argc, char** argv)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0a6      	sub	sp, #152	; 0x98
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
	const Command_t *p = cmd_list;
 8000ba4:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <help_cb+0xb4>)
 8000ba6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	char str[128]; // Output message. Max message len is the same as buffer used in UART_puts
	char (*fun_ptr)(const Command_t *, char*) = &print_full_help;
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <help_cb+0xb8>)
 8000bac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	char retval = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	
	if(argc > 2) // number of arguments invalid?
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d901      	bls.n	8000bc0 <help_cb+0x28>
		return (char)(-EINVARG);
 8000bbc:	23fa      	movs	r3, #250	; 0xfa
 8000bbe:	e040      	b.n	8000c42 <help_cb+0xaa>
	
	if(argc == 2)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d103      	bne.n	8000bce <help_cb+0x36>
	{
		fun_ptr = &print_arg_help;
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <help_cb+0xbc>)
 8000bc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000bcc:	e01d      	b.n	8000c0a <help_cb+0x72>
	}
	else
	{
		UART_puts("List of utils:\n\r");
 8000bce:	4822      	ldr	r0, [pc, #136]	; (8000c58 <help_cb+0xc0>)
 8000bd0:	f002 f844 	bl	8002c5c <UART_puts>
		UART_puts("$      Insert last valid command\n\r");
 8000bd4:	4821      	ldr	r0, [pc, #132]	; (8000c5c <help_cb+0xc4>)
 8000bd6:	f002 f841 	bl	8002c5c <UART_puts>
		UART_puts("ESC    Clears input line\n\n\r");
 8000bda:	4821      	ldr	r0, [pc, #132]	; (8000c60 <help_cb+0xc8>)
 8000bdc:	f002 f83e 	bl	8002c5c <UART_puts>

		UART_puts("List of valid commands:\n\r");
 8000be0:	4820      	ldr	r0, [pc, #128]	; (8000c64 <help_cb+0xcc>)
 8000be2:	f002 f83b 	bl	8002c5c <UART_puts>
//		snprintf(str, sizeof(str), "%-6s|%-28s|%-s\n\n\r", "CMD", "HELP TEXT", "USAGE");
//		UART_puts(str);
	}

	while (p->cmd && (retval != OPDONE))
 8000be6:	e010      	b.n	8000c0a <help_cb+0x72>
	{
		retval = fun_ptr(p, argv[1]);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	3304      	adds	r3, #4
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000bf8:	4798      	blx	r3
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		p++;
 8000c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c04:	3310      	adds	r3, #16
 8000c06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	while (p->cmd && (retval != OPDONE))
 8000c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <help_cb+0x84>
 8000c14:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d1e5      	bne.n	8000be8 <help_cb+0x50>
	}

	if(retval == ECMDNF)
 8000c1c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000c20:	2b05      	cmp	r3, #5
 8000c22:	d10d      	bne.n	8000c40 <help_cb+0xa8>
	{
		snprintf(str, sizeof(str), "Command [%s] not found.\n\r", argv[1]);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	3304      	adds	r3, #4
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f107 000c 	add.w	r0, r7, #12
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <help_cb+0xd0>)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	f007 faf1 	bl	8008218 <sniprintf>
		UART_puts(str);
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 f80e 	bl	8002c5c <UART_puts>
	}

	return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3798      	adds	r7, #152	; 0x98
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	0800ac14 	.word	0x0800ac14
 8000c50:	08000b5d 	.word	0x08000b5d
 8000c54:	08000af5 	.word	0x08000af5
 8000c58:	0800a614 	.word	0x0800a614
 8000c5c:	0800a628 	.word	0x0800a628
 8000c60:	0800a64c 	.word	0x0800a64c
 8000c64:	0800a668 	.word	0x0800a668
 8000c68:	0800a684 	.word	0x0800a684

08000c6c <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_DAC_Init+0x64>)
 8000c7c:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <MX_DAC_Init+0x68>)
 8000c7e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <MX_DAC_Init+0x64>)
 8000c82:	f002 fece 	bl	8003a22 <HAL_DAC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c8c:	f000 ff6a 	bl	8001b64 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_DAC_Init+0x64>)
 8000ca0:	f003 f8a7 	bl	8003df2 <HAL_DAC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000caa:	f000 ff5b 	bl	8001b64 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000cae:	2324      	movs	r3, #36	; 0x24
 8000cb0:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_DAC_Init+0x64>)
 8000cba:	f003 f89a 	bl	8003df2 <HAL_DAC_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8000cc4:	f000 ff4e 	bl	8001b64 <Error_Handler>
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000354 	.word	0x20000354
 8000cd4:	40007400 	.word	0x40007400

08000cd8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a2e      	ldr	r2, [pc, #184]	; (8000db0 <HAL_DAC_MspInit+0xd8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d155      	bne.n	8000da6 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_DAC_MspInit+0xdc>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a2d      	ldr	r2, [pc, #180]	; (8000db4 <HAL_DAC_MspInit+0xdc>)
 8000d00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <HAL_DAC_MspInit+0xdc>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <HAL_DAC_MspInit+0xdc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <HAL_DAC_MspInit+0xdc>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <HAL_DAC_MspInit+0xdc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d2a:	2330      	movs	r3, #48	; 0x30
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481e      	ldr	r0, [pc, #120]	; (8000db8 <HAL_DAC_MspInit+0xe0>)
 8000d3e:	f003 fd49 	bl	80047d4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d44:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <HAL_DAC_MspInit+0xe8>)
 8000d46:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d4a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000d4e:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d52:	2240      	movs	r2, #64	; 0x40
 8000d54:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d62:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d6a:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d72:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7a:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d7e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d82:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d8c:	f003 f918 	bl	8003fc0 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8000d96:	f000 fee5 	bl	8001b64 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_DAC_MspInit+0xe4>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40007400 	.word	0x40007400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	20000368 	.word	0x20000368
 8000dc0:	400260a0 	.word	0x400260a0

08000dc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_DMA_Init+0x38>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <MX_DMA_Init+0x38>)
 8000dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_DMA_Init+0x38>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2011      	movs	r0, #17
 8000de8:	f002 fde5 	bl	80039b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000dec:	2011      	movs	r0, #17
 8000dee:	f002 fdfe 	bl	80039ee <HAL_NVIC_EnableIRQ>

}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <filter_init>:
@param		 none
@brief	 	 Enables filter
@retval 	 Filter state
******************************************************************************/
char filter_init(filter_t *ft)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	if(!ft || ft->status)	// filter enabled?
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <filter_init+0x16>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7f1b      	ldrb	r3, [r3, #28]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <filter_init+0x1a>
		// Filter already initialized
		return (char)(-1);
 8000e16:	23ff      	movs	r3, #255	; 0xff
 8000e18:	e037      	b.n	8000e8a <filter_init+0x8a>
	
	ft->x_ant = (float*)malloc(ft->M + 1);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	f007 f91f 	bl	8008064 <malloc>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
	if(!ft->x_ant)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <filter_init+0x3a>
		return (char)(-1);
 8000e36:	23ff      	movs	r3, #255	; 0xff
 8000e38:	e027      	b.n	8000e8a <filter_init+0x8a>

	ft->y_ant = (float*)malloc(ft->N + 1);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f007 f90f 	bl	8008064 <malloc>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60da      	str	r2, [r3, #12]
	if(!ft->y_ant)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <filter_init+0x5a>
		return (char)(-1);
 8000e56:	23ff      	movs	r3, #255	; 0xff
 8000e58:	e017      	b.n	8000e8a <filter_init+0x8a>

	memset(ft->x_ant, 0, (ft->M + 1)*sizeof(ft->x_ant[0])); 	// clear the x_ant buff
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6898      	ldr	r0, [r3, #8]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	461a      	mov	r2, r3
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f007 f90b 	bl	8008084 <memset>
	memset(ft->y_ant, 0, (ft->N + 1)*sizeof(ft->y_ant[0]));	// clear the y_ant buff
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68d8      	ldr	r0, [r3, #12]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	3301      	adds	r3, #1
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	f007 f901 	bl	8008084 <memset>
	ft->status = 1; // enabled
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	771a      	strb	r2, [r3, #28]
	// Exit success
	return 0; 
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <filter_kill>:
@brief	 	 Disables filter
@retval 	 Filter state
******************************************************************************/

char filter_kill(filter_t *ft)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
	if(!ft || ft->status == 0) // filter disabled?
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <filter_kill+0x16>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7f1b      	ldrb	r3, [r3, #28]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <filter_kill+0x1a>
		// Filter already disabled
		return (char)(-1);
 8000ea8:	23ff      	movs	r3, #255	; 0xff
 8000eaa:	e01f      	b.n	8000eec <filter_kill+0x5a>

	ft->status = 0; // disabled
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	771a      	strb	r2, [r3, #28]

	free(ft->x_ant);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f007 f8dc 	bl	8008074 <free>
	ft->x_ant = NULL;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]

	free(ft->y_ant);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f007 f8d4 	bl	8008074 <free>
	ft->y_ant = NULL;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]

	ft->M = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	ft->N = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
	ft->x_coefs = NULL;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
	ft->y_coefs = NULL;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]

	// Exit success
	return 0;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <filter_calc>:
#define __CASE_A__

#ifdef __CASE_A__

float filter_calc(filter_t *ft, uint32_t x)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	if(!ft || ft->status == 0)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <filter_calc+0x18>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7f1b      	ldrb	r3, [r3, #28]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <filter_calc+0x1c>
		// Filter is disabled. Return error
		return -1;
 8000f0c:	4b58      	ldr	r3, [pc, #352]	; (8001070 <filter_calc+0x17c>)
 8000f0e:	e0a6      	b.n	800105e <filter_calc+0x16a>
	
	float y = 0;
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
	int i = ft->M;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	60bb      	str	r3, [r7, #8]

	while(i != 0)
 8000f1c:	e027      	b.n	8000f6e <filter_calc+0x7a>
	{
		// Update x_ant values
		ft->x_ant[i] = ft->x_ant[i-1];
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000f28:	440b      	add	r3, r1
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	441a      	add	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6899      	ldr	r1, [r3, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	601a      	str	r2, [r3, #0]
		// Add to y only the x_ant values
		y += ft->x_coefs[i] * ft->x_ant[i];
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695a      	ldr	r2, [r3, #20]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f64:	edc7 7a03 	vstr	s15, [r7, #12]
		i--;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
	while(i != 0)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1d4      	bne.n	8000f1e <filter_calc+0x2a>
	}
	// Update last received X value
	ft->x_ant[0] = x;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	ee07 2a90 	vmov	s15, r2
 8000f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f82:	edc3 7a00 	vstr	s15, [r3]
	// Add it to y	
	y += ft->x_coefs[i] * ft->x_ant[i];
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	ed93 7a00 	vldr	s14, [r3]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	edd3 7a00 	vldr	s15, [r3]
 8000fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fae:	edc7 7a03 	vstr	s15, [r7, #12]
	
	i = ft->N;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	60bb      	str	r3, [r7, #8]
	while (i != 0)
 8000fb8:	e027      	b.n	800100a <filter_calc+0x116>
	{
		// Update y_ant values
		ft->y_ant[i] = ft->y_ant[i-1];
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000fc4:	440b      	add	r3, r1
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	441a      	add	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68d9      	ldr	r1, [r3, #12]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	601a      	str	r2, [r3, #0]
		// Add to y only the y_ant values
		y += ft->y_coefs[i] * ft->y_ant[i];
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	ed93 7a00 	vldr	s14, [r3]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	edd3 7a00 	vldr	s15, [r3]
 8000ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001000:	edc7 7a03 	vstr	s15, [r7, #12]
		i--;
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	3b01      	subs	r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
	while (i != 0)
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1d4      	bne.n	8000fba <filter_calc+0xc6>
	}
	// Update last Y value = x
	ft->y_ant[0] = y;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	601a      	str	r2, [r3, #0]
	// Add it to y
	y += ft->y_coefs[i] * ft->y_ant[i];
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	ed93 7a00 	vldr	s14, [r3]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001038:	ed97 7a03 	vldr	s14, [r7, #12]
 800103c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001040:	edc7 7a03 	vstr	s15, [r7, #12]
	
	// add dc component
	y += ft->dc;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001050:	ed97 7a03 	vldr	s14, [r7, #12]
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	edc7 7a03 	vstr	s15, [r7, #12]

	// Return filtered (x) value
	return y;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	ee07 3a90 	vmov	s15, r3
}
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	bf800000 	.word	0xbf800000

08001074 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_GPIO_Init+0x44>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <MX_GPIO_Init+0x44>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_GPIO_Init+0x44>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_GPIO_Init+0x44>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <MX_GPIO_Init+0x44>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_GPIO_Init+0x44>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <GPIO_config_pins>:

/* USER CODE BEGIN 2 */

void GPIO_config_pins(uint8_t port, uint32_t pin_setting, uint32_t GPIO_Mode)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	73fb      	strb	r3, [r7, #15]
	GPIO_InitTypeDef GPIO_Struct = {0};
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
	GPIO_Struct.Pin = pin_setting;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	617b      	str	r3, [r7, #20]
	GPIO_Struct.Mode = GPIO_Mode;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	61bb      	str	r3, [r7, #24]
	GPIO_Struct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIO_Ports[port], &GPIO_Struct);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <GPIO_config_pins+0x48>)
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	f107 0214 	add.w	r2, r7, #20
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fb6d 	bl	80047d4 <HAL_GPIO_Init>
}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	0800ad24 	.word	0x0800ad24

08001108 <GPIO_check_res_pins>:

char GPIO_check_res_pins(uint16_t port_addr, uint32_t *pin_setting)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	80fb      	strh	r3, [r7, #6]
	if(port_addr == 0)	//Port A
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d129      	bne.n	800116e <GPIO_check_res_pins+0x66>
	{
		if(IS_BIT_SET(*pin_setting, 13) || IS_BIT_SET(*pin_setting, 14))		//PA13, PA14 - DEBUG
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0b5b      	lsrs	r3, r3, #13
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d106      	bne.n	8001136 <GPIO_check_res_pins+0x2e>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0b9b      	lsrs	r3, r3, #14
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00d      	beq.n	8001152 <GPIO_check_res_pins+0x4a>
		{
			CLEARBIT(*pin_setting, 13);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	601a      	str	r2, [r3, #0]
			CLEARBIT(*pin_setting, 14);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	601a      	str	r2, [r3, #0]
			return (char)(-1);
 800114e:	23ff      	movs	r3, #255	; 0xff
 8001150:	e02d      	b.n	80011ae <GPIO_check_res_pins+0xa6>
		}
		if(IS_BIT_SET(*pin_setting, 0)) // PA0 - ADC1 IN0
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <GPIO_check_res_pins+0x66>
		{
			CLEARBIT(*pin_setting, 0);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 0201 	bic.w	r2, r3, #1
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	601a      	str	r2, [r3, #0]
			return (char)(-1);
 800116a:	23ff      	movs	r3, #255	; 0xff
 800116c:	e01f      	b.n	80011ae <GPIO_check_res_pins+0xa6>
		}			
	}
	if(port_addr == 3) 	//Port D
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	2b03      	cmp	r3, #3
 8001172:	d11b      	bne.n	80011ac <GPIO_check_res_pins+0xa4>
	{
		if(IS_BIT_SET(*pin_setting, 8) || IS_BIT_SET(*pin_setting, 9))	//PD8, PD9 - UART
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <GPIO_check_res_pins+0x88>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0a5b      	lsrs	r3, r3, #9
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00d      	beq.n	80011ac <GPIO_check_res_pins+0xa4>
		{
			CLEARBIT(*pin_setting, 8);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	601a      	str	r2, [r3, #0]
			CLEARBIT(*pin_setting, 9);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	601a      	str	r2, [r3, #0]
			return (char)(-1);
 80011a8:	23ff      	movs	r3, #255	; 0xff
 80011aa:	e000      	b.n	80011ae <GPIO_check_res_pins+0xa6>
		}
	}
	return 0;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <ver_cb>:
@usage		 VER

@brief	 	 Prints the version and colaborators info 
******************************************************************************/
char ver_cb(uint8_t argc, char** argv)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
	if(argc != 1) // number of arguments invalid?
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d001      	beq.n	80011d2 <ver_cb+0x16>
		return (char)(-EINVARG);
 80011ce:	23fa      	movs	r3, #250	; 0xfa
 80011d0:	e006      	b.n	80011e0 <ver_cb+0x24>
	
	// 1.0 Interfacing with STM
	// 1.1 Sampling using ADC
	// 1.2 Digital filters (IIR/FIR)
	UART_puts("Current version: 1.2\n\rUsing STM32F767ZI-NUCLEO.\n\n\r");
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <ver_cb+0x2c>)
 80011d4:	f001 fd42 	bl	8002c5c <UART_puts>
	UART_puts("Developers:\n\r- Diogo Fernandes\n\r- Tomas Abreu\n\r@LPI-II Universidade do Minho, April 2021\n\r");
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <ver_cb+0x30>)
 80011da:	f001 fd3f 	bl	8002c5c <UART_puts>
	return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	0800a6a0 	.word	0x0800a6a0
 80011ec:	0800a6d4 	.word	0x0800a6d4

080011f0 <mr_cb>:
@usage		 MR <addr16> <length8>

@brief	 	 Read <length> memory positions, starting on <addr>
******************************************************************************/
char mr_cb(uint8_t argc, char** argv)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
	uint32_t addr;
	uint16_t len;
	
	if(argc != 3) // number of arguments invalid?
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d001      	beq.n	8001206 <mr_cb+0x16>
		return (char)(-EINVARG);
 8001202:	23fa      	movs	r3, #250	; 0xfa
 8001204:	e026      	b.n	8001254 <mr_cb+0x64>
	
	addr = my_atoi(argv[1]);		// converts argument to int 
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fd55 	bl	8002cbc <my_atoi>
 8001212:	4603      	mov	r3, r0
 8001214:	60fb      	str	r3, [r7, #12]
	if(!IS_ADDR16(addr))
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121c:	d301      	bcc.n	8001222 <mr_cb+0x32>
		return (char)(-EINVARG);
 800121e:	23fa      	movs	r3, #250	; 0xfa
 8001220:	e018      	b.n	8001254 <mr_cb+0x64>
	
	len = my_atoi(argv[2]);			// converts argument to int 
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3308      	adds	r3, #8
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fd47 	bl	8002cbc <my_atoi>
 800122e:	4603      	mov	r3, r0
 8001230:	817b      	strh	r3, [r7, #10]
	if((len == 0) || (!IS_ADDR8(len)))
 8001232:	897b      	ldrh	r3, [r7, #10]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <mr_cb+0x4e>
 8001238:	897b      	ldrh	r3, [r7, #10]
 800123a:	2bff      	cmp	r3, #255	; 0xff
 800123c:	d901      	bls.n	8001242 <mr_cb+0x52>
		return (char)(-EINVARG);
 800123e:	23fa      	movs	r3, #250	; 0xfa
 8001240:	e008      	b.n	8001254 <mr_cb+0x64>
	
	return memory_read(addr, len);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	b29b      	uxth	r3, r3
 8001246:	897a      	ldrh	r2, [r7, #10]
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fae1 	bl	8001814 <memory_read>
 8001252:	4603      	mov	r3, r0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <mw_cb>:
@usage		 MW <addr16> <length8> <byte8>

@brief	 	 Write <byte>, starting on memory address <addr> for <lenght> positions
******************************************************************************/
char mw_cb(uint8_t argc, char** argv)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
	uint32_t addr;
	uint16_t len;
	uint16_t byte;
	
	if(argc != 4) 	// number of arguments invalid?
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b04      	cmp	r3, #4
 800126c:	d001      	beq.n	8001272 <mw_cb+0x16>
		return (char)(-EINVARG);
 800126e:	23fa      	movs	r3, #250	; 0xfa
 8001270:	e036      	b.n	80012e0 <mw_cb+0x84>
	
	addr = my_atoi(argv[1]);	// converts argument to int 
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	3304      	adds	r3, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fd1f 	bl	8002cbc <my_atoi>
 800127e:	4603      	mov	r3, r0
 8001280:	60fb      	str	r3, [r7, #12]
	if(!IS_ADDR16(addr))
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001288:	d301      	bcc.n	800128e <mw_cb+0x32>
		return (char)(-EINVARG);
 800128a:	23fa      	movs	r3, #250	; 0xfa
 800128c:	e028      	b.n	80012e0 <mw_cb+0x84>
	
	len = (char) my_atoi(argv[2]);	// converts argument to int 
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3308      	adds	r3, #8
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fd11 	bl	8002cbc <my_atoi>
 800129a:	4603      	mov	r3, r0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	817b      	strh	r3, [r7, #10]
	if((len == 0) || (!IS_ADDR8(len)))
 80012a0:	897b      	ldrh	r3, [r7, #10]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <mw_cb+0x50>
 80012a6:	897b      	ldrh	r3, [r7, #10]
 80012a8:	2bff      	cmp	r3, #255	; 0xff
 80012aa:	d901      	bls.n	80012b0 <mw_cb+0x54>
		return (char)(-EINVARG);
 80012ac:	23fa      	movs	r3, #250	; 0xfa
 80012ae:	e017      	b.n	80012e0 <mw_cb+0x84>
		
	byte = (char) my_atoi(argv[3]);	// converts argument to int 
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	330c      	adds	r3, #12
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fd00 	bl	8002cbc <my_atoi>
 80012bc:	4603      	mov	r3, r0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	813b      	strh	r3, [r7, #8]
	if(!IS_ADDR8(byte))
 80012c2:	893b      	ldrh	r3, [r7, #8]
 80012c4:	2bff      	cmp	r3, #255	; 0xff
 80012c6:	d901      	bls.n	80012cc <mw_cb+0x70>
		return (char)(-EINVARG);
 80012c8:	23fa      	movs	r3, #250	; 0xfa
 80012ca:	e009      	b.n	80012e0 <mw_cb+0x84>

	return memory_write(addr, len, byte);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	897a      	ldrh	r2, [r7, #10]
 80012d2:	b2d1      	uxtb	r1, r2
 80012d4:	893a      	ldrh	r2, [r7, #8]
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 faf5 	bl	80018c8 <memory_write>
 80012de:	4603      	mov	r3, r0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <mi_cb>:
@usage		 MI <port_addr8> <pin_setting8>

@brief	 	 
******************************************************************************/
char mi_cb(uint8_t argc, char** argv)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	char str[32];	// Output message
	
	if(argc != 3) // number of arguments invalid?
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d001      	beq.n	80012fe <mi_cb+0x16>
		return (char)(-EINVARG);
 80012fa:	23fa      	movs	r3, #250	; 0xfa
 80012fc:	e062      	b.n	80013c4 <mi_cb+0xdc>
	
	port_addr = my_atoi(argv[1]);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3304      	adds	r3, #4
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fcd9 	bl	8002cbc <my_atoi>
 800130a:	4603      	mov	r3, r0
 800130c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	if(!IS_PORT_ADDR(port_addr))
 800130e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001310:	2b0a      	cmp	r3, #10
 8001312:	d901      	bls.n	8001318 <mi_cb+0x30>
		return (char)(-EINVARG);
 8001314:	23fa      	movs	r3, #250	; 0xfa
 8001316:	e055      	b.n	80013c4 <mi_cb+0xdc>
	
	pin_setting = my_atoi(argv[2]);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	3308      	adds	r3, #8
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fccc 	bl	8002cbc <my_atoi>
 8001324:	4603      	mov	r3, r0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
	if(!IS_PIN_SETTING(pin_setting))
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <mi_cb+0x4e>
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d301      	bcc.n	800133a <mi_cb+0x52>
		return (char)(-EINVARG);
 8001336:	23fa      	movs	r3, #250	; 0xfa
 8001338:	e044      	b.n	80013c4 <mi_cb+0xdc>
	
	if(GPIO_check_res_pins(port_addr, &pin_setting))
 800133a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800133e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fee0 	bl	8001108 <GPIO_check_res_pins>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <mi_cb+0x6c>
		UART_puts("Reserved pins cannot be configured.\n\r");
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <mi_cb+0xe4>)
 8001350:	f001 fc84 	bl	8002c5c <UART_puts>
	
	GPIO_config_pins(port_addr, pin_setting, GPIO_MODE_INPUT);
 8001354:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001356:	b2db      	uxtb	r3, r3
 8001358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800135a:	2200      	movs	r2, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fead 	bl	80010bc <GPIO_config_pins>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 8001362:	2300      	movs	r3, #0
 8001364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001368:	e027      	b.n	80013ba <mi_cb+0xd2>
	{
		if(((pin_setting & 0x01) == 1) && (GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_INPUT)) // checks if LSB is 1
 800136a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01a      	beq.n	80013aa <mi_cb+0xc2>
 8001374:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001376:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <mi_cb+0xe8>)
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10c      	bne.n	80013aa <mi_cb+0xc2>
		{
			sprintf(str, "Pin %2d configured as input.\n\r", i);
 8001390:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	490e      	ldr	r1, [pc, #56]	; (80013d4 <mi_cb+0xec>)
 800139a:	4618      	mov	r0, r3
 800139c:	f006 ff70 	bl	8008280 <siprintf>
			UART_puts(str);
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 fc59 	bl	8002c5c <UART_puts>
		}
		pin_setting >>= 1;
 80013aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 80013b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013b4:	3301      	adds	r3, #1
 80013b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	d9d3      	bls.n	800136a <mi_cb+0x82>
	}
	return 0;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3730      	adds	r7, #48	; 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	0800a730 	.word	0x0800a730
 80013d0:	0800ad24 	.word	0x0800ad24
 80013d4:	0800a758 	.word	0x0800a758

080013d8 <mo_cb>:
@usage		 MO <port_addr8> <pin_setting8>

@brief	 	 
******************************************************************************/
char mo_cb(uint8_t argc, char** argv)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	; 0x30
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	char str[32];	// Output message
	
	if(argc != 3) // number of arguments invalid?
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d001      	beq.n	80013ee <mo_cb+0x16>
		return (char)(-EINVARG);
 80013ea:	23fa      	movs	r3, #250	; 0xfa
 80013ec:	e062      	b.n	80014b4 <mo_cb+0xdc>
	
	port_addr = my_atoi(argv[1]);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3304      	adds	r3, #4
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fc61 	bl	8002cbc <my_atoi>
 80013fa:	4603      	mov	r3, r0
 80013fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	if(!IS_PORT_ADDR(port_addr))
 80013fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d901      	bls.n	8001408 <mo_cb+0x30>
		return (char)(-EINVARG);
 8001404:	23fa      	movs	r3, #250	; 0xfa
 8001406:	e055      	b.n	80014b4 <mo_cb+0xdc>
	
	pin_setting = my_atoi(argv[2]);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3308      	adds	r3, #8
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fc54 	bl	8002cbc <my_atoi>
 8001414:	4603      	mov	r3, r0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
	if(!IS_PIN_SETTING(pin_setting))
 8001418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <mo_cb+0x4e>
 800141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001424:	d301      	bcc.n	800142a <mo_cb+0x52>
		return (char)(-EINVARG);
 8001426:	23fa      	movs	r3, #250	; 0xfa
 8001428:	e044      	b.n	80014b4 <mo_cb+0xdc>
		
	if(GPIO_check_res_pins(port_addr, &pin_setting))
 800142a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800142e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe68 	bl	8001108 <GPIO_check_res_pins>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <mo_cb+0x6c>
		UART_puts("Reserved pins cannot be configured.\n\r");
 800143e:	481f      	ldr	r0, [pc, #124]	; (80014bc <mo_cb+0xe4>)
 8001440:	f001 fc0c 	bl	8002c5c <UART_puts>
	
	GPIO_config_pins(port_addr, pin_setting, GPIO_MODE_OUTPUT_PP);
 8001444:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001446:	b2db      	uxtb	r3, r3
 8001448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800144a:	2201      	movs	r2, #1
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fe35 	bl	80010bc <GPIO_config_pins>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 8001452:	2300      	movs	r3, #0
 8001454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001458:	e027      	b.n	80014aa <mo_cb+0xd2>
	{
		if(((pin_setting & 0x01) == 1) && (GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_OUTPUT_PP)) // checks if LSB is 1
 800145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01a      	beq.n	800149a <mo_cb+0xc2>
 8001464:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001466:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <mo_cb+0xe8>)
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d10c      	bne.n	800149a <mo_cb+0xc2>
		{
			sprintf(str, "Pin %2d configured as output.\n\r", i);		
 8001480:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	490e      	ldr	r1, [pc, #56]	; (80014c4 <mo_cb+0xec>)
 800148a:	4618      	mov	r0, r3
 800148c:	f006 fef8 	bl	8008280 <siprintf>
			UART_puts(str);
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fbe1 	bl	8002c5c <UART_puts>
		}
		pin_setting >>= 1;
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 80014a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014a4:	3301      	adds	r3, #1
 80014a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80014aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	d9d3      	bls.n	800145a <mo_cb+0x82>
	}
	return 0;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800a730 	.word	0x0800a730
 80014c0:	0800ad24 	.word	0x0800ad24
 80014c4:	0800a778 	.word	0x0800a778

080014c8 <rd_cb>:
@usage		 RD <port_addr8> <pin_setting8>

@brief	 	 
******************************************************************************/
char rd_cb(uint8_t argc, char** argv)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b090      	sub	sp, #64	; 0x40
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	char str[42];	// Output message
	
	if(argc != 3) // number of arguments invalid?
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d001      	beq.n	80014de <rd_cb+0x16>
		return (char)(-EINVARG);
 80014da:	23fa      	movs	r3, #250	; 0xfa
 80014dc:	e07c      	b.n	80015d8 <rd_cb+0x110>
	
	port_addr = my_atoi(argv[1]);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3304      	adds	r3, #4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 fbe9 	bl	8002cbc <my_atoi>
 80014ea:	4603      	mov	r3, r0
 80014ec:	873b      	strh	r3, [r7, #56]	; 0x38
	if(!IS_PORT_ADDR(port_addr))
 80014ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80014f0:	2b0a      	cmp	r3, #10
 80014f2:	d901      	bls.n	80014f8 <rd_cb+0x30>
		return (char)(-EINVARG);
 80014f4:	23fa      	movs	r3, #250	; 0xfa
 80014f6:	e06f      	b.n	80015d8 <rd_cb+0x110>
	
	pin_setting = my_atoi(argv[2]);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3308      	adds	r3, #8
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fbdc 	bl	8002cbc <my_atoi>
 8001504:	4603      	mov	r3, r0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(!IS_PIN_SETTING(pin_setting))
 8001508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <rd_cb+0x4e>
 800150e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d301      	bcc.n	800151a <rd_cb+0x52>
		return (char)(-EINVARG);
 8001516:	23fa      	movs	r3, #250	; 0xfa
 8001518:	e05e      	b.n	80015d8 <rd_cb+0x110>
	
	sprintf(str, "GPIO Port %c\n\r", (char)(port_addr + 'A'));
 800151a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800151c:	b2db      	uxtb	r3, r3
 800151e:	3341      	adds	r3, #65	; 0x41
 8001520:	b2db      	uxtb	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	492d      	ldr	r1, [pc, #180]	; (80015e0 <rd_cb+0x118>)
 800152a:	4618      	mov	r0, r3
 800152c:	f006 fea8 	bl	8008280 <siprintf>
	UART_puts(str);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4618      	mov	r0, r3
 8001536:	f001 fb91 	bl	8002c5c <UART_puts>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 800153a:	2300      	movs	r3, #0
 800153c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001540:	e045      	b.n	80015ce <rd_cb+0x106>
	{
		if((pin_setting & 0x01) == 1) // checks if LSB is 1
 8001542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d035      	beq.n	80015b8 <rd_cb+0xf0>
		{
			if(GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_INPUT) // PinMode as input?
 800154c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800154e:	4a25      	ldr	r2, [pc, #148]	; (80015e4 <rd_cb+0x11c>)
 8001550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d119      	bne.n	800159c <rd_cb+0xd4>
			{
				uint8_t val;
				val = HAL_GPIO_ReadPin(GPIO_Ports[port_addr], GPIO_Pins[i]);
 8001568:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800156a:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <rd_cb+0x11c>)
 800156c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001570:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001574:	491c      	ldr	r1, [pc, #112]	; (80015e8 <rd_cb+0x120>)
 8001576:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800157a:	4619      	mov	r1, r3
 800157c:	4610      	mov	r0, r2
 800157e:	f003 fad5 	bl	8004b2c <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				sprintf(str, "Pin %2d - '%d'\n\r", i, val);
 8001588:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800158c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001590:	f107 000c 	add.w	r0, r7, #12
 8001594:	4915      	ldr	r1, [pc, #84]	; (80015ec <rd_cb+0x124>)
 8001596:	f006 fe73 	bl	8008280 <siprintf>
 800159a:	e007      	b.n	80015ac <rd_cb+0xe4>
			}
			else
				sprintf(str, "Pin %2d not configured as input mode.\n\r", i);	// not able to read pin value
 800159c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4912      	ldr	r1, [pc, #72]	; (80015f0 <rd_cb+0x128>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f006 fe6a 	bl	8008280 <siprintf>
			
			UART_puts(str);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 fb53 	bl	8002c5c <UART_puts>
 80015b6:	e002      	b.n	80015be <rd_cb+0xf6>
		}
		else
			UART_puts("0\n\r");
 80015b8:	480e      	ldr	r0, [pc, #56]	; (80015f4 <rd_cb+0x12c>)
 80015ba:	f001 fb4f 	bl	8002c5c <UART_puts>
		
		pin_setting >>= 1;
 80015be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 80015c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015c8:	3301      	adds	r3, #1
 80015ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80015ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	d9b5      	bls.n	8001542 <rd_cb+0x7a>
	}
	return 0;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3740      	adds	r7, #64	; 0x40
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	0800a798 	.word	0x0800a798
 80015e4:	0800ad24 	.word	0x0800ad24
 80015e8:	0800ad50 	.word	0x0800ad50
 80015ec:	0800a7a8 	.word	0x0800a7a8
 80015f0:	0800a7bc 	.word	0x0800a7bc
 80015f4:	0800a7e4 	.word	0x0800a7e4

080015f8 <wd_cb>:
@usage		 WD <port_addr8> <pin_setting8> <pin_values8>

@brief	 	 
******************************************************************************/
char wd_cb(uint8_t argc, char** argv)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b090      	sub	sp, #64	; 0x40
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	uint16_t pin_values;
	char str[42];	// Output message
	
	if(argc != 4) // number of arguments invalid?
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b04      	cmp	r3, #4
 8001608:	d001      	beq.n	800160e <wd_cb+0x16>
		return (char)(-EINVARG);
 800160a:	23fa      	movs	r3, #250	; 0xfa
 800160c:	e08c      	b.n	8001728 <wd_cb+0x130>
	
	port_addr = my_atoi(argv[1]);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	3304      	adds	r3, #4
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f001 fb51 	bl	8002cbc <my_atoi>
 800161a:	4603      	mov	r3, r0
 800161c:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(!IS_PORT_ADDR(port_addr))
 800161e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001620:	2b0a      	cmp	r3, #10
 8001622:	d901      	bls.n	8001628 <wd_cb+0x30>
		return (char)(-EINVARG);
 8001624:	23fa      	movs	r3, #250	; 0xfa
 8001626:	e07f      	b.n	8001728 <wd_cb+0x130>
	
	pin_setting = my_atoi(argv[2]);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	3308      	adds	r3, #8
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f001 fb44 	bl	8002cbc <my_atoi>
 8001634:	4603      	mov	r3, r0
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(!IS_PIN_SETTING(pin_setting))
 8001638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <wd_cb+0x4e>
 800163e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d301      	bcc.n	800164a <wd_cb+0x52>
		return (char)(-EINVARG);
 8001646:	23fa      	movs	r3, #250	; 0xfa
 8001648:	e06e      	b.n	8001728 <wd_cb+0x130>
	
	pin_values = my_atoi(argv[3]);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	330c      	adds	r3, #12
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f001 fb33 	bl	8002cbc <my_atoi>
 8001656:	4603      	mov	r3, r0
 8001658:	877b      	strh	r3, [r7, #58]	; 0x3a
	if(!IS_ADDR8(pin_values))
 800165a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800165c:	2bff      	cmp	r3, #255	; 0xff
 800165e:	d901      	bls.n	8001664 <wd_cb+0x6c>
		return (char)(-EINVARG);
 8001660:	23fa      	movs	r3, #250	; 0xfa
 8001662:	e061      	b.n	8001728 <wd_cb+0x130>

	sprintf(str, "GPIO Port %c\n\r", (char)(port_addr + 'A'));
 8001664:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3341      	adds	r3, #65	; 0x41
 800166a:	b2db      	uxtb	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	492f      	ldr	r1, [pc, #188]	; (8001730 <wd_cb+0x138>)
 8001674:	4618      	mov	r0, r3
 8001676:	f006 fe03 	bl	8008280 <siprintf>
	UART_puts(str);
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	4618      	mov	r0, r3
 8001680:	f001 faec 	bl	8002c5c <UART_puts>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800168a:	e048      	b.n	800171e <wd_cb+0x126>
	{
		if((pin_setting & 0x01) == 1) // checks if LSB is 1
 800168c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d038      	beq.n	8001708 <wd_cb+0x110>
		{
			if(GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_OUTPUT_PP) // PinMode as output push-pull?
 8001696:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <wd_cb+0x13c>)
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa22 f303 	lsr.w	r3, r2, r3
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d11d      	bne.n	80016ee <wd_cb+0xf6>
			{
				uint8_t pin_val = (pin_values & 0x01);
 80016b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				HAL_GPIO_WritePin(GPIO_Ports[port_addr], GPIO_Pins[i], (GPIO_PinState)pin_val);
 80016be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016c0:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <wd_cb+0x13c>)
 80016c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016c6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <wd_cb+0x140>)
 80016cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80016d4:	4619      	mov	r1, r3
 80016d6:	f003 fa41 	bl	8004b5c <HAL_GPIO_WritePin>
				sprintf(str, "Pin %2d - '%d'\n\r", i, pin_val);
 80016da:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80016de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80016e2:	f107 0008 	add.w	r0, r7, #8
 80016e6:	4915      	ldr	r1, [pc, #84]	; (800173c <wd_cb+0x144>)
 80016e8:	f006 fdca 	bl	8008280 <siprintf>
 80016ec:	e007      	b.n	80016fe <wd_cb+0x106>
			}
			else
				sprintf(str, "Pin %2d not configured as output mode.\n\r", i);	// not able to read pin value
 80016ee:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4912      	ldr	r1, [pc, #72]	; (8001740 <wd_cb+0x148>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f006 fdc1 	bl	8008280 <siprintf>
			
			UART_puts(str);
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f001 faaa 	bl	8002c5c <UART_puts>
		}
		pin_setting >>= 1;
 8001708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
		pin_values >>= 1;
 800170e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001710:	085b      	lsrs	r3, r3, #1
 8001712:	877b      	strh	r3, [r7, #58]	; 0x3a
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 8001714:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001718:	3301      	adds	r3, #1
 800171a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800171e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001722:	2b0f      	cmp	r3, #15
 8001724:	d9b2      	bls.n	800168c <wd_cb+0x94>
	}
	
	return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3740      	adds	r7, #64	; 0x40
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	0800a798 	.word	0x0800a798
 8001734:	0800ad24 	.word	0x0800ad24
 8001738:	0800ad50 	.word	0x0800ad50
 800173c:	0800a7a8 	.word	0x0800a7a8
 8001740:	0800a7e8 	.word	0x0800a7e8
 8001744:	00000000 	.word	0x00000000

08001748 <ra_cb>:
@usage		 RA <addr2>

@brief	 	 
******************************************************************************/
char ra_cb(uint8_t argc, char** argv)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b090      	sub	sp, #64	; 0x40
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
	uint8_t addr;
	uint32_t adcValue;
	uint32_t volt;
	char str[40];	// Output message
	
	if(argc != 2) // number of arguments invalid?
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d001      	beq.n	800175e <ra_cb+0x16>
		return (char)(-EINVARG);
 800175a:	23fa      	movs	r3, #250	; 0xfa
 800175c:	e046      	b.n	80017ec <ra_cb+0xa4>
	
	addr = my_atoi(argv[1]);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	3304      	adds	r3, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f001 faa9 	bl	8002cbc <my_atoi>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(!IS_ADDR4(addr))
 8001770:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d901      	bls.n	800177c <ra_cb+0x34>
		return (char)(-EINVARG);
 8001778:	23fa      	movs	r3, #250	; 0xfa
 800177a:	e037      	b.n	80017ec <ra_cb+0xa4>

	if(ADC_Config_Channel(&hadc1, addr)) // PinMode as output push-pull?
 800177c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001780:	4619      	mov	r1, r3
 8001782:	4821      	ldr	r0, [pc, #132]	; (8001808 <ra_cb+0xc0>)
 8001784:	f7fe fff2 	bl	800076c <ADC_Config_Channel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <ra_cb+0x50>
	{
		UART_puts("Pin not configured as input mode.\n\r");	// not able to read pin value
 800178e:	481f      	ldr	r0, [pc, #124]	; (800180c <ra_cb+0xc4>)
 8001790:	f001 fa64 	bl	8002c5c <UART_puts>
		return (char)(-EPERM);
 8001794:	23f9      	movs	r3, #249	; 0xf9
 8001796:	e029      	b.n	80017ec <ra_cb+0xa4>
	}
	
	adcValue = ADC_Polling_Conv(&hadc1);
 8001798:	481b      	ldr	r0, [pc, #108]	; (8001808 <ra_cb+0xc0>)
 800179a:	f7ff f877 	bl	800088c <ADC_Polling_Conv>
 800179e:	63b8      	str	r0, [r7, #56]	; 0x38
	volt = ((double)adcValue * 3300 / 4095);
 80017a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017aa:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80017f8 <ra_cb+0xb0>
 80017ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017b2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8001800 <ra_cb+0xb8>
 80017b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80017be:	ee17 3a90 	vmov	r3, s15
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(str, "ADC Channel %2d value: %ld mV.\n\r", addr, volt);
 80017c4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80017c8:	f107 000c 	add.w	r0, r7, #12
 80017cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ce:	4910      	ldr	r1, [pc, #64]	; (8001810 <ra_cb+0xc8>)
 80017d0:	f006 fd56 	bl	8008280 <siprintf>
	UART_puts(str);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	4618      	mov	r0, r3
 80017da:	f001 fa3f 	bl	8002c5c <UART_puts>
	
	ADC_DeConfig_Channel(&hadc1, addr); // Restores initial pin mode
 80017de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017e2:	4619      	mov	r1, r3
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <ra_cb+0xc0>)
 80017e6:	f7ff f833 	bl	8000850 <ADC_DeConfig_Channel>
	
	return 0;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3740      	adds	r7, #64	; 0x40
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	f3af 8000 	nop.w
 80017f8:	00000000 	.word	0x00000000
 80017fc:	40a9c800 	.word	0x40a9c800
 8001800:	00000000 	.word	0x00000000
 8001804:	40affe00 	.word	0x40affe00
 8001808:	2000027c 	.word	0x2000027c
 800180c:	0800a814 	.word	0x0800a814
 8001810:	0800a838 	.word	0x0800a838

08001814 <memory_read>:
@param  	 Number of addresses to be read

@brief	 	 Read <length> memory positions, starting on <addr>
******************************************************************************/
static char memory_read(uint16_t addr, uint8_t len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b092      	sub	sp, #72	; 0x48
 8001818:	af02      	add	r7, sp, #8
 800181a:	4603      	mov	r3, r0
 800181c:	460a      	mov	r2, r1
 800181e:	80fb      	strh	r3, [r7, #6]
 8001820:	4613      	mov	r3, r2
 8001822:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t* memory_ptr = (SRAM_BASE + addr); // Start reading memory from SRAM_BASE. addr is used as offset
 8001824:	88fa      	ldrh	r2, [r7, #6]
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <memory_read+0xa4>)
 8001828:	4413      	add	r3, r2
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
	char str[42];	// Output message
	
	if((memory_ptr + (len - 1)) > SRAM_TOP) // Check if memory_ptr won't go over memory top
 800182c:	797b      	ldrb	r3, [r7, #5]
 800182e:	3b01      	subs	r3, #1
 8001830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001832:	4413      	add	r3, r2
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <memory_read+0xa8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <memory_read+0x2a>
		return (char)(-EINVARG);
 800183a:	23fa      	movs	r3, #250	; 0xfa
 800183c:	e037      	b.n	80018ae <memory_read+0x9a>

	for (i = 0; i < len; i++, addr++, memory_ptr++)
 800183e:	2300      	movs	r3, #0
 8001840:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001844:	e02d      	b.n	80018a2 <memory_read+0x8e>
	{
		if(!IS_PRINTABLE(*memory_ptr)) // checks if (*memory_ptr) is a printable character
 8001846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b1f      	cmp	r3, #31
 800184c:	d903      	bls.n	8001856 <memory_read+0x42>
 800184e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b7e      	cmp	r3, #126	; 0x7e
 8001854:	d908      	bls.n	8001868 <memory_read+0x54>
			sprintf(str, "Memory [0x%04X]:     (0x%02X)\n\r", addr, (*memory_ptr));
 8001856:	88fa      	ldrh	r2, [r7, #6]
 8001858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f107 000c 	add.w	r0, r7, #12
 8001860:	4917      	ldr	r1, [pc, #92]	; (80018c0 <memory_read+0xac>)
 8001862:	f006 fd0d 	bl	8008280 <siprintf>
 8001866:	e00c      	b.n	8001882 <memory_read+0x6e>
		else // Character is printable
			sprintf(str, "Memory [0x%04X]: '%c' (0x%02X)\n\r", addr, (*memory_ptr), (*memory_ptr));
 8001868:	88fa      	ldrh	r2, [r7, #6]
 800186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f107 000c 	add.w	r0, r7, #12
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	460b      	mov	r3, r1
 800187c:	4911      	ldr	r1, [pc, #68]	; (80018c4 <memory_read+0xb0>)
 800187e:	f006 fcff 	bl	8008280 <siprintf>
		
		UART_puts(str); // Print string
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4618      	mov	r0, r3
 8001888:	f001 f9e8 	bl	8002c5c <UART_puts>
	for (i = 0; i < len; i++, addr++, memory_ptr++)
 800188c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001890:	3301      	adds	r3, #1
 8001892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	3301      	adds	r3, #1
 800189a:	80fb      	strh	r3, [r7, #6]
 800189c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800189e:	3301      	adds	r3, #1
 80018a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80018a2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80018a6:	797b      	ldrb	r3, [r7, #5]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d3cc      	bcc.n	8001846 <memory_read+0x32>
	}
	
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3740      	adds	r7, #64	; 0x40
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20060000 	.word	0x20060000
 80018bc:	2006ffff 	.word	0x2006ffff
 80018c0:	0800a85c 	.word	0x0800a85c
 80018c4:	0800a87c 	.word	0x0800a87c

080018c8 <memory_write>:
@param  	 Byte to be written 

@brief	 	 Write <byte>, starting on memory address <addr> for <lenght> positions
******************************************************************************/
static char memory_write(uint16_t addr, uint8_t len, char byte)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b090      	sub	sp, #64	; 0x40
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
 80018d2:	460b      	mov	r3, r1
 80018d4:	717b      	strb	r3, [r7, #5]
 80018d6:	4613      	mov	r3, r2
 80018d8:	713b      	strb	r3, [r7, #4]
	uint8_t i;
	uint8_t* memory_ptr = (SRAM_BASE + addr); // Start reading memory from SRAM_BASE. addr is used as offset
 80018da:	88fa      	ldrh	r2, [r7, #6]
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <memory_write+0xb0>)
 80018de:	4413      	add	r3, r2
 80018e0:	63bb      	str	r3, [r7, #56]	; 0x38
	char str[42];	// Output message
	
	if((memory_ptr + (len - 1)) > SRAM_TOP) // Check if memory_ptr won't go over memory top
 80018e2:	797b      	ldrb	r3, [r7, #5]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018e8:	4413      	add	r3, r2
 80018ea:	4a24      	ldr	r2, [pc, #144]	; (800197c <memory_write+0xb4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <memory_write+0x2c>
		return (char)(-EINVARG);
 80018f0:	23fa      	movs	r3, #250	; 0xfa
 80018f2:	e03d      	b.n	8001970 <memory_write+0xa8>

	if(!IS_PRINTABLE(byte)) // checks if (byte) is a printable character
 80018f4:	793b      	ldrb	r3, [r7, #4]
 80018f6:	2b1f      	cmp	r3, #31
 80018f8:	d902      	bls.n	8001900 <memory_write+0x38>
 80018fa:	793b      	ldrb	r3, [r7, #4]
 80018fc:	2b7e      	cmp	r3, #126	; 0x7e
 80018fe:	d907      	bls.n	8001910 <memory_write+0x48>
		sprintf(str, "Byte 0x%02X:\n\r", byte);
 8001900:	793a      	ldrb	r2, [r7, #4]
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	491e      	ldr	r1, [pc, #120]	; (8001980 <memory_write+0xb8>)
 8001908:	4618      	mov	r0, r3
 800190a:	f006 fcb9 	bl	8008280 <siprintf>
 800190e:	e006      	b.n	800191e <memory_write+0x56>
	else // Character is printable
		sprintf(str, "Byte '%c' [0x%02X]:\n\r", byte, byte);
 8001910:	793a      	ldrb	r2, [r7, #4]
 8001912:	793b      	ldrb	r3, [r7, #4]
 8001914:	f107 000c 	add.w	r0, r7, #12
 8001918:	491a      	ldr	r1, [pc, #104]	; (8001984 <memory_write+0xbc>)
 800191a:	f006 fcb1 	bl	8008280 <siprintf>
	
	UART_puts(str);
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4618      	mov	r0, r3
 8001924:	f001 f99a 	bl	8002c5c <UART_puts>
	for (i = 0; i < len; i++, addr++, memory_ptr++)
 8001928:	2300      	movs	r3, #0
 800192a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800192e:	e019      	b.n	8001964 <memory_write+0x9c>
	{
		(*memory_ptr) = byte;	// write memory pointed by memory_ptr
 8001930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001932:	793a      	ldrb	r2, [r7, #4]
 8001934:	701a      	strb	r2, [r3, #0]
		sprintf(str, "\tMemory [0x%04X] successfuly written.\n\r", addr); // format the string we want to send
 8001936:	88fa      	ldrh	r2, [r7, #6]
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	4912      	ldr	r1, [pc, #72]	; (8001988 <memory_write+0xc0>)
 800193e:	4618      	mov	r0, r3
 8001940:	f006 fc9e 	bl	8008280 <siprintf>
		UART_puts(str); // Print string
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4618      	mov	r0, r3
 800194a:	f001 f987 	bl	8002c5c <UART_puts>
	for (i = 0; i < len; i++, addr++, memory_ptr++)
 800194e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001952:	3301      	adds	r3, #1
 8001954:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	3301      	adds	r3, #1
 800195c:	80fb      	strh	r3, [r7, #6]
 800195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001960:	3301      	adds	r3, #1
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
 8001964:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001968:	797b      	ldrb	r3, [r7, #5]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3e0      	bcc.n	8001930 <memory_write+0x68>
	}
	
	return 0;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3740      	adds	r7, #64	; 0x40
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20060000 	.word	0x20060000
 800197c:	2006ffff 	.word	0x2006ffff
 8001980:	0800a8a0 	.word	0x0800a8a0
 8001984:	0800a8b0 	.word	0x0800a8b0
 8001988:	0800a8c8 	.word	0x0800a8c8

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001992:	f001 f9f2 	bl	8002d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001996:	f000 f855 	bl	8001a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199a:	f7ff fb6b 	bl	8001074 <MX_GPIO_Init>
  MX_DMA_Init();
 800199e:	f7ff fa11 	bl	8000dc4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80019a2:	f000 ffa1 	bl	80028e8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80019a6:	f7fe fe2f 	bl	8000608 <MX_ADC1_Init>
  MX_DAC_Init();
 80019aa:	f7ff f95f 	bl	8000c6c <MX_DAC_Init>
  MX_TIM2_Init();
 80019ae:	f000 fe73 	bl	8002698 <MX_TIM2_Init>
  MX_TIM6_Init();
 80019b2:	f000 febf 	bl	8002734 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // print startup message
  ver_cb(1, NULL);
 80019b6:	2100      	movs	r1, #0
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff fbff 	bl	80011bc <ver_cb>
  UART_puts("\n\rType '?' for list of available commands\n\r");
 80019be:	481b      	ldr	r0, [pc, #108]	; (8001a2c <main+0xa0>)
 80019c0:	f001 f94c 	bl	8002c5c <UART_puts>
  UART_puts("Type '? <cmd>' for more info on a given command\n\r");
 80019c4:	481a      	ldr	r0, [pc, #104]	; (8001a30 <main+0xa4>)
 80019c6:	f001 f949 	bl	8002c5c <UART_puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	 
	UART_putchar('>'); // print prompt
 80019ca:	203e      	movs	r0, #62	; 0x3e
 80019cc:	f001 f92c 	bl	8002c28 <UART_putchar>
	Rx_UART_init(); // set USART3 interrupt
 80019d0:	f001 f906 	bl	8002be0 <Rx_UART_init>
  
	while (1)
  {
		if(Rx_flag)
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <main+0xa8>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00d      	beq.n	80019fa <main+0x6e>
		{
			c = UART_Receive(); // Returns received char
 80019de:	f000 ffff 	bl	80029e0 <UART_Receive>
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
			if(c != (char)(-1))
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2bff      	cmp	r3, #255	; 0xff
 80019ea:	d003      	beq.n	80019f4 <main+0x68>
				// Its not a special character
				UART_putchar(c); // Received char is echoed
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 f91a 	bl	8002c28 <UART_putchar>

			Rx_flag = 0;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <main+0xa8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
		}
		
		if(cmd_received)
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <main+0xac>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0e7      	beq.n	80019d4 <main+0x48>
		{
			if(exec_cmd(Rx_Buffer) == 0)// Is there an error?
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <main+0xb0>)
 8001a06:	f7ff f833 	bl	8000a70 <exec_cmd>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d103      	bne.n	8001a18 <main+0x8c>
				// No error. Command is valid
				strcpy(last_valid_cmd, Rx_Buffer); // Save this as last valid command
 8001a10:	490a      	ldr	r1, [pc, #40]	; (8001a3c <main+0xb0>)
 8001a12:	480b      	ldr	r0, [pc, #44]	; (8001a40 <main+0xb4>)
 8001a14:	f006 fc54 	bl	80082c0 <strcpy>
			
			UART_putchar('>');// print prompt
 8001a18:	203e      	movs	r0, #62	; 0x3e
 8001a1a:	f001 f905 	bl	8002c28 <UART_putchar>
			cmd_received = 0;
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <main+0xac>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
			Rx_UART_init(); // ready to begin reception
 8001a24:	f001 f8dc 	bl	8002be0 <Rx_UART_init>
		if(Rx_flag)
 8001a28:	e7d4      	b.n	80019d4 <main+0x48>
 8001a2a:	bf00      	nop
 8001a2c:	0800a8f0 	.word	0x0800a8f0
 8001a30:	0800a91c 	.word	0x0800a91c
 8001a34:	2000026d 	.word	0x2000026d
 8001a38:	2000026e 	.word	0x2000026e
 8001a3c:	200005e8 	.word	0x200005e8
 8001a40:	200000a4 	.word	0x200000a4

08001a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0b8      	sub	sp, #224	; 0xe0
 8001a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a4e:	2234      	movs	r2, #52	; 0x34
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f006 fb16 	bl	8008084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a58:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	2290      	movs	r2, #144	; 0x90
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f006 fb07 	bl	8008084 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <SystemClock_Config+0x118>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a38      	ldr	r2, [pc, #224]	; (8001b5c <SystemClock_Config+0x118>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <SystemClock_Config+0x118>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <SystemClock_Config+0x11c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a33      	ldr	r2, [pc, #204]	; (8001b60 <SystemClock_Config+0x11c>)
 8001a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <SystemClock_Config+0x11c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aac:	2301      	movs	r3, #1
 8001aae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001aca:	23d8      	movs	r3, #216	; 0xd8
 8001acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 f8a5 	bl	8004c30 <HAL_RCC_OscConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001aec:	f000 f83a 	bl	8001b64 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001af0:	f003 f84e 	bl	8004b90 <HAL_PWREx_EnableOverDrive>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001afa:	f000 f833 	bl	8001b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afe:	230f      	movs	r3, #15
 8001b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b04:	2302      	movs	r3, #2
 8001b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001b20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b24:	2107      	movs	r1, #7
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fb30 	bl	800518c <HAL_RCC_ClockConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001b32:	f000 f817 	bl	8001b64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fd21 	bl	800558c <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001b50:	f000 f808 	bl	8001b64 <Error_Handler>
  }
}
 8001b54:	bf00      	nop
 8001b56:	37e0      	adds	r7, #224	; 0xe0
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40007000 	.word	0x40007000

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>
	...

08001b70 <parse_cmd>:

/*
	Analyses the command sent in str_in and execute its callback
*/
char parse_cmd(const Command_t cmd_list[], const char *str_in)
{		
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
	char **argv = NULL; // List of arguments
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
	char *arg; // aux variable. Holds latest found argument
	char *s; // copy of received command. Necessary to use strtok
	
	uint8_t len;
	uint8_t argc = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]
	char retval = (char)(-ECMDNF);
 8001b82:	23fb      	movs	r3, #251	; 0xfb
 8001b84:	75bb      	strb	r3, [r7, #22]
	
	if ((str_in == NULL) || (strlen(str_in) == 0)) // empty command
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <parse_cmd+0x24>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <parse_cmd+0x28>
		return (char)(-ENOCMD);
 8001b94:	23fe      	movs	r3, #254	; 0xfe
 8001b96:	e06f      	b.n	8001c78 <parse_cmd+0x108>
	//if (cmd_list == NULL) // no list
		//return (-ENOLIST);   

	len = strlen(str_in) + 1;
 8001b98:	6838      	ldr	r0, [r7, #0]
 8001b9a:	f7fe fb5b 	bl	8000254 <strlen>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
	s = malloc(len);                 // just in case str_in is const
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f006 fa5b 	bl	8008064 <malloc>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	60bb      	str	r3, [r7, #8]
	
	if(s == NULL)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <parse_cmd+0x4c>
		return (char)(-ENOMEM);
 8001bb8:	23fc      	movs	r3, #252	; 0xfc
 8001bba:	e05d      	b.n	8001c78 <parse_cmd+0x108>
	
	strcpy(s, str_in);
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	68b8      	ldr	r0, [r7, #8]
 8001bc0:	f006 fb7e 	bl	80082c0 <strcpy>
	arg = strtok(s, DELIMETER);
 8001bc4:	492e      	ldr	r1, [pc, #184]	; (8001c80 <parse_cmd+0x110>)
 8001bc6:	68b8      	ldr	r0, [r7, #8]
 8001bc8:	f006 fb82 	bl	80082d0 <strtok>
 8001bcc:	61b8      	str	r0, [r7, #24]
	while (arg)
 8001bce:	e025      	b.n	8001c1c <parse_cmd+0xac>
	{
		argc++;
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
		len = sizeof (argv);
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	73fb      	strb	r3, [r7, #15]
		if(argc == 1)
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d106      	bne.n	8001bee <parse_cmd+0x7e>
				argv = malloc(len);
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f006 fa3e 	bl	8008064 <malloc>
 8001be8:	4603      	mov	r3, r0
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	e008      	b.n	8001c00 <parse_cmd+0x90>
		else
				argv = realloc(argv, argc * len);
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	69f8      	ldr	r0, [r7, #28]
 8001bfa:	f006 faf5 	bl	80081e8 <realloc>
 8001bfe:	61f8      	str	r0, [r7, #28]

		argv[argc-1] = arg;
 8001c00:	7dfa      	ldrb	r2, [r7, #23]
 8001c02:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	601a      	str	r2, [r3, #0]
		arg = strtok(NULL, DELIMETER);
 8001c12:	491b      	ldr	r1, [pc, #108]	; (8001c80 <parse_cmd+0x110>)
 8001c14:	2000      	movs	r0, #0
 8001c16:	f006 fb5b 	bl	80082d0 <strtok>
 8001c1a:	61b8      	str	r0, [r7, #24]
	while (arg)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1d6      	bne.n	8001bd0 <parse_cmd+0x60>
	}

	if (argc)
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01d      	beq.n	8001c64 <parse_cmd+0xf4>
	{
		const Command_t *p;

		for(p = cmd_list; p->cmd; p++)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	e016      	b.n	8001c5c <parse_cmd+0xec>
		{
			if(strcmp(p->cmd, argv[0]) == 0)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f7fe fb01 	bl	8000240 <strcmp>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d108      	bne.n	8001c56 <parse_cmd+0xe6>
			{
				retval = (p->fn(argc, argv)); // Execute func
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	7dfa      	ldrb	r2, [r7, #23]
 8001c4a:	69f9      	ldr	r1, [r7, #28]
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4798      	blx	r3
 8001c50:	4603      	mov	r3, r0
 8001c52:	75bb      	strb	r3, [r7, #22]
				break;
 8001c54:	e006      	b.n	8001c64 <parse_cmd+0xf4>
		for(p = cmd_list; p->cmd; p++)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	3310      	adds	r3, #16
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e4      	bne.n	8001c2e <parse_cmd+0xbe>
			}
		}
	}

	// command not found
	if(argv)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <parse_cmd+0x100>
		free(argv);
 8001c6a:	69f8      	ldr	r0, [r7, #28]
 8001c6c:	f006 fa02 	bl	8008074 <free>

	free(s);
 8001c70:	68b8      	ldr	r0, [r7, #8]
 8001c72:	f006 f9ff 	bl	8008074 <free>

	return retval;
 8001c76:	7dbb      	ldrb	r3, [r7, #22]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	0800a950 	.word	0x0800a950

08001c84 <sp_cb>:
	// (Period-1) = 1800
	{60000, 1800}
};

char sp_cb(uint8_t argc, char** argv)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b092      	sub	sp, #72	; 0x48
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
	uint32_t units;
	uint8_t i;
	uint8_t timeunits_arr_len;
	uint8_t retval = (char)(-EINVARG);
 8001c90:	23fa      	movs	r3, #250	; 0xfa
 8001c92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	char str[40];
	
	if(argc != 3) // number of arguments invalid?
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d001      	beq.n	8001ca0 <sp_cb+0x1c>
		return (char)(-EINVARG);
 8001c9c:	23fa      	movs	r3, #250	; 0xfa
 8001c9e:	e05f      	b.n	8001d60 <sp_cb+0xdc>
	
	units = my_atoi(argv[2]);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 f808 	bl	8002cbc <my_atoi>
 8001cac:	4603      	mov	r3, r0
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
	if((units == 0) || (!IS_ADDR16(units)))
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <sp_cb+0x3a>
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d301      	bcc.n	8001cc2 <sp_cb+0x3e>
		return (char)(-EINVARG);
 8001cbe:	23fa      	movs	r3, #250	; 0xfa
 8001cc0:	e04e      	b.n	8001d60 <sp_cb+0xdc>
	
	// get number of valid <timeunits>
	timeunits_arr_len = (sizeof(timeunits_arr) / sizeof(timeunits_arr[0]));
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	// Check if <timeunit> is valid
	for(i = 0; i < timeunits_arr_len; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001cce:	e03f      	b.n	8001d50 <sp_cb+0xcc>
	{
		if(strcmp(argv[1], timeunits_arr[i]) == 0)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cda:	4923      	ldr	r1, [pc, #140]	; (8001d68 <sp_cb+0xe4>)
 8001cdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f7fe faac 	bl	8000240 <strcmp>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d12b      	bne.n	8001d46 <sp_cb+0xc2>
		{
			SP_cb_done = 1; // Mark that Sampling Period has been defined
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <sp_cb+0xe8>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
			// Update Timer reload values
			TIMER_6_Update(timer_reloads[i][0], (timer_reloads[i][1] * (uint16_t)(units)));
 8001cf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <sp_cb+0xec>)
 8001cfa:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d04:	4a1a      	ldr	r2, [pc, #104]	; (8001d70 <sp_cb+0xec>)
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	885b      	ldrh	r3, [r3, #2]
 8001d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	4619      	mov	r1, r3
 8001d16:	f000 fdcb 	bl	80028b0 <TIMER_6_Update>
			snprintf(str, sizeof(str), "Sampling period defined as %ld %s\n\r", units, timeunits_arr[i]);
 8001d1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <sp_cb+0xe4>)
 8001d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d24:	f107 000c 	add.w	r0, r7, #12
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2c:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <sp_cb+0xf0>)
 8001d2e:	2128      	movs	r1, #40	; 0x28
 8001d30:	f006 fa72 	bl	8008218 <sniprintf>
			UART_puts(str);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 ff8f 	bl	8002c5c <UART_puts>
			// Exit success
			retval = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			break;
 8001d44:	e00a      	b.n	8001d5c <sp_cb+0xd8>
	for(i = 0; i < timeunits_arr_len; i++)
 8001d46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d50:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001d54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3b9      	bcc.n	8001cd0 <sp_cb+0x4c>
		}
	}
	
	// If <timeunit> was not found, retval equals (-EINVARG)
	return retval;
 8001d5c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3740      	adds	r7, #64	; 0x40
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	200000b5 	.word	0x200000b5
 8001d70:	0800b108 	.word	0x0800b108
 8001d74:	0800a964 	.word	0x0800a964

08001d78 <ac_cb>:

@brief	 	 Sets ADC channel to be used for sampling
******************************************************************************/

char ac_cb(uint8_t argc, char** argv)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b092      	sub	sp, #72	; 0x48
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
	uint8_t addr;
	char str[62];
	
	if(argc != 2) // number of arguments invalid?
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d001      	beq.n	8001d8e <ac_cb+0x16>
		return (char)(-EINVARG);
 8001d8a:	23fa      	movs	r3, #250	; 0xfa
 8001d8c:	e02a      	b.n	8001de4 <ac_cb+0x6c>
	
	addr = my_atoi(argv[1]);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	3304      	adds	r3, #4
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 ff91 	bl	8002cbc <my_atoi>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(!IS_ADDR4(addr))
 8001da0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d901      	bls.n	8001dac <ac_cb+0x34>
		return (char)(-EINVARG);
 8001da8:	23fa      	movs	r3, #250	; 0xfa
 8001daa:	e01b      	b.n	8001de4 <ac_cb+0x6c>

	if(ADC_Config_Channel(&hadc1, addr)) // Config selected channel
 8001dac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001db0:	4619      	mov	r1, r3
 8001db2:	480e      	ldr	r0, [pc, #56]	; (8001dec <ac_cb+0x74>)
 8001db4:	f7fe fcda 	bl	800076c <ADC_Config_Channel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d004      	beq.n	8001dc8 <ac_cb+0x50>
	{
		// Config function has returned an error code
		UART_puts("Pin not configured as input mode.\n\r");	// not able to read pin value
 8001dbe:	480c      	ldr	r0, [pc, #48]	; (8001df0 <ac_cb+0x78>)
 8001dc0:	f000 ff4c 	bl	8002c5c <UART_puts>
		return (char)(-EPERM);
 8001dc4:	23f9      	movs	r3, #249	; 0xf9
 8001dc6:	e00d      	b.n	8001de4 <ac_cb+0x6c>
	}
	
	snprintf(str, sizeof(str), "ADC Channel %d selected for sampling.\n\r", addr);
 8001dc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dcc:	f107 0008 	add.w	r0, r7, #8
 8001dd0:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <ac_cb+0x7c>)
 8001dd2:	213e      	movs	r1, #62	; 0x3e
 8001dd4:	f006 fa20 	bl	8008218 <sniprintf>
	UART_puts(str);
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 ff3d 	bl	8002c5c <UART_puts>
	
	return 0;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3748      	adds	r7, #72	; 0x48
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	2000027c 	.word	0x2000027c
 8001df0:	0800a988 	.word	0x0800a988
 8001df4:	0800a9ac 	.word	0x0800a9ac

08001df8 <fn_cb>:

@brief	 	 Enable digital filter
******************************************************************************/

char fn_cb(uint8_t argc, char** argv)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
	if(argc != 2) // number of arguments invalid?
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d001      	beq.n	8001e0e <fn_cb+0x16>
		return (char)(-EINVARG);
 8001e0a:	23fa      	movs	r3, #250	; 0xfa
 8001e0c:	e075      	b.n	8001efa <fn_cb+0x102>
	
	if(f.status == 1)
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <fn_cb+0x10c>)
 8001e10:	7f1b      	ldrb	r3, [r3, #28]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d104      	bne.n	8001e20 <fn_cb+0x28>
	{
		UART_puts("Filter already enabled.\n\r");
 8001e16:	483c      	ldr	r0, [pc, #240]	; (8001f08 <fn_cb+0x110>)
 8001e18:	f000 ff20 	bl	8002c5c <UART_puts>
		return 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e06c      	b.n	8001efa <fn_cb+0x102>
	}

	// select filter
	if(strcmp(argv[1], "LP") == 0)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	3304      	adds	r3, #4
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4939      	ldr	r1, [pc, #228]	; (8001f0c <fn_cb+0x114>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fa09 	bl	8000240 <strcmp>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d112      	bne.n	8001e5a <fn_cb+0x62>
	{
		// set Low Pass filter
		f.M = FIR_LP_M_;
 8001e34:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <fn_cb+0x10c>)
 8001e36:	225a      	movs	r2, #90	; 0x5a
 8001e38:	601a      	str	r2, [r3, #0]
		f.N = 0;
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <fn_cb+0x10c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
		f.dc = 0;
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <fn_cb+0x10c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
		f.x_coefs = FIR_LP_x_coefs;
 8001e46:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <fn_cb+0x10c>)
 8001e48:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <fn_cb+0x118>)
 8001e4a:	615a      	str	r2, [r3, #20]
		f.y_coefs = FIR_y_coefs;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <fn_cb+0x10c>)
 8001e4e:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <fn_cb+0x11c>)
 8001e50:	611a      	str	r2, [r3, #16]
		UART_puts("Selected Low-Pass Filter.\n\r");
 8001e52:	4831      	ldr	r0, [pc, #196]	; (8001f18 <fn_cb+0x120>)
 8001e54:	f000 ff02 	bl	8002c5c <UART_puts>
 8001e58:	e040      	b.n	8001edc <fn_cb+0xe4>
	}
	else if(strcmp(argv[1], "HP") == 0)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	492e      	ldr	r1, [pc, #184]	; (8001f1c <fn_cb+0x124>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe f9ec 	bl	8000240 <strcmp>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d113      	bne.n	8001e96 <fn_cb+0x9e>
	{
		// set High Pass filter
		f.M = FIR_HP_M_;
 8001e6e:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <fn_cb+0x10c>)
 8001e70:	225a      	movs	r2, #90	; 0x5a
 8001e72:	601a      	str	r2, [r3, #0]
		f.N = 0;
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <fn_cb+0x10c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
		f.dc = 4095/2;
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <fn_cb+0x10c>)
 8001e7c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e80:	619a      	str	r2, [r3, #24]
		f.x_coefs = FIR_HP_x_coefs;
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <fn_cb+0x10c>)
 8001e84:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <fn_cb+0x128>)
 8001e86:	615a      	str	r2, [r3, #20]
		f.y_coefs = FIR_y_coefs;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <fn_cb+0x10c>)
 8001e8a:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <fn_cb+0x11c>)
 8001e8c:	611a      	str	r2, [r3, #16]
		UART_puts("Selected High-Pass Filter.\n\r");
 8001e8e:	4825      	ldr	r0, [pc, #148]	; (8001f24 <fn_cb+0x12c>)
 8001e90:	f000 fee4 	bl	8002c5c <UART_puts>
 8001e94:	e022      	b.n	8001edc <fn_cb+0xe4>
	}
	else if(strcmp(argv[1], "BP") == 0)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4922      	ldr	r1, [pc, #136]	; (8001f28 <fn_cb+0x130>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe f9ce 	bl	8000240 <strcmp>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d113      	bne.n	8001ed2 <fn_cb+0xda>
	{
		// set Band Pass filter
		f.M = FIR_BP_M_;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <fn_cb+0x10c>)
 8001eac:	222e      	movs	r2, #46	; 0x2e
 8001eae:	601a      	str	r2, [r3, #0]
		f.N = 0;
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <fn_cb+0x10c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
		f.dc = 4095/2;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <fn_cb+0x10c>)
 8001eb8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001ebc:	619a      	str	r2, [r3, #24]
		f.x_coefs = FIR_BP_x_coefs;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <fn_cb+0x10c>)
 8001ec0:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <fn_cb+0x134>)
 8001ec2:	615a      	str	r2, [r3, #20]
		f.y_coefs = FIR_y_coefs;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <fn_cb+0x10c>)
 8001ec6:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <fn_cb+0x11c>)
 8001ec8:	611a      	str	r2, [r3, #16]
		UART_puts("Selected Band-Pass Filter.\n\r");
 8001eca:	4819      	ldr	r0, [pc, #100]	; (8001f30 <fn_cb+0x138>)
 8001ecc:	f000 fec6 	bl	8002c5c <UART_puts>
 8001ed0:	e004      	b.n	8001edc <fn_cb+0xe4>
	}
	else
	{
		UART_puts("Filter not recognized.\n\r");
 8001ed2:	4818      	ldr	r0, [pc, #96]	; (8001f34 <fn_cb+0x13c>)
 8001ed4:	f000 fec2 	bl	8002c5c <UART_puts>
		return 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e00e      	b.n	8001efa <fn_cb+0x102>
	}

	// init filter
	if(filter_init(&f) == (char)(-1)) // Filter has already been initialized?
 8001edc:	4809      	ldr	r0, [pc, #36]	; (8001f04 <fn_cb+0x10c>)
 8001ede:	f7fe ff8f 	bl	8000e00 <filter_init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2bff      	cmp	r3, #255	; 0xff
 8001ee6:	d104      	bne.n	8001ef2 <fn_cb+0xfa>
	{
		UART_puts("Error initializing filter.\n\r");
 8001ee8:	4813      	ldr	r0, [pc, #76]	; (8001f38 <fn_cb+0x140>)
 8001eea:	f000 feb7 	bl	8002c5c <UART_puts>
		return 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e003      	b.n	8001efa <fn_cb+0x102>
	}
	
	// Filter enabled
	UART_puts("Filter ON.\n\r");
 8001ef2:	4812      	ldr	r0, [pc, #72]	; (8001f3c <fn_cb+0x144>)
 8001ef4:	f000 feb2 	bl	8002c5c <UART_puts>
	return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200000b8 	.word	0x200000b8
 8001f08:	0800a9d4 	.word	0x0800a9d4
 8001f0c:	0800a9f0 	.word	0x0800a9f0
 8001f10:	0800ad74 	.word	0x0800ad74
 8001f14:	0800ad70 	.word	0x0800ad70
 8001f18:	0800a9f4 	.word	0x0800a9f4
 8001f1c:	0800aa10 	.word	0x0800aa10
 8001f20:	0800aee0 	.word	0x0800aee0
 8001f24:	0800aa14 	.word	0x0800aa14
 8001f28:	0800aa34 	.word	0x0800aa34
 8001f2c:	0800b04c 	.word	0x0800b04c
 8001f30:	0800aa38 	.word	0x0800aa38
 8001f34:	0800aa58 	.word	0x0800aa58
 8001f38:	0800aa74 	.word	0x0800aa74
 8001f3c:	0800aa94 	.word	0x0800aa94

08001f40 <ff_cb>:

@brief	 	 Disable digital filter
******************************************************************************/

char ff_cb(uint8_t argc, char** argv)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
	if(argc != 1) // number of arguments invalid?
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <ff_cb+0x16>
		return (char)(-EINVARG);
 8001f52:	23fa      	movs	r3, #250	; 0xfa
 8001f54:	e00e      	b.n	8001f74 <ff_cb+0x34>
		
	if(filter_kill(&f) == (char)(-1)) // Filter has already been disabled?
 8001f56:	4809      	ldr	r0, [pc, #36]	; (8001f7c <ff_cb+0x3c>)
 8001f58:	f7fe ff9b 	bl	8000e92 <filter_kill>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2bff      	cmp	r3, #255	; 0xff
 8001f60:	d104      	bne.n	8001f6c <ff_cb+0x2c>
	{
		UART_puts("Filter already disabled.\n\r");
 8001f62:	4807      	ldr	r0, [pc, #28]	; (8001f80 <ff_cb+0x40>)
 8001f64:	f000 fe7a 	bl	8002c5c <UART_puts>
		return 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e003      	b.n	8001f74 <ff_cb+0x34>
	}
	
	// Filter disabled
	UART_puts("Filter OFF.\n\r");
 8001f6c:	4805      	ldr	r0, [pc, #20]	; (8001f84 <ff_cb+0x44>)
 8001f6e:	f000 fe75 	bl	8002c5c <UART_puts>
	return 0;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	200000b8 	.word	0x200000b8
 8001f80:	0800aaa4 	.word	0x0800aaa4
 8001f84:	0800aac0 	.word	0x0800aac0

08001f88 <start_sampling>:
@brief	 	 Begin sampling. Number of samples to be taken is optional. It can 
					 be defined by <dig>
******************************************************************************/

static void start_sampling(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	// Reset sample number
	ADC_smp_num = 1;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <start_sampling+0x1c>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	801a      	strh	r2, [r3, #0]
	// Enable ADC conversions
	HAL_ADC_Start_IT(&hadc1);
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <start_sampling+0x20>)
 8001f94:	f000 ff92 	bl	8002ebc <HAL_ADC_Start_IT>
	// Start generating ADC conversions
	HAL_TIM_Base_Start_IT(&htim6);
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <start_sampling+0x24>)
 8001f9a:	f003 ffe7 	bl	8005f6c <HAL_TIM_Base_Start_IT>
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	2000027c 	.word	0x2000027c
 8001fac:	200003c8 	.word	0x200003c8

08001fb0 <stop_sampling>:

static void stop_sampling(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	// Disable ADC conversions
	HAL_ADC_Stop_IT(&hadc1);
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <stop_sampling+0x14>)
 8001fb6:	f001 f859 	bl	800306c <HAL_ADC_Stop_IT>
	// Stop generating ADC conversions
	HAL_TIM_Base_Stop_IT(&htim6);
 8001fba:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <stop_sampling+0x18>)
 8001fbc:	f004 f84e 	bl	800605c <HAL_TIM_Base_Stop_IT>
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	2000027c 	.word	0x2000027c
 8001fc8:	200003c8 	.word	0x200003c8

08001fcc <s_cb>:

char s_cb(uint8_t argc, char** argv)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
	char str[32];
	
	if(argc > 2) // number of arguments invalid?
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <s_cb+0x16>
		return (char)(-EINVARG);
 8001fde:	23fa      	movs	r3, #250	; 0xfa
 8001fe0:	e053      	b.n	800208a <s_cb+0xbe>
	
	if(Sampling_flag == 1) // sampling in progress?
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <s_cb+0xc8>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d104      	bne.n	8001ff4 <s_cb+0x28>
	{
		UART_puts("Sampling already in progress.\n\r");
 8001fea:	482b      	ldr	r0, [pc, #172]	; (8002098 <s_cb+0xcc>)
 8001fec:	f000 fe36 	bl	8002c5c <UART_puts>
		return 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e04a      	b.n	800208a <s_cb+0xbe>
	}
	
	if(SP_cb_done == 0) // sampling period defined?
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <s_cb+0xd0>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d104      	bne.n	8002006 <s_cb+0x3a>
	{
		UART_puts("Sampling period not defined.\n\r");
 8001ffc:	4828      	ldr	r0, [pc, #160]	; (80020a0 <s_cb+0xd4>)
 8001ffe:	f000 fe2d 	bl	8002c5c <UART_puts>
		return (char) (-EPERM);
 8002002:	23f9      	movs	r3, #249	; 0xf9
 8002004:	e041      	b.n	800208a <s_cb+0xbe>
	}
	
	if(argc == 1)
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d109      	bne.n	8002020 <s_cb+0x54>
	{
		// Begin infinite sampling
		UART_puts("Starting sampling...\n\r");
 800200c:	4825      	ldr	r0, [pc, #148]	; (80020a4 <s_cb+0xd8>)
 800200e:	f000 fe25 	bl	8002c5c <UART_puts>

		// Start taking samples
		start_sampling();
 8002012:	f7ff ffb9 	bl	8001f88 <start_sampling>
		// Mark that sampling is in progress
		Sampling_flag = 1;
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <s_cb+0xc8>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
		return 0;
 800201c:	2300      	movs	r3, #0
 800201e:	e034      	b.n	800208a <s_cb+0xbe>
	}
	
	// Else, argument 1 defines number of samples to be taken
	smps_left = my_atoi(argv[1]);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	3304      	adds	r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fe48 	bl	8002cbc <my_atoi>
 800202c:	4603      	mov	r3, r0
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <s_cb+0xdc>)
 8002032:	701a      	strb	r2, [r3, #0]
	if(!IS_DIG(smps_left))
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <s_cb+0xdc>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d004      	beq.n	8002048 <s_cb+0x7c>
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <s_cb+0xdc>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b09      	cmp	r3, #9
 8002046:	d901      	bls.n	800204c <s_cb+0x80>
		return (char)(-EINVARG);
 8002048:	23fa      	movs	r3, #250	; 0xfa
 800204a:	e01e      	b.n	800208a <s_cb+0xbe>
	
	// Begin sampling K values
	sprintf(str, "Sampling %d values...\n\r", smps_left);
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <s_cb+0xdc>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	f107 0308 	add.w	r3, r7, #8
 8002058:	4914      	ldr	r1, [pc, #80]	; (80020ac <s_cb+0xe0>)
 800205a:	4618      	mov	r0, r3
 800205c:	f006 f910 	bl	8008280 <siprintf>
	UART_puts(str);
 8002060:	f107 0308 	add.w	r3, r7, #8
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fdf9 	bl	8002c5c <UART_puts>
	
	start_sampling(); // Start taking samples
 800206a:	f7ff ff8d 	bl	8001f88 <start_sampling>
	while (smps_left) // Taking samples
 800206e:	bf00      	nop
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <s_cb+0xdc>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1fa      	bne.n	8002070 <s_cb+0xa4>
		;
	stop_sampling(); 	// Stop taking samples
 800207a:	f7ff ff99 	bl	8001fb0 <stop_sampling>
	
	UART_puts("Sampled values:\n\r");
 800207e:	480c      	ldr	r0, [pc, #48]	; (80020b0 <s_cb+0xe4>)
 8002080:	f000 fdec 	bl	8002c5c <UART_puts>
	print_adcValues();
 8002084:	f7fe fcb6 	bl	80009f4 <print_adcValues>
	
	return 0;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200000b4 	.word	0x200000b4
 8002098:	0800aad0 	.word	0x0800aad0
 800209c:	200000b5 	.word	0x200000b5
 80020a0:	0800aaf0 	.word	0x0800aaf0
 80020a4:	0800ab10 	.word	0x0800ab10
 80020a8:	20000278 	.word	0x20000278
 80020ac:	0800ab28 	.word	0x0800ab28
 80020b0:	0800ab40 	.word	0x0800ab40

080020b4 <st_cb>:

@brief	 	 Stops sampling
******************************************************************************/

char st_cb(uint8_t argc, char** argv)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
	if(argc != 1) // number of arguments invalid?
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d001      	beq.n	80020ca <st_cb+0x16>
		return (char)(-EINVARG);
 80020c6:	23fa      	movs	r3, #250	; 0xfa
 80020c8:	e011      	b.n	80020ee <st_cb+0x3a>
	
	if(Sampling_flag == 0)// There was no sampling in progress to be terminated
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <st_cb+0x44>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d104      	bne.n	80020dc <st_cb+0x28>
	{
		UART_puts("No sampling in progress.\n\r");
 80020d2:	480a      	ldr	r0, [pc, #40]	; (80020fc <st_cb+0x48>)
 80020d4:	f000 fdc2 	bl	8002c5c <UART_puts>
		return 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	e008      	b.n	80020ee <st_cb+0x3a>
	}	
	// Stop taking samples
	stop_sampling();
 80020dc:	f7ff ff68 	bl	8001fb0 <stop_sampling>
	Sampling_flag = 0;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <st_cb+0x44>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
	
	UART_puts("Sampling stopped.\n\r");
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <st_cb+0x4c>)
 80020e8:	f000 fdb8 	bl	8002c5c <UART_puts>
//	UART_puts("Sampled values:\n\r");
	return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200000b4 	.word	0x200000b4
 80020fc:	0800ab54 	.word	0x0800ab54
 8002100:	0800ab70 	.word	0x0800ab70

08002104 <wg_cb>:
	{"stw", wavegen_stw},
	{0,0}
};

char wg_cb(uint8_t argc, char** argv)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b092      	sub	sp, #72	; 0x48
 8002108:	af02      	add	r7, sp, #8
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
	uint32_t freq;
	uint8_t retval = (char)(-EINVARG);
 8002110:	23fa      	movs	r3, #250	; 0xfa
 8002112:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	const Signal_t *signal_ptr = signal_list;
 8002116:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <wg_cb+0xe0>)
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
	char str[40];
	
	if(argc > 3) // number of arguments invalid?
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d901      	bls.n	8002124 <wg_cb+0x20>
		return (char)(-EINVARG);
 8002120:	23fa      	movs	r3, #250	; 0xfa
 8002122:	e05b      	b.n	80021dc <wg_cb+0xd8>
	
	if(argc == 2)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d114      	bne.n	8002154 <wg_cb+0x50>
	{
		// With 2 arguments, the only valid command is "WG OFF"
		if(strcmp(argv[1], "OFF") == 0)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	3304      	adds	r3, #4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	492d      	ldr	r1, [pc, #180]	; (80021e8 <wg_cb+0xe4>)
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f884 	bl	8000240 <strcmp>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <wg_cb+0x4a>
		{
			// Stop signal output
			wavegen_stop();
 800213e:	f000 f87b 	bl	8002238 <wavegen_stop>
			UART_puts("Wave Generator OFF.\n\r");
 8002142:	482a      	ldr	r0, [pc, #168]	; (80021ec <wg_cb+0xe8>)
 8002144:	f000 fd8a 	bl	8002c5c <UART_puts>
			retval = 0; // Exit success
 8002148:	2300      	movs	r3, #0
 800214a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		// Else, invalid argument
		return retval;
 800214e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002152:	e043      	b.n	80021dc <wg_cb+0xd8>
	}
	
	freq = my_atoi(argv[2]);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	3308      	adds	r3, #8
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fdae 	bl	8002cbc <my_atoi>
 8002160:	4603      	mov	r3, r0
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
	if((freq == 0) || (freq > 100))
 8002164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <wg_cb+0x6c>
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d92f      	bls.n	80021d0 <wg_cb+0xcc>
		return (char)(-EINVARG);
 8002170:	23fa      	movs	r3, #250	; 0xfa
 8002172:	e033      	b.n	80021dc <wg_cb+0xd8>
	
	// check if given <signal> is valid
	while(signal_ptr->name)
	{
		if(strcmp(argv[1], signal_ptr->name) == 0)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	3304      	adds	r3, #4
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4619      	mov	r1, r3
 8002180:	4610      	mov	r0, r2
 8002182:	f7fe f85d 	bl	8000240 <strcmp>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11e      	bne.n	80021ca <wg_cb+0xc6>
		{
			wavegen_init(); // Init WaveGen peripherals
 800218c:	f000 f832 	bl	80021f4 <wavegen_init>
			signal_ptr->fn();// Generate signal
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4798      	blx	r3
			wavegen_freq_update(freq); // Update signal frequency
 8002196:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002198:	f000 f85a 	bl	8002250 <wavegen_freq_update>
			wavegen_start(); // Start signal output
 800219c:	f000 f838 	bl	8002210 <wavegen_start>
			snprintf(str, sizeof(str), "Generating %s wave at %ld Hz.\n\r", argv[1], freq);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	3304      	adds	r3, #4
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f107 000c 	add.w	r0, r7, #12
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <wg_cb+0xec>)
 80021b2:	2128      	movs	r1, #40	; 0x28
 80021b4:	f006 f830 	bl	8008218 <sniprintf>
			UART_puts(str);
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fd4d 	bl	8002c5c <UART_puts>
			retval = 0;	// Exit success
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 80021c8:	e006      	b.n	80021d8 <wg_cb+0xd4>
		}
		signal_ptr++;
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	3308      	adds	r3, #8
 80021ce:	63bb      	str	r3, [r7, #56]	; 0x38
	while(signal_ptr->name)
 80021d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1cd      	bne.n	8002174 <wg_cb+0x70>
	}

	// If <signal> was not found, retval equals (-EINVARG)
	return retval;
 80021d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3740      	adds	r7, #64	; 0x40
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	0800b114 	.word	0x0800b114
 80021e8:	0800ab94 	.word	0x0800ab94
 80021ec:	0800ab98 	.word	0x0800ab98
 80021f0:	0800abb0 	.word	0x0800abb0

080021f4 <wavegen_init>:
/**
  * @brief  Inits Timer and DAC Peripherals
  * @param	none
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_init(void){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0

	MX_DAC_Init();
 80021f8:	f7fe fd38 	bl	8000c6c <MX_DAC_Init>
	MX_TIM2_Init();
 80021fc:	f000 fa4c 	bl	8002698 <MX_TIM2_Init>
	HAL_TIM_Base_Start(&htim2);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <wavegen_init+0x18>)
 8002202:	f003 fe43 	bl	8005e8c <HAL_TIM_Base_Start>

	return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000414 	.word	0x20000414

08002210 <wavegen_start>:
  * @brief  Starts DAC CHANNEL 2 with DMA
  * The DAC update is triggered by Timer 2 overflow
  * @param	none
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_start(void){
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af02      	add	r7, sp, #8

	return HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal_buff, 100, DAC_ALIGN_12B_R);
 8002216:	2300      	movs	r3, #0
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2364      	movs	r3, #100	; 0x64
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <wavegen_start+0x20>)
 800221e:	2110      	movs	r1, #16
 8002220:	4804      	ldr	r0, [pc, #16]	; (8002234 <wavegen_start+0x24>)
 8002222:	f001 fc8f 	bl	8003b44 <HAL_DAC_Start_DMA>
 8002226:	4603      	mov	r3, r0

}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200000d8 	.word	0x200000d8
 8002234:	20000354 	.word	0x20000354

08002238 <wavegen_stop>:
  * @brief  Stops DAC CHANNEL 2
  * Timer 2 is still running...
  * @param	none
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_stop(void){
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0

	return HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 800223c:	2110      	movs	r1, #16
 800223e:	4803      	ldr	r0, [pc, #12]	; (800224c <wavegen_stop+0x14>)
 8002240:	f001 fd4c 	bl	8003cdc <HAL_DAC_Stop_DMA>
 8002244:	4603      	mov	r3, r0

}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000354 	.word	0x20000354

08002250 <wavegen_freq_update>:
  * Timer 2 period, used to update one sample of the DAC output
  * Don't forget that we have n = 100 samples
  * @param	frequency in MHz (suggested values are between 1 and 100 MHz)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_freq_update(uint32_t freq){
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

	TIMER_2_Update(1080000/freq);
 8002258:	4a05      	ldr	r2, [pc, #20]	; (8002270 <wavegen_freq_update+0x20>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fad5 	bl	8002810 <TIMER_2_Update>

	return HAL_OK;
 8002266:	2300      	movs	r3, #0

}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	00107ac0 	.word	0x00107ac0
 8002274:	00000000 	.word	0x00000000

08002278 <wavegen_sin>:
  * @brief  Calculates and generates the sample values for a sin wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_sin(void){
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0

	for (int i = 0; i < 100; i++)
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	e026      	b.n	80022d2 <wavegen_sin+0x5a>
		signal_buff[i] = ((sin(i*2*PI/100) + 1) * ((0xFFF)/2));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002290:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80022e8 <wavegen_sin+0x70>
 8002294:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002298:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80022f0 <wavegen_sin+0x78>
 800229c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022a0:	eeb0 0b46 	vmov.f64	d0, d6
 80022a4:	f007 f9b0 	bl	8009608 <sin>
 80022a8:	eeb0 7b40 	vmov.f64	d7, d0
 80022ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80022b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022b4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80022f8 <wavegen_sin+0x80>
 80022b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022c0:	ee17 1a90 	vmov	r1, s15
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <wavegen_sin+0x88>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 100; i++)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3301      	adds	r3, #1
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b63      	cmp	r3, #99	; 0x63
 80022d6:	ddd5      	ble.n	8002284 <wavegen_sin+0xc>
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	f3af 8000 	nop.w
 80022e8:	4d12d84a 	.word	0x4d12d84a
 80022ec:	400921fb 	.word	0x400921fb
 80022f0:	00000000 	.word	0x00000000
 80022f4:	40590000 	.word	0x40590000
 80022f8:	00000000 	.word	0x00000000
 80022fc:	409ffc00 	.word	0x409ffc00
 8002300:	200000d8 	.word	0x200000d8

08002304 <wavegen_tri>:
  * @brief  Calculates and generates the sample values for a triangle wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_tri(void){
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0

	for (int i = 0; i < 50; i++)
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	e00d      	b.n	800232c <wavegen_tri+0x28>
		signal_buff[i] = i * ((0xFFF)/50);
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	00da      	lsls	r2, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	4619      	mov	r1, r3
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <wavegen_tri+0x68>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 50; i++)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3301      	adds	r3, #1
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b31      	cmp	r3, #49	; 0x31
 8002330:	ddee      	ble.n	8002310 <wavegen_tri+0xc>

	for (int i = 50; i > 0; i--)
 8002332:	2332      	movs	r3, #50	; 0x32
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	e00f      	b.n	8002358 <wavegen_tri+0x54>
		signal_buff[100 - i] = i * ((0xFFF)/50);
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	00da      	lsls	r2, r3, #3
 8002342:	441a      	add	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800234a:	4611      	mov	r1, r2
 800234c:	4a07      	ldr	r2, [pc, #28]	; (800236c <wavegen_tri+0x68>)
 800234e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 50; i > 0; i--)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	3b01      	subs	r3, #1
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	dcec      	bgt.n	8002338 <wavegen_tri+0x34>
}
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	200000d8 	.word	0x200000d8

08002370 <wavegen_sqr>:
  * @brief  Calculates and generates the sample values for a square wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_sqr(void){
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0

	for (int i = 0; i < 50; i++){
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	e00e      	b.n	800239a <wavegen_sqr+0x2a>
		signal_buff[i] = (0xFFF);
 800237c:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <wavegen_sqr+0x40>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002384:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		signal_buff[i + 50] = 0;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <wavegen_sqr+0x40>)
 800238e:	2100      	movs	r1, #0
 8002390:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 50; i++){
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3301      	adds	r3, #1
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b31      	cmp	r3, #49	; 0x31
 800239e:	dded      	ble.n	800237c <wavegen_sqr+0xc>
	}
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	200000d8 	.word	0x200000d8

080023b4 <wavegen_stw>:
  * @brief  Calculates and generates the sample values for a saw tooth wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_stw(void){
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0

	for (int i = 0; i < 100; i++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	e00c      	b.n	80023da <wavegen_stw+0x26>
		signal_buff[i] = i * ((0xFFF)/100);
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4619      	mov	r1, r3
 80023cc:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <wavegen_stw+0x3c>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 100; i++)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3301      	adds	r3, #1
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b63      	cmp	r3, #99	; 0x63
 80023de:	ddef      	ble.n	80023c0 <wavegen_stw+0xc>
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	200000d8 	.word	0x200000d8

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_MspInit+0x44>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <HAL_MspInit+0x44>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_MspInit+0x44>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_MspInit+0x44>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <HAL_MspInit+0x44>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_MspInit+0x44>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800

0800243c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <NMI_Handler+0x4>

08002442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <MemManage_Handler+0x4>

0800244e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler+0x4>

0800245a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002488:	f000 fcb4 	bl	8002df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA1_Stream6_IRQHandler+0x10>)
 8002496:	f001 ff33 	bl	8004300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000368 	.word	0x20000368

080024a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <ADC_IRQHandler+0x10>)
 80024aa:	f000 fe1d 	bl	80030e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000027c 	.word	0x2000027c

080024b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <TIM2_IRQHandler+0x10>)
 80024be:	f003 fdfc 	bl	80060ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000414 	.word	0x20000414

080024cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <USART3_IRQHandler+0x10>)
 80024d2:	f004 fafd 	bl	8006ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000460 	.word	0x20000460

080024e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_kill>:

int _kill(int pid, int sig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024fa:	f005 fd89 	bl	8008010 <__errno>
 80024fe:	4603      	mov	r3, r0
 8002500:	2216      	movs	r2, #22
 8002502:	601a      	str	r2, [r3, #0]
	return -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_exit>:

void _exit (int status)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffe7 	bl	80024f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002522:	e7fe      	b.n	8002522 <_exit+0x12>

08002524 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e00a      	b.n	800254c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002536:	f3af 8000 	nop.w
 800253a:	4601      	mov	r1, r0
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	b2ca      	uxtb	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	dbf0      	blt.n	8002536 <_read+0x12>
	}

return len;
 8002554:	687b      	ldr	r3, [r7, #4]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e009      	b.n	8002584 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60ba      	str	r2, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	dbf1      	blt.n	8002570 <_write+0x12>
	}
	return len;
 800258c:	687b      	ldr	r3, [r7, #4]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <_close>:

int _close(int file)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
	return -1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025be:	605a      	str	r2, [r3, #4]
	return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <_isatty>:

int _isatty(int file)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
	return 1;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
	return 0;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f005 fcee 	bl	8008010 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20080000 	.word	0x20080000
 8002660:	00000400 	.word	0x00000400
 8002664:	20000268 	.word	0x20000268
 8002668:	20000610 	.word	0x20000610

0800266c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <SystemInit+0x28>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	4a07      	ldr	r2, [pc, #28]	; (8002694 <SystemInit+0x28>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <SystemInit+0x28>)
 8002682:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002686:	609a      	str	r2, [r3, #8]
#endif
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269e:	f107 0310 	add.w	r3, r7, #16
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <MX_TIM2_Init+0x98>)
 80026b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80026be:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <MX_TIM2_Init+0x98>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <MX_TIM2_Init+0x98>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000-1;
 80026ca:	4b19      	ldr	r3, [pc, #100]	; (8002730 <MX_TIM2_Init+0x98>)
 80026cc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80026d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <MX_TIM2_Init+0x98>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_TIM2_Init+0x98>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026de:	4814      	ldr	r0, [pc, #80]	; (8002730 <MX_TIM2_Init+0x98>)
 80026e0:	f003 fb7c 	bl	8005ddc <HAL_TIM_Base_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026ea:	f7ff fa3b 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	4619      	mov	r1, r3
 80026fa:	480d      	ldr	r0, [pc, #52]	; (8002730 <MX_TIM2_Init+0x98>)
 80026fc:	f003 fdfc 	bl	80062f8 <HAL_TIM_ConfigClockSource>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002706:	f7ff fa2d 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800270a:	2320      	movs	r3, #32
 800270c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	4619      	mov	r1, r3
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <MX_TIM2_Init+0x98>)
 8002718:	f004 f824 	bl	8006764 <HAL_TIMEx_MasterConfigSynchronization>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002722:	f7ff fa1f 	bl	8001b64 <Error_Handler>
  }

}
 8002726:	bf00      	nop
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000414 	.word	0x20000414

08002734 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8002744:	4b14      	ldr	r3, [pc, #80]	; (8002798 <MX_TIM6_Init+0x64>)
 8002746:	4a15      	ldr	r2, [pc, #84]	; (800279c <MX_TIM6_Init+0x68>)
 8002748:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <MX_TIM6_Init+0x64>)
 800274c:	2200      	movs	r2, #0
 800274e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <MX_TIM6_Init+0x64>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_TIM6_Init+0x64>)
 8002758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_TIM6_Init+0x64>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <MX_TIM6_Init+0x64>)
 8002766:	f003 fb39 	bl	8005ddc <HAL_TIM_Base_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002770:	f7ff f9f8 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002774:	2320      	movs	r3, #32
 8002776:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	4619      	mov	r1, r3
 8002780:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_TIM6_Init+0x64>)
 8002782:	f003 ffef 	bl	8006764 <HAL_TIMEx_MasterConfigSynchronization>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800278c:	f7ff f9ea 	bl	8001b64 <Error_Handler>
  }

}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	200003c8 	.word	0x200003c8
 800279c:	40001000 	.word	0x40001000

080027a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b0:	d114      	bne.n	80027dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_TIM_Base_MspInit+0x68>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a14      	ldr	r2, [pc, #80]	; (8002808 <HAL_TIM_Base_MspInit+0x68>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_TIM_Base_MspInit+0x68>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	201c      	movs	r0, #28
 80027d0:	f001 f8f1 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027d4:	201c      	movs	r0, #28
 80027d6:	f001 f90a 	bl	80039ee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80027da:	e010      	b.n	80027fe <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0a      	ldr	r2, [pc, #40]	; (800280c <HAL_TIM_Base_MspInit+0x6c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10b      	bne.n	80027fe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_TIM_Base_MspInit+0x68>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	4a07      	ldr	r2, [pc, #28]	; (8002808 <HAL_TIM_Base_MspInit+0x68>)
 80027ec:	f043 0310 	orr.w	r3, r3, #16
 80027f0:	6413      	str	r3, [r2, #64]	; 0x40
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_TIM_Base_MspInit+0x68>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40001000 	.word	0x40001000

08002810 <TIMER_2_Update>:
//    	// toggle LED for heart beat
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
//    }
//}

void TIMER_2_Update(uint32_t reload){
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002818:	f107 0318 	add.w	r3, r7, #24
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002826:	f107 030c 	add.w	r3, r7, #12
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	609a      	str	r2, [r3, #8]

	  htim2.Instance = TIM2;
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <TIMER_2_Update+0x9c>)
 8002834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002838:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 1 - 1;
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <TIMER_2_Update+0x9c>)
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <TIMER_2_Update+0x9c>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = reload;
 8002846:	4a19      	ldr	r2, [pc, #100]	; (80028ac <TIMER_2_Update+0x9c>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60d3      	str	r3, [r2, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284c:	4b17      	ldr	r3, [pc, #92]	; (80028ac <TIMER_2_Update+0x9c>)
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <TIMER_2_Update+0x9c>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002858:	4814      	ldr	r0, [pc, #80]	; (80028ac <TIMER_2_Update+0x9c>)
 800285a:	f003 fabf 	bl	8005ddc <HAL_TIM_Base_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <TIMER_2_Update+0x58>
	  {
	    Error_Handler();
 8002864:	f7ff f97e 	bl	8001b64 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286c:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800286e:	f107 0318 	add.w	r3, r7, #24
 8002872:	4619      	mov	r1, r3
 8002874:	480d      	ldr	r0, [pc, #52]	; (80028ac <TIMER_2_Update+0x9c>)
 8002876:	f003 fd3f 	bl	80062f8 <HAL_TIM_ConfigClockSource>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <TIMER_2_Update+0x74>
	  {
	    Error_Handler();
 8002880:	f7ff f970 	bl	8001b64 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002884:	2320      	movs	r3, #32
 8002886:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	4619      	mov	r1, r3
 8002892:	4806      	ldr	r0, [pc, #24]	; (80028ac <TIMER_2_Update+0x9c>)
 8002894:	f003 ff66 	bl	8006764 <HAL_TIMEx_MasterConfigSynchronization>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <TIMER_2_Update+0x92>
	  {
	    Error_Handler();
 800289e:	f7ff f961 	bl	8001b64 <Error_Handler>
	  }
}
 80028a2:	bf00      	nop
 80028a4:	3728      	adds	r7, #40	; 0x28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000414 	.word	0x20000414

080028b0 <TIMER_6_Update>:

void TIMER_6_Update(uint32_t prescaler, uint32_t period)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  htim6.Init.Prescaler = prescaler - 1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3b01      	subs	r3, #1
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <TIMER_6_Update+0x34>)
 80028c0:	6053      	str	r3, [r2, #4]
  htim6.Init.Period = period - 1;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <TIMER_6_Update+0x34>)
 80028c8:	60d3      	str	r3, [r2, #12]
	
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028ca:	4806      	ldr	r0, [pc, #24]	; (80028e4 <TIMER_6_Update+0x34>)
 80028cc:	f003 fa86 	bl	8005ddc <HAL_TIM_Base_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <TIMER_6_Update+0x2a>
  {
    Error_Handler();
 80028d6:	f7ff f945 	bl	8001b64 <Error_Handler>
  }
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200003c8 	.word	0x200003c8

080028e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <MX_USART3_UART_Init+0x58>)
 80028ee:	4a15      	ldr	r2, [pc, #84]	; (8002944 <MX_USART3_UART_Init+0x5c>)
 80028f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <MX_USART3_UART_Init+0x58>)
 80028f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <MX_USART3_UART_Init+0x58>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <MX_USART3_UART_Init+0x58>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <MX_USART3_UART_Init+0x58>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <MX_USART3_UART_Init+0x58>)
 800290e:	220c      	movs	r2, #12
 8002910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <MX_USART3_UART_Init+0x58>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <MX_USART3_UART_Init+0x58>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <MX_USART3_UART_Init+0x58>)
 8002920:	2200      	movs	r2, #0
 8002922:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <MX_USART3_UART_Init+0x58>)
 8002926:	2200      	movs	r2, #0
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_USART3_UART_Init+0x58>)
 800292c:	f003 ffc6 	bl	80068bc <HAL_UART_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002936:	f7ff f915 	bl	8001b64 <Error_Handler>
  }

}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000460 	.word	0x20000460
 8002944:	40004800 	.word	0x40004800

08002948 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_UART_MspInit+0x8c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d130      	bne.n	80029cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_UART_MspInit+0x90>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <HAL_UART_MspInit+0x90>)
 8002970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002974:	6413      	str	r3, [r2, #64]	; 0x40
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_UART_MspInit+0x90>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_UART_MspInit+0x90>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_UART_MspInit+0x90>)
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_UART_MspInit+0x90>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800299a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029ac:	2307      	movs	r3, #7
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	4809      	ldr	r0, [pc, #36]	; (80029dc <HAL_UART_MspInit+0x94>)
 80029b8:	f001 ff0c 	bl	80047d4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	2027      	movs	r0, #39	; 0x27
 80029c2:	f000 fff8 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029c6:	2027      	movs	r0, #39	; 0x27
 80029c8:	f001 f811 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029cc:	bf00      	nop
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40004800 	.word	0x40004800
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020c00 	.word	0x40020c00

080029e0 <UART_Receive>:

/******************************************************************************
@brief	 	 Receives a char by UART serial port
******************************************************************************/
char UART_Receive(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
	if(Rx_index == (RX_BUFF_LEN - 1)) // Is the buffer full?
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <UART_Receive+0x40>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	d102      	bne.n	80029f4 <UART_Receive+0x14>
		// Treat as 'CR'
		c = ENTER_KEY;
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <UART_Receive+0x44>)
 80029f0:	220d      	movs	r2, #13
 80029f2:	701a      	strb	r2, [r3, #0]
	
	if(c != ENTER_KEY) // Is this the end of reception?
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <UART_Receive+0x44>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b0d      	cmp	r3, #13
 80029fc:	d001      	beq.n	8002a02 <UART_Receive+0x22>
		Rx_UART_init(); // prepare for next character
 80029fe:	f000 f8ef 	bl	8002be0 <Rx_UART_init>
	
	if(process_as_control() == 0) // Is the received char a control char?
 8002a02:	f000 f811 	bl	8002a28 <process_as_control>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <UART_Receive+0x30>
		return (char)(-1);
 8002a0c:	23ff      	movs	r3, #255	; 0xff
 8002a0e:	e004      	b.n	8002a1a <UART_Receive+0x3a>
	
	// Its not a special character
	process_as_data();
 8002a10:	f000 f87a 	bl	8002b08 <process_as_data>
	return c;
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <UART_Receive+0x44>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	2000026c 	.word	0x2000026c
 8002a24:	200005e4 	.word	0x200005e4

08002a28 <process_as_control>:
	
	{0,0}
};

static char process_as_control(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
	const Special_Key_t *s_key_ptr = s_key_list;
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <process_as_control+0x3c>)
 8002a30:	607b      	str	r3, [r7, #4]
	
	while(s_key_ptr->code)
 8002a32:	e00e      	b.n	8002a52 <process_as_control+0x2a>
	{
		if(c == (s_key_ptr->code))// Is this a control char?
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <process_as_control+0x40>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d104      	bne.n	8002a4c <process_as_control+0x24>
		{
			// Execute this control char callback
			s_key_ptr->fn();	
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4798      	blx	r3
			return 0; // processed as control
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e007      	b.n	8002a5c <process_as_control+0x34>
		}
		s_key_ptr++;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3308      	adds	r3, #8
 8002a50:	607b      	str	r3, [r7, #4]
	while(s_key_ptr->code)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ec      	bne.n	8002a34 <process_as_control+0xc>
	}

	// Its not a control char. Needs to be processed as data
	return (char)(-1);
 8002a5a:	23ff      	movs	r3, #255	; 0xff
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	0800b154 	.word	0x0800b154
 8002a68:	200005e4 	.word	0x200005e4

08002a6c <enter_key_cb>:

static void enter_key_cb(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	UART_puts("\n\r");
 8002a70:	4808      	ldr	r0, [pc, #32]	; (8002a94 <enter_key_cb+0x28>)
 8002a72:	f000 f8f3 	bl	8002c5c <UART_puts>
	Rx_Buffer[Rx_index] = 0;	// mark end of string
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <enter_key_cb+0x2c>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <enter_key_cb+0x30>)
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]
	Rx_index = 0;
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <enter_key_cb+0x2c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
	cmd_received = 1;					// informs main a command was received
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <enter_key_cb+0x34>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	0800abd0 	.word	0x0800abd0
 8002a98:	2000026c 	.word	0x2000026c
 8002a9c:	200005e8 	.word	0x200005e8
 8002aa0:	2000026e 	.word	0x2000026e

08002aa4 <bcksp_key_cb>:

static void bcksp_key_cb(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	if(Rx_index > 0) // Is there characters left to delete?
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <bcksp_key_cb+0x34>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <bcksp_key_cb+0x1e>
		Rx_index--;
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <bcksp_key_cb+0x34>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <bcksp_key_cb+0x34>)
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e002      	b.n	8002ac8 <bcksp_key_cb+0x24>
		// c is equal to BCKSP_KEY
	else
		// Nothing to delete
		c = 0; // Print nothing
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <bcksp_key_cb+0x38>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
	UART_putchar(c);
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <bcksp_key_cb+0x38>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f8aa 	bl	8002c28 <UART_putchar>
}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	2000026c 	.word	0x2000026c
 8002adc:	200005e4 	.word	0x200005e4

08002ae0 <esc_key_cb>:

static void esc_key_cb(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	clear_last_cmd();
 8002ae4:	f000 f82e 	bl	8002b44 <clear_last_cmd>
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}

08002aec <dollar_key_cb>:

static void dollar_key_cb(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	clear_last_cmd();
 8002af0:	f000 f828 	bl	8002b44 <clear_last_cmd>
	UART_puts(last_valid_cmd); // print last valid command
 8002af4:	4803      	ldr	r0, [pc, #12]	; (8002b04 <dollar_key_cb+0x18>)
 8002af6:	f000 f8b1 	bl	8002c5c <UART_puts>
	insert_cmd(last_valid_cmd); // fill Rx_Buffer with last valid command
 8002afa:	4802      	ldr	r0, [pc, #8]	; (8002b04 <dollar_key_cb+0x18>)
 8002afc:	f000 f846 	bl	8002b8c <insert_cmd>
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200000a4 	.word	0x200000a4

08002b08 <process_as_data>:

@brief	 	 process the char received as a data character
******************************************************************************/

static void process_as_data(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
	// add received char to Rx_Buffer
	Rx_Buffer[Rx_index] = c;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <process_as_data+0x30>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <process_as_data+0x34>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	b2d9      	uxtb	r1, r3
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <process_as_data+0x38>)
 8002b1c:	5499      	strb	r1, [r3, r2]
	Rx_index++;
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <process_as_data+0x30>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <process_as_data+0x30>)
 8002b2a:	701a      	strb	r2, [r3, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2000026c 	.word	0x2000026c
 8002b3c:	200005e4 	.word	0x200005e4
 8002b40:	200005e8 	.word	0x200005e8

08002b44 <clear_last_cmd>:

/******************************************************************************
@brief	 	 send backspaces via terminal to clear the command line
******************************************************************************/
static void clear_last_cmd(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	if(Rx_index == 0) // empty buffer
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <clear_last_cmd+0x40>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d015      	beq.n	8002b7e <clear_last_cmd+0x3a>
		return;
	
	// fill Rx_Buffer with 'BCKSP_KEY'
	memset(Rx_Buffer, BCKSP_KEY, Rx_index);
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <clear_last_cmd+0x40>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	217f      	movs	r1, #127	; 0x7f
 8002b5c:	480a      	ldr	r0, [pc, #40]	; (8002b88 <clear_last_cmd+0x44>)
 8002b5e:	f005 fa91 	bl	8008084 <memset>
	Rx_Buffer[Rx_index] = 0; 	// mark end of string
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <clear_last_cmd+0x40>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <clear_last_cmd+0x44>)
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]
	Rx_index = 0;
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <clear_last_cmd+0x40>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
	
	UART_puts(Rx_Buffer); // print it -> this will clear the command line 
 8002b76:	4804      	ldr	r0, [pc, #16]	; (8002b88 <clear_last_cmd+0x44>)
 8002b78:	f000 f870 	bl	8002c5c <UART_puts>
 8002b7c:	e000      	b.n	8002b80 <clear_last_cmd+0x3c>
		return;
 8002b7e:	bf00      	nop
}
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000026c 	.word	0x2000026c
 8002b88:	200005e8 	.word	0x200005e8

08002b8c <insert_cmd>:
@brief	 	 Assigns 'Rx_Buffer' with string 'str', making 'Rx_index' point to
							the end of 'Rx_Buffer'
@param  	 String to be inserted in 'Rx_Buffer'
******************************************************************************/
static void insert_cmd(const char* str)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	if((str == NULL) || (str[0] == 0))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d017      	beq.n	8002bca <insert_cmd+0x3e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d013      	beq.n	8002bca <insert_cmd+0x3e>
		return;
	
	int len = strlen(str);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd fb56 	bl	8000254 <strlen>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]
	if(len > RX_BUFF_LEN)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b10      	cmp	r3, #16
 8002bb0:	dc0d      	bgt.n	8002bce <insert_cmd+0x42>
		return;
	
	strcpy(Rx_Buffer, str);
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4808      	ldr	r0, [pc, #32]	; (8002bd8 <insert_cmd+0x4c>)
 8002bb6:	f005 fb83 	bl	80082c0 <strcpy>
	Rx_index = strlen(str);	// 'Rx_index' point to the last 'Rx_Buffer' position
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd fb4a 	bl	8000254 <strlen>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <insert_cmd+0x50>)
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e002      	b.n	8002bd0 <insert_cmd+0x44>
		return;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <insert_cmd+0x44>
		return;
 8002bce:	bf00      	nop
}
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200005e8 	.word	0x200005e8
 8002bdc:	2000026c 	.word	0x2000026c

08002be0 <Rx_UART_init>:

// set the interrupt for UART3 Rx
void Rx_UART_init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&c, 1);
 8002be4:	2201      	movs	r2, #1
 8002be6:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <Rx_UART_init+0x14>)
 8002be8:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <Rx_UART_init+0x18>)
 8002bea:	f003 ff23 	bl	8006a34 <HAL_UART_Receive_IT>
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200005e4 	.word	0x200005e4
 8002bf8:	20000460 	.word	0x20000460

08002bfc <HAL_UART_RxCpltCallback>:

//implementation of UART ISR
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) //current UART?
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <HAL_UART_RxCpltCallback+0x24>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d102      	bne.n	8002c14 <HAL_UART_RxCpltCallback+0x18>
		Rx_flag = 1;
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_UART_RxCpltCallback+0x28>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40004800 	.word	0x40004800
 8002c24:	2000026d 	.word	0x2000026d

08002c28 <UART_putchar>:
@brief	 	 Sends a char by UART - Polling (Waits for UART_Tx to transmitt 
							queued data
@param  	 Char to be transmitted
******************************************************************************/
void UART_putchar(char ch)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
	while(huart3.gState == HAL_UART_STATE_BUSY_TX) // Waits for UART_Tx to transmitt queued data
 8002c32:	bf00      	nop
 8002c34:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <UART_putchar+0x2c>)
 8002c36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c38:	2b21      	cmp	r3, #33	; 0x21
 8002c3a:	d0fb      	beq.n	8002c34 <UART_putchar+0xc>
		;
	
	c = ch; // 'ch' cannot be used to transmitt since its local to this function. Content may be lost
 8002c3c:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <UART_putchar+0x30>)
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)&c, 1);
 8002c42:	2201      	movs	r2, #1
 8002c44:	4904      	ldr	r1, [pc, #16]	; (8002c58 <UART_putchar+0x30>)
 8002c46:	4803      	ldr	r0, [pc, #12]	; (8002c54 <UART_putchar+0x2c>)
 8002c48:	f003 fe86 	bl	8006958 <HAL_UART_Transmit_IT>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000460 	.word	0x20000460
 8002c58:	200005e4 	.word	0x200005e4

08002c5c <UART_puts>:
@brief	 	 Sends a string by UART - Polling (Waits for UART_Tx to transmitt 
							queued data
@param  	 String to be transmitted
******************************************************************************/
void UART_puts(const char *s)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	if((s == NULL) || (s[0] == 0))	// string empty?
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01d      	beq.n	8002ca6 <UART_puts+0x4a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d019      	beq.n	8002ca6 <UART_puts+0x4a>
		return;
	
	int len = strlen(s);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fd faee 	bl	8000254 <strlen>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60fb      	str	r3, [r7, #12]
	if(len > TX_BUFF_LEN)		// string size bigger than the max size of Tx_Buffer?
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c82:	dc12      	bgt.n	8002caa <UART_puts+0x4e>
		return;

	while(huart3.gState == HAL_UART_STATE_BUSY_TX) // Waits for UART_Tx to transmitt queued data
 8002c84:	bf00      	nop
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <UART_puts+0x58>)
 8002c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c8a:	2b21      	cmp	r3, #33	; 0x21
 8002c8c:	d0fb      	beq.n	8002c86 <UART_puts+0x2a>
		;
	
	strcpy(Tx_Buffer, s);	// send string 'str' to 'TX_Buffer'
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4809      	ldr	r0, [pc, #36]	; (8002cb8 <UART_puts+0x5c>)
 8002c92:	f005 fb15 	bl	80082c0 <strcpy>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)Tx_Buffer, len);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4906      	ldr	r1, [pc, #24]	; (8002cb8 <UART_puts+0x5c>)
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <UART_puts+0x58>)
 8002ca0:	f003 fe5a 	bl	8006958 <HAL_UART_Transmit_IT>
 8002ca4:	e002      	b.n	8002cac <UART_puts+0x50>
		return;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <UART_puts+0x50>
		return;
 8002caa:	bf00      	nop
}
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000460 	.word	0x20000460
 8002cb8:	200004e4 	.word	0x200004e4

08002cbc <my_atoi>:
@param  String 'str' to be converted

@retval Int value of string converted
******************************************************************************/
int my_atoi(const char *str)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]

	while(str[i]) // end of array
 8002cc8:	e01d      	b.n	8002d06 <my_atoi+0x4a>
	{
		if(((str[i] < 0x30) || (str[i] > 0x41)) && ((str[i] < 0x41) || (str[i] > 0x46))) // 0x30 ('0'); 0x41 ('9'); 0x41 ('A'); 0x46 ('F');
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4413      	add	r3, r2
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b2f      	cmp	r3, #47	; 0x2f
 8002cd4:	d905      	bls.n	8002ce2 <my_atoi+0x26>
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b41      	cmp	r3, #65	; 0x41
 8002ce0:	d90e      	bls.n	8002d00 <my_atoi+0x44>
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b40      	cmp	r3, #64	; 0x40
 8002cec:	d905      	bls.n	8002cfa <my_atoi+0x3e>
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b46      	cmp	r3, #70	; 0x46
 8002cf8:	d902      	bls.n	8002d00 <my_atoi+0x44>
			return -1;		// invalid
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	e00f      	b.n	8002d20 <my_atoi+0x64>
		i++;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	3301      	adds	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
	while(str[i]) // end of array
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1db      	bne.n	8002cca <my_atoi+0xe>
	}
	return (int)strtol(str, NULL, 16); // convert string str (representing a hexadecimal value) into an integer number - 16 (hexadecimal)
 8002d12:	2210      	movs	r2, #16
 8002d14:	2100      	movs	r1, #0
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f005 fbba 	bl	8008490 <strtol>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	bf00      	nop
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d2c:	480d      	ldr	r0, [pc, #52]	; (8002d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d2e:	490e      	ldr	r1, [pc, #56]	; (8002d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d34:	e002      	b.n	8002d3c <LoopCopyDataInit>

08002d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3a:	3304      	adds	r3, #4

08002d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d40:	d3f9      	bcc.n	8002d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d42:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d44:	4c0b      	ldr	r4, [pc, #44]	; (8002d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d48:	e001      	b.n	8002d4e <LoopFillZerobss>

08002d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d4c:	3204      	adds	r2, #4

08002d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d50:	d3fb      	bcc.n	8002d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d52:	f7ff fc8b 	bl	800266c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d56:	f005 f961 	bl	800801c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d5a:	f7fe fe17 	bl	800198c <main>
  bx  lr    
 8002d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d60:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d68:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002d6c:	0800b5b8 	.word	0x0800b5b8
  ldr r2, =_sbss
 8002d70:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002d74:	2000060c 	.word	0x2000060c

08002d78 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d78:	e7fe      	b.n	8002d78 <CAN1_RX0_IRQHandler>

08002d7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7e:	2003      	movs	r0, #3
 8002d80:	f000 fe0e 	bl	80039a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f000 f805 	bl	8002d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8a:	f7ff fb33 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_InitTick+0x54>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_InitTick+0x58>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4619      	mov	r1, r3
 8002da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fe29 	bl	8003a0a <HAL_SYSTICK_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00e      	b.n	8002de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d80a      	bhi.n	8002dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd0:	f000 fdf1 	bl	80039b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd4:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <HAL_InitTick+0x5c>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000010 	.word	0x20000010
 8002dec:	20000018 	.word	0x20000018
 8002df0:	20000014 	.word	0x20000014

08002df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_IncTick+0x20>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_IncTick+0x24>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <HAL_IncTick+0x24>)
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000018 	.word	0x20000018
 8002e18:	200005f8 	.word	0x200005f8

08002e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <HAL_GetTick+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	200005f8 	.word	0x200005f8

08002e34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e031      	b.n	8002eae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fd fc2a 	bl	80006ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_ADC_Init+0x84>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	f043 0202 	orr.w	r2, r3, #2
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fbb8 	bl	80035f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e9e:	e001      	b.n	8002ea4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	ffffeefd 	.word	0xffffeefd

08002ebc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Start_IT+0x1a>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0b5      	b.n	8003042 <HAL_ADC_Start_IT+0x186>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d018      	beq.n	8002f1e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002efc:	4b54      	ldr	r3, [pc, #336]	; (8003050 <HAL_ADC_Start_IT+0x194>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a54      	ldr	r2, [pc, #336]	; (8003054 <HAL_ADC_Start_IT+0x198>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9a      	lsrs	r2, r3, #18
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f10:	e002      	b.n	8002f18 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d17d      	bne.n	8003028 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f30:	4b49      	ldr	r3, [pc, #292]	; (8003058 <HAL_ADC_Start_IT+0x19c>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f66:	d106      	bne.n	8002f76 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f023 0206 	bic.w	r2, r3, #6
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44
 8002f74:	e002      	b.n	8002f7c <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f8c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_ADC_Start_IT+0x1a0>)
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002f9e:	4b30      	ldr	r3, [pc, #192]	; (8003060 <HAL_ADC_Start_IT+0x1a4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d143      	bne.n	8003040 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	e03a      	b.n	8003040 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a25      	ldr	r2, [pc, #148]	; (8003064 <HAL_ADC_Start_IT+0x1a8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10e      	bne.n	8002ff2 <HAL_ADC_Start_IT+0x136>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ff0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_ADC_Start_IT+0x1a4>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d120      	bne.n	8003040 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a19      	ldr	r2, [pc, #100]	; (8003068 <HAL_ADC_Start_IT+0x1ac>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d11b      	bne.n	8003040 <HAL_ADC_Start_IT+0x184>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d114      	bne.n	8003040 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	e00b      	b.n	8003040 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 0210 	orr.w	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000010 	.word	0x20000010
 8003054:	431bde83 	.word	0x431bde83
 8003058:	fffff8fe 	.word	0xfffff8fe
 800305c:	04000020 	.word	0x04000020
 8003060:	40012300 	.word	0x40012300
 8003064:	40012000 	.word	0x40012000
 8003068:	40012200 	.word	0x40012200

0800306c <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_ADC_Stop_IT+0x16>
 800307e:	2302      	movs	r3, #2
 8003080:	e027      	b.n	80030d2 <HAL_ADC_Stop_IT+0x66>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10f      	bne.n	80030c8 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_ADC_Stop_IT+0x74>)
 80030b4:	400b      	ands	r3, r1
 80030b6:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_ADC_Stop_IT+0x78>)
 80030be:	4013      	ands	r3, r2
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	fbffffdf 	.word	0xfbffffdf
 80030e4:	ffffeefe 	.word	0xffffeefe

080030e8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d049      	beq.n	80031b2 <HAL_ADC_IRQHandler+0xca>
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d046      	beq.n	80031b2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d12b      	bne.n	80031a2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800314e:	2b00      	cmp	r3, #0
 8003150:	d127      	bne.n	80031a2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800316a:	2b00      	cmp	r3, #0
 800316c:	d119      	bne.n	80031a2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0220 	bic.w	r2, r2, #32
 800317c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d105      	bne.n	80031a2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fb80 	bl	80008a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0212 	mvn.w	r2, #18
 80031b0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d057      	beq.n	8003278 <HAL_ADC_IRQHandler+0x190>
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d054      	beq.n	8003278 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d105      	bne.n	80031e6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d139      	bne.n	8003268 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d006      	beq.n	8003210 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800320c:	2b00      	cmp	r3, #0
 800320e:	d12b      	bne.n	8003268 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800321a:	2b00      	cmp	r3, #0
 800321c:	d124      	bne.n	8003268 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11d      	bne.n	8003268 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003230:	2b00      	cmp	r3, #0
 8003232:	d119      	bne.n	8003268 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003242:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fabf 	bl	80037ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f06f 020c 	mvn.w	r2, #12
 8003276:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d017      	beq.n	80032be <HAL_ADC_IRQHandler+0x1d6>
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d014      	beq.n	80032be <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d10d      	bne.n	80032be <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f837 	bl	8003322 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0201 	mvn.w	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032cc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d015      	beq.n	8003300 <HAL_ADC_IRQHandler+0x218>
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f043 0202 	orr.w	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 0220 	mvn.w	r2, #32
 80032ee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f820 	bl	8003336 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f06f 0220 	mvn.w	r2, #32
 80032fe:	601a      	str	r2, [r3, #0]
  }
}
 8003300:	bf00      	nop
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1c>
 8003364:	2302      	movs	r3, #2
 8003366:	e136      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x28a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b09      	cmp	r3, #9
 8003376:	d93a      	bls.n	80033ee <HAL_ADC_ConfigChannel+0xa2>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003380:	d035      	beq.n	80033ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68d9      	ldr	r1, [r3, #12]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	3b1e      	subs	r3, #30
 8003398:	2207      	movs	r2, #7
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43da      	mvns	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	400a      	ands	r2, r1
 80033a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a8d      	ldr	r2, [pc, #564]	; (80035e4 <HAL_ADC_ConfigChannel+0x298>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10a      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68d9      	ldr	r1, [r3, #12]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	061a      	lsls	r2, r3, #24
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033c6:	e035      	b.n	8003434 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68d9      	ldr	r1, [r3, #12]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4403      	add	r3, r0
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	409a      	lsls	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ec:	e022      	b.n	8003434 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6919      	ldr	r1, [r3, #16]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	2207      	movs	r2, #7
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43da      	mvns	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	400a      	ands	r2, r1
 8003410:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6919      	ldr	r1, [r3, #16]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	4618      	mov	r0, r3
 8003424:	4603      	mov	r3, r0
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4403      	add	r3, r0
 800342a:	409a      	lsls	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b06      	cmp	r3, #6
 800343a:	d824      	bhi.n	8003486 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	3b05      	subs	r3, #5
 800344e:	221f      	movs	r2, #31
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43da      	mvns	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	400a      	ands	r2, r1
 800345c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	4618      	mov	r0, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3b05      	subs	r3, #5
 8003478:	fa00 f203 	lsl.w	r2, r0, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	635a      	str	r2, [r3, #52]	; 0x34
 8003484:	e04c      	b.n	8003520 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d824      	bhi.n	80034d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	3b23      	subs	r3, #35	; 0x23
 80034a0:	221f      	movs	r2, #31
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	400a      	ands	r2, r1
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4618      	mov	r0, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b23      	subs	r3, #35	; 0x23
 80034ca:	fa00 f203 	lsl.w	r2, r0, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
 80034d6:	e023      	b.n	8003520 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	3b41      	subs	r3, #65	; 0x41
 80034ea:	221f      	movs	r2, #31
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43da      	mvns	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	400a      	ands	r2, r1
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	4618      	mov	r0, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	3b41      	subs	r3, #65	; 0x41
 8003514:	fa00 f203 	lsl.w	r2, r0, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a30      	ldr	r2, [pc, #192]	; (80035e8 <HAL_ADC_ConfigChannel+0x29c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10a      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x1f4>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003532:	d105      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003534:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <HAL_ADC_ConfigChannel+0x2a0>)
 800353a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800353e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a28      	ldr	r2, [pc, #160]	; (80035e8 <HAL_ADC_ConfigChannel+0x29c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10f      	bne.n	800356a <HAL_ADC_ConfigChannel+0x21e>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b12      	cmp	r3, #18
 8003550:	d10b      	bne.n	800356a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003552:	4b26      	ldr	r3, [pc, #152]	; (80035ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a25      	ldr	r2, [pc, #148]	; (80035ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003558:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800355c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4a22      	ldr	r2, [pc, #136]	; (80035ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003568:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <HAL_ADC_ConfigChannel+0x29c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d12b      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x280>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <HAL_ADC_ConfigChannel+0x298>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <HAL_ADC_ConfigChannel+0x23a>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b11      	cmp	r3, #17
 8003584:	d122      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003586:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_ADC_ConfigChannel+0x2a0>)
 800358c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003590:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003592:	4b16      	ldr	r3, [pc, #88]	; (80035ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4a15      	ldr	r2, [pc, #84]	; (80035ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003598:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800359c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a10      	ldr	r2, [pc, #64]	; (80035e4 <HAL_ADC_ConfigChannel+0x298>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d111      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_ADC_ConfigChannel+0x2a4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	0c9a      	lsrs	r2, r3, #18
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035be:	e002      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f9      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	10000012 	.word	0x10000012
 80035e8:	40012000 	.word	0x40012000
 80035ec:	40012300 	.word	0x40012300
 80035f0:	20000010 	.word	0x20000010
 80035f4:	431bde83 	.word	0x431bde83

080035f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003600:	4b78      	ldr	r3, [pc, #480]	; (80037e4 <ADC_Init+0x1ec>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a77      	ldr	r2, [pc, #476]	; (80037e4 <ADC_Init+0x1ec>)
 8003606:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800360a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800360c:	4b75      	ldr	r3, [pc, #468]	; (80037e4 <ADC_Init+0x1ec>)
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4973      	ldr	r1, [pc, #460]	; (80037e4 <ADC_Init+0x1ec>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	021a      	lsls	r2, r3, #8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800364c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800366e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6899      	ldr	r1, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	4a58      	ldr	r2, [pc, #352]	; (80037e8 <ADC_Init+0x1f0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d022      	beq.n	80036d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800369a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6899      	ldr	r1, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6899      	ldr	r1, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	e00f      	b.n	80036f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0202 	bic.w	r2, r2, #2
 8003700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6899      	ldr	r1, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	005a      	lsls	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800373e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6859      	ldr	r1, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	3b01      	subs	r3, #1
 800374c:	035a      	lsls	r2, r3, #13
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e007      	b.n	8003768 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003766:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	3b01      	subs	r3, #1
 8003784:	051a      	lsls	r2, r3, #20
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800379c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037aa:	025a      	lsls	r2, r3, #9
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6899      	ldr	r1, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	029a      	lsls	r2, r3, #10
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40012300 	.word	0x40012300
 80037e8:	0f000001 	.word	0x0f000001

080037ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <__NVIC_SetPriorityGrouping+0x40>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800381c:	4013      	ands	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <__NVIC_SetPriorityGrouping+0x44>)
 800382a:	4313      	orrs	r3, r2
 800382c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800382e:	4a04      	ldr	r2, [pc, #16]	; (8003840 <__NVIC_SetPriorityGrouping+0x40>)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	60d3      	str	r3, [r2, #12]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000ed00 	.word	0xe000ed00
 8003844:	05fa0000 	.word	0x05fa0000

08003848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <__NVIC_GetPriorityGrouping+0x18>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	0a1b      	lsrs	r3, r3, #8
 8003852:	f003 0307 	and.w	r3, r3, #7
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	2b00      	cmp	r3, #0
 8003874:	db0b      	blt.n	800388e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	f003 021f 	and.w	r2, r3, #31
 800387c:	4907      	ldr	r1, [pc, #28]	; (800389c <__NVIC_EnableIRQ+0x38>)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	2001      	movs	r0, #1
 8003886:	fa00 f202 	lsl.w	r2, r0, r2
 800388a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	e000e100 	.word	0xe000e100

080038a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	6039      	str	r1, [r7, #0]
 80038aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	db0a      	blt.n	80038ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	490c      	ldr	r1, [pc, #48]	; (80038ec <__NVIC_SetPriority+0x4c>)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	0112      	lsls	r2, r2, #4
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	440b      	add	r3, r1
 80038c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c8:	e00a      	b.n	80038e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4908      	ldr	r1, [pc, #32]	; (80038f0 <__NVIC_SetPriority+0x50>)
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	3b04      	subs	r3, #4
 80038d8:	0112      	lsls	r2, r2, #4
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	440b      	add	r3, r1
 80038de:	761a      	strb	r2, [r3, #24]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000e100 	.word	0xe000e100
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f1c3 0307 	rsb	r3, r3, #7
 800390e:	2b04      	cmp	r3, #4
 8003910:	bf28      	it	cs
 8003912:	2304      	movcs	r3, #4
 8003914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3304      	adds	r3, #4
 800391a:	2b06      	cmp	r3, #6
 800391c:	d902      	bls.n	8003924 <NVIC_EncodePriority+0x30>
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3b03      	subs	r3, #3
 8003922:	e000      	b.n	8003926 <NVIC_EncodePriority+0x32>
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003928:	f04f 32ff 	mov.w	r2, #4294967295
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43da      	mvns	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	401a      	ands	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800393c:	f04f 31ff 	mov.w	r1, #4294967295
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	43d9      	mvns	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	4313      	orrs	r3, r2
         );
}
 800394e:	4618      	mov	r0, r3
 8003950:	3724      	adds	r7, #36	; 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800396c:	d301      	bcc.n	8003972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800396e:	2301      	movs	r3, #1
 8003970:	e00f      	b.n	8003992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <SysTick_Config+0x40>)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397a:	210f      	movs	r1, #15
 800397c:	f04f 30ff 	mov.w	r0, #4294967295
 8003980:	f7ff ff8e 	bl	80038a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <SysTick_Config+0x40>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398a:	4b04      	ldr	r3, [pc, #16]	; (800399c <SysTick_Config+0x40>)
 800398c:	2207      	movs	r2, #7
 800398e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	e000e010 	.word	0xe000e010

080039a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff29 	bl	8003800 <__NVIC_SetPriorityGrouping>
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	4603      	mov	r3, r0
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039c8:	f7ff ff3e 	bl	8003848 <__NVIC_GetPriorityGrouping>
 80039cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	6978      	ldr	r0, [r7, #20]
 80039d4:	f7ff ff8e 	bl	80038f4 <NVIC_EncodePriority>
 80039d8:	4602      	mov	r2, r0
 80039da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff5d 	bl	80038a0 <__NVIC_SetPriority>
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff31 	bl	8003864 <__NVIC_EnableIRQ>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ffa2 	bl	800395c <SysTick_Config>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e014      	b.n	8003a5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	791b      	ldrb	r3, [r3, #4]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fd f947 	bl	8000cd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	795b      	ldrb	r3, [r3, #5]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_DAC_Start+0x16>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e040      	b.n	8003afe <HAL_DAC_Start+0x98>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6819      	ldr	r1, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2201      	movs	r2, #1
 8003a96:	409a      	lsls	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003ab0:	2b3c      	cmp	r3, #60	; 0x3c
 8003ab2:	d11d      	bne.n	8003af0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	e014      	b.n	8003af0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	213c      	movs	r1, #60	; 0x3c
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d107      	bne.n	8003af0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0202 	orr.w	r2, r2, #2
 8003aee:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2201      	movs	r2, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	795b      	ldrb	r3, [r3, #5]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_DAC_Start_DMA+0x1e>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e0ab      	b.n	8003cba <HAL_DAC_Start_DMA+0x176>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d12f      	bne.n	8003bd4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a52      	ldr	r2, [pc, #328]	; (8003cc4 <HAL_DAC_Start_DMA+0x180>)
 8003b7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a51      	ldr	r2, [pc, #324]	; (8003cc8 <HAL_DAC_Start_DMA+0x184>)
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a50      	ldr	r2, [pc, #320]	; (8003ccc <HAL_DAC_Start_DMA+0x188>)
 8003b8a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b9a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d013      	beq.n	8003bca <HAL_DAC_Start_DMA+0x86>
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d845      	bhi.n	8003c34 <HAL_DAC_Start_DMA+0xf0>
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_DAC_Start_DMA+0x72>
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d005      	beq.n	8003bc0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003bb4:	e03e      	b.n	8003c34 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	613b      	str	r3, [r7, #16]
        break;
 8003bbe:	e03c      	b.n	8003c3a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	613b      	str	r3, [r7, #16]
        break;
 8003bc8:	e037      	b.n	8003c3a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3310      	adds	r3, #16
 8003bd0:	613b      	str	r3, [r7, #16]
        break;
 8003bd2:	e032      	b.n	8003c3a <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <HAL_DAC_Start_DMA+0x18c>)
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a3c      	ldr	r2, [pc, #240]	; (8003cd4 <HAL_DAC_Start_DMA+0x190>)
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a3b      	ldr	r2, [pc, #236]	; (8003cd8 <HAL_DAC_Start_DMA+0x194>)
 8003bea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bfa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d013      	beq.n	8003c2a <HAL_DAC_Start_DMA+0xe6>
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d817      	bhi.n	8003c38 <HAL_DAC_Start_DMA+0xf4>
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_DAC_Start_DMA+0xd2>
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d005      	beq.n	8003c20 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003c14:	e010      	b.n	8003c38 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	613b      	str	r3, [r7, #16]
        break;
 8003c1e:	e00c      	b.n	8003c3a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3318      	adds	r3, #24
 8003c26:	613b      	str	r3, [r7, #16]
        break;
 8003c28:	e007      	b.n	8003c3a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	331c      	adds	r3, #28
 8003c30:	613b      	str	r3, [r7, #16]
        break;
 8003c32:	e002      	b.n	8003c3a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003c34:	bf00      	nop
 8003c36:	e000      	b.n	8003c3a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003c38:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d111      	bne.n	8003c64 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6898      	ldr	r0, [r3, #8]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	f000 fa5f 	bl	800411c <HAL_DMA_Start_IT>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	75fb      	strb	r3, [r7, #23]
 8003c62:	e010      	b.n	8003c86 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003c72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68d8      	ldr	r0, [r3, #12]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	f000 fa4d 	bl	800411c <HAL_DMA_Start_IT>
 8003c82:	4603      	mov	r3, r0
 8003c84:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e005      	b.n	8003cb8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f043 0204 	orr.w	r2, r3, #4
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	08003eab 	.word	0x08003eab
 8003cc8:	08003ecd 	.word	0x08003ecd
 8003ccc:	08003ee9 	.word	0x08003ee9
 8003cd0:	08003f53 	.word	0x08003f53
 8003cd4:	08003f75 	.word	0x08003f75
 8003cd8:	08003f91 	.word	0x08003f91

08003cdc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	400a      	ands	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2201      	movs	r2, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43da      	mvns	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	400a      	ands	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fa56 	bl	80041dc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e00c      	b.n	8003d5c <HAL_DAC_Stop_DMA+0x80>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fa48 	bl	80041dc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003d5a:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	3308      	adds	r3, #8
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e004      	b.n	8003da0 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3314      	adds	r3, #20
 8003d9e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	461a      	mov	r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b087      	sub	sp, #28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	795b      	ldrb	r3, [r3, #5]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_DAC_ConfigChannel+0x18>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e03c      	b.n	8003e84 <HAL_DAC_ConfigChannel+0x92>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2202      	movs	r2, #2
 8003e14:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4013      	ands	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	22c0      	movs	r2, #192	; 0xc0
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43da      	mvns	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	400a      	ands	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	791b      	ldrb	r3, [r3, #4]
 8003e9c:	b2db      	uxtb	r3, r3
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff ff7c 	bl	8003db6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	711a      	strb	r2, [r3, #4]
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff ff75 	bl	8003dca <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f043 0204 	orr.w	r2, r3, #4
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff ff6b 	bl	8003dde <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	711a      	strb	r2, [r3, #4]
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff ffd8 	bl	8003f16 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	711a      	strb	r2, [r3, #4]
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff ffd1 	bl	8003f2a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f043 0204 	orr.w	r2, r3, #4
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff ffc7 	bl	8003f3e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	711a      	strb	r2, [r3, #4]
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fcc:	f7fe ff26 	bl	8002e1c <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e099      	b.n	8004110 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ffc:	e00f      	b.n	800401e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ffe:	f7fe ff0d 	bl	8002e1c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b05      	cmp	r3, #5
 800400a:	d908      	bls.n	800401e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2203      	movs	r2, #3
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e078      	b.n	8004110 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e8      	bne.n	8003ffe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_DMA_Init+0x158>)
 8004038:	4013      	ands	r3, r2
 800403a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800404a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004056:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004062:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2b04      	cmp	r3, #4
 8004076:	d107      	bne.n	8004088 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	4313      	orrs	r3, r2
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0307 	bic.w	r3, r3, #7
 800409e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d117      	bne.n	80040e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00e      	beq.n	80040e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fb09 	bl	80046dc <DMA_CheckFifoParam>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2240      	movs	r2, #64	; 0x40
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040de:	2301      	movs	r3, #1
 80040e0:	e016      	b.n	8004110 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fac0 	bl	8004670 <DMA_CalcBaseAndBitshift>
 80040f0:	4603      	mov	r3, r0
 80040f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	223f      	movs	r2, #63	; 0x3f
 80040fa:	409a      	lsls	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	e010803f 	.word	0xe010803f

0800411c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_DMA_Start_IT+0x26>
 800413e:	2302      	movs	r3, #2
 8004140:	e048      	b.n	80041d4 <HAL_DMA_Start_IT+0xb8>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d137      	bne.n	80041c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fa52 	bl	8004614 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	223f      	movs	r2, #63	; 0x3f
 8004176:	409a      	lsls	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0216 	orr.w	r2, r2, #22
 800418a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800419a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0208 	orr.w	r2, r2, #8
 80041b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e005      	b.n	80041d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
 80041d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041ea:	f7fe fe17 	bl	8002e1c <HAL_GetTick>
 80041ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d008      	beq.n	800420e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2280      	movs	r2, #128	; 0x80
 8004200:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e052      	b.n	80042b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0216 	bic.w	r2, r2, #22
 800421c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800422c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d103      	bne.n	800423e <HAL_DMA_Abort+0x62>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0208 	bic.w	r2, r2, #8
 800424c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800425e:	e013      	b.n	8004288 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004260:	f7fe fddc 	bl	8002e1c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b05      	cmp	r3, #5
 800426c:	d90c      	bls.n	8004288 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2203      	movs	r2, #3
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e015      	b.n	80042b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e4      	bne.n	8004260 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	223f      	movs	r2, #63	; 0x3f
 800429c:	409a      	lsls	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d004      	beq.n	80042da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2280      	movs	r2, #128	; 0x80
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e00c      	b.n	80042f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2205      	movs	r2, #5
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800430c:	4b92      	ldr	r3, [pc, #584]	; (8004558 <HAL_DMA_IRQHandler+0x258>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a92      	ldr	r2, [pc, #584]	; (800455c <HAL_DMA_IRQHandler+0x25c>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	0a9b      	lsrs	r3, r3, #10
 8004318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	2208      	movs	r2, #8
 800432c:	409a      	lsls	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d01a      	beq.n	800436c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0204 	bic.w	r2, r2, #4
 8004352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	2208      	movs	r2, #8
 800435a:	409a      	lsls	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f043 0201 	orr.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004370:	2201      	movs	r2, #1
 8004372:	409a      	lsls	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d012      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00b      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438e:	2201      	movs	r2, #1
 8004390:	409a      	lsls	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f043 0202 	orr.w	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a6:	2204      	movs	r2, #4
 80043a8:	409a      	lsls	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d012      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c4:	2204      	movs	r2, #4
 80043c6:	409a      	lsls	r2, r3
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	f043 0204 	orr.w	r2, r3, #4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	2210      	movs	r2, #16
 80043de:	409a      	lsls	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d043      	beq.n	8004470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d03c      	beq.n	8004470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fa:	2210      	movs	r2, #16
 80043fc:	409a      	lsls	r2, r3
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d018      	beq.n	8004442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d108      	bne.n	8004430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d024      	beq.n	8004470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
 800442e:	e01f      	b.n	8004470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01b      	beq.n	8004470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
 8004440:	e016      	b.n	8004470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	d107      	bne.n	8004460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0208 	bic.w	r2, r2, #8
 800445e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	2220      	movs	r2, #32
 8004476:	409a      	lsls	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 808e 	beq.w	800459e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8086 	beq.w	800459e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	2220      	movs	r2, #32
 8004498:	409a      	lsls	r2, r3
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d136      	bne.n	8004518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0216 	bic.w	r2, r2, #22
 80044b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <HAL_DMA_IRQHandler+0x1da>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0208 	bic.w	r2, r2, #8
 80044e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	223f      	movs	r2, #63	; 0x3f
 80044f0:	409a      	lsls	r2, r3
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450a:	2b00      	cmp	r3, #0
 800450c:	d07d      	beq.n	800460a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
        }
        return;
 8004516:	e078      	b.n	800460a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01c      	beq.n	8004560 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d108      	bne.n	8004546 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004538:	2b00      	cmp	r3, #0
 800453a:	d030      	beq.n	800459e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	4798      	blx	r3
 8004544:	e02b      	b.n	800459e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d027      	beq.n	800459e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	4798      	blx	r3
 8004556:	e022      	b.n	800459e <HAL_DMA_IRQHandler+0x29e>
 8004558:	20000010 	.word	0x20000010
 800455c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0210 	bic.w	r2, r2, #16
 800457c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d032      	beq.n	800460c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d022      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2205      	movs	r2, #5
 80045b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	3301      	adds	r3, #1
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d307      	bcc.n	80045e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f2      	bne.n	80045ca <HAL_DMA_IRQHandler+0x2ca>
 80045e4:	e000      	b.n	80045e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80045e6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4798      	blx	r3
 8004608:	e000      	b.n	800460c <HAL_DMA_IRQHandler+0x30c>
        return;
 800460a:	bf00      	nop
    }
  }
}
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop

08004614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004630:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d108      	bne.n	8004654 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004652:	e007      	b.n	8004664 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	60da      	str	r2, [r3, #12]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	3b10      	subs	r3, #16
 8004680:	4a13      	ldr	r2, [pc, #76]	; (80046d0 <DMA_CalcBaseAndBitshift+0x60>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <DMA_CalcBaseAndBitshift+0x64>)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d908      	bls.n	80046b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <DMA_CalcBaseAndBitshift+0x68>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	1d1a      	adds	r2, r3, #4
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	659a      	str	r2, [r3, #88]	; 0x58
 80046ae:	e006      	b.n	80046be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <DMA_CalcBaseAndBitshift+0x68>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	aaaaaaab 	.word	0xaaaaaaab
 80046d4:	0800b17c 	.word	0x0800b17c
 80046d8:	fffffc00 	.word	0xfffffc00

080046dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d11f      	bne.n	8004736 <DMA_CheckFifoParam+0x5a>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d856      	bhi.n	80047aa <DMA_CheckFifoParam+0xce>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <DMA_CheckFifoParam+0x28>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004715 	.word	0x08004715
 8004708:	08004727 	.word	0x08004727
 800470c:	08004715 	.word	0x08004715
 8004710:	080047ab 	.word	0x080047ab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d046      	beq.n	80047ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004724:	e043      	b.n	80047ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800472e:	d140      	bne.n	80047b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004734:	e03d      	b.n	80047b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473e:	d121      	bne.n	8004784 <DMA_CheckFifoParam+0xa8>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b03      	cmp	r3, #3
 8004744:	d837      	bhi.n	80047b6 <DMA_CheckFifoParam+0xda>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <DMA_CheckFifoParam+0x70>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	0800475d 	.word	0x0800475d
 8004750:	08004763 	.word	0x08004763
 8004754:	0800475d 	.word	0x0800475d
 8004758:	08004775 	.word	0x08004775
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      break;
 8004760:	e030      	b.n	80047c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d025      	beq.n	80047ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004772:	e022      	b.n	80047ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800477c:	d11f      	bne.n	80047be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004782:	e01c      	b.n	80047be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d903      	bls.n	8004792 <DMA_CheckFifoParam+0xb6>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d003      	beq.n	8004798 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004790:	e018      	b.n	80047c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
      break;
 8004796:	e015      	b.n	80047c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00e      	beq.n	80047c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
      break;
 80047a8:	e00b      	b.n	80047c2 <DMA_CheckFifoParam+0xe6>
      break;
 80047aa:	bf00      	nop
 80047ac:	e00a      	b.n	80047c4 <DMA_CheckFifoParam+0xe8>
      break;
 80047ae:	bf00      	nop
 80047b0:	e008      	b.n	80047c4 <DMA_CheckFifoParam+0xe8>
      break;
 80047b2:	bf00      	nop
 80047b4:	e006      	b.n	80047c4 <DMA_CheckFifoParam+0xe8>
      break;
 80047b6:	bf00      	nop
 80047b8:	e004      	b.n	80047c4 <DMA_CheckFifoParam+0xe8>
      break;
 80047ba:	bf00      	nop
 80047bc:	e002      	b.n	80047c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80047be:	bf00      	nop
 80047c0:	e000      	b.n	80047c4 <DMA_CheckFifoParam+0xe8>
      break;
 80047c2:	bf00      	nop
    }
  } 
  
  return status; 
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop

080047d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	e175      	b.n	8004ae0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047f4:	2201      	movs	r2, #1
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4013      	ands	r3, r2
 8004806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	429a      	cmp	r2, r3
 800480e:	f040 8164 	bne.w	8004ada <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d005      	beq.n	800482a <HAL_GPIO_Init+0x56>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d130      	bne.n	800488c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004860:	2201      	movs	r2, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4013      	ands	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 0201 	and.w	r2, r3, #1
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d017      	beq.n	80048c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	2203      	movs	r2, #3
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d123      	bne.n	800491c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	08da      	lsrs	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3208      	adds	r2, #8
 80048dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	220f      	movs	r2, #15
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	08da      	lsrs	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3208      	adds	r2, #8
 8004916:	69b9      	ldr	r1, [r7, #24]
 8004918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	2203      	movs	r2, #3
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0203 	and.w	r2, r3, #3
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80be 	beq.w	8004ada <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495e:	4b66      	ldr	r3, [pc, #408]	; (8004af8 <HAL_GPIO_Init+0x324>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	4a65      	ldr	r2, [pc, #404]	; (8004af8 <HAL_GPIO_Init+0x324>)
 8004964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004968:	6453      	str	r3, [r2, #68]	; 0x44
 800496a:	4b63      	ldr	r3, [pc, #396]	; (8004af8 <HAL_GPIO_Init+0x324>)
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004976:	4a61      	ldr	r2, [pc, #388]	; (8004afc <HAL_GPIO_Init+0x328>)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	3302      	adds	r3, #2
 800497e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	220f      	movs	r2, #15
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a58      	ldr	r2, [pc, #352]	; (8004b00 <HAL_GPIO_Init+0x32c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d037      	beq.n	8004a12 <HAL_GPIO_Init+0x23e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a57      	ldr	r2, [pc, #348]	; (8004b04 <HAL_GPIO_Init+0x330>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d031      	beq.n	8004a0e <HAL_GPIO_Init+0x23a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a56      	ldr	r2, [pc, #344]	; (8004b08 <HAL_GPIO_Init+0x334>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d02b      	beq.n	8004a0a <HAL_GPIO_Init+0x236>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a55      	ldr	r2, [pc, #340]	; (8004b0c <HAL_GPIO_Init+0x338>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d025      	beq.n	8004a06 <HAL_GPIO_Init+0x232>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a54      	ldr	r2, [pc, #336]	; (8004b10 <HAL_GPIO_Init+0x33c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01f      	beq.n	8004a02 <HAL_GPIO_Init+0x22e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a53      	ldr	r2, [pc, #332]	; (8004b14 <HAL_GPIO_Init+0x340>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d019      	beq.n	80049fe <HAL_GPIO_Init+0x22a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_GPIO_Init+0x344>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_GPIO_Init+0x226>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a51      	ldr	r2, [pc, #324]	; (8004b1c <HAL_GPIO_Init+0x348>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00d      	beq.n	80049f6 <HAL_GPIO_Init+0x222>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a50      	ldr	r2, [pc, #320]	; (8004b20 <HAL_GPIO_Init+0x34c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d007      	beq.n	80049f2 <HAL_GPIO_Init+0x21e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4f      	ldr	r2, [pc, #316]	; (8004b24 <HAL_GPIO_Init+0x350>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d101      	bne.n	80049ee <HAL_GPIO_Init+0x21a>
 80049ea:	2309      	movs	r3, #9
 80049ec:	e012      	b.n	8004a14 <HAL_GPIO_Init+0x240>
 80049ee:	230a      	movs	r3, #10
 80049f0:	e010      	b.n	8004a14 <HAL_GPIO_Init+0x240>
 80049f2:	2308      	movs	r3, #8
 80049f4:	e00e      	b.n	8004a14 <HAL_GPIO_Init+0x240>
 80049f6:	2307      	movs	r3, #7
 80049f8:	e00c      	b.n	8004a14 <HAL_GPIO_Init+0x240>
 80049fa:	2306      	movs	r3, #6
 80049fc:	e00a      	b.n	8004a14 <HAL_GPIO_Init+0x240>
 80049fe:	2305      	movs	r3, #5
 8004a00:	e008      	b.n	8004a14 <HAL_GPIO_Init+0x240>
 8004a02:	2304      	movs	r3, #4
 8004a04:	e006      	b.n	8004a14 <HAL_GPIO_Init+0x240>
 8004a06:	2303      	movs	r3, #3
 8004a08:	e004      	b.n	8004a14 <HAL_GPIO_Init+0x240>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e002      	b.n	8004a14 <HAL_GPIO_Init+0x240>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <HAL_GPIO_Init+0x240>
 8004a12:	2300      	movs	r3, #0
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	f002 0203 	and.w	r2, r2, #3
 8004a1a:	0092      	lsls	r2, r2, #2
 8004a1c:	4093      	lsls	r3, r2
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a24:	4935      	ldr	r1, [pc, #212]	; (8004afc <HAL_GPIO_Init+0x328>)
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	089b      	lsrs	r3, r3, #2
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <HAL_GPIO_Init+0x354>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a56:	4a34      	ldr	r2, [pc, #208]	; (8004b28 <HAL_GPIO_Init+0x354>)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a5c:	4b32      	ldr	r3, [pc, #200]	; (8004b28 <HAL_GPIO_Init+0x354>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a80:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <HAL_GPIO_Init+0x354>)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a86:	4b28      	ldr	r3, [pc, #160]	; (8004b28 <HAL_GPIO_Init+0x354>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4013      	ands	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aaa:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <HAL_GPIO_Init+0x354>)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_GPIO_Init+0x354>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	4013      	ands	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ad4:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <HAL_GPIO_Init+0x354>)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3301      	adds	r3, #1
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	f67f ae86 	bls.w	80047f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	3724      	adds	r7, #36	; 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40013800 	.word	0x40013800
 8004b00:	40020000 	.word	0x40020000
 8004b04:	40020400 	.word	0x40020400
 8004b08:	40020800 	.word	0x40020800
 8004b0c:	40020c00 	.word	0x40020c00
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40021400 	.word	0x40021400
 8004b18:	40021800 	.word	0x40021800
 8004b1c:	40021c00 	.word	0x40021c00
 8004b20:	40022000 	.word	0x40022000
 8004b24:	40022400 	.word	0x40022400
 8004b28:	40013c00 	.word	0x40013c00

08004b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e001      	b.n	8004b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b6c:	787b      	ldrb	r3, [r7, #1]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b72:	887a      	ldrh	r2, [r7, #2]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b78:	e003      	b.n	8004b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b7a:	887b      	ldrh	r3, [r7, #2]
 8004b7c:	041a      	lsls	r2, r3, #16
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	619a      	str	r2, [r3, #24]
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b9a:	4b23      	ldr	r3, [pc, #140]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bb2:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bbe:	f7fe f92d 	bl	8002e1c <HAL_GetTick>
 8004bc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bc4:	e009      	b.n	8004bda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bc6:	f7fe f929 	bl	8002e1c <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd4:	d901      	bls.n	8004bda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e022      	b.n	8004c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be6:	d1ee      	bne.n	8004bc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004be8:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0f      	ldr	r2, [pc, #60]	; (8004c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bf4:	f7fe f912 	bl	8002e1c <HAL_GetTick>
 8004bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bfa:	e009      	b.n	8004c10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bfc:	f7fe f90e 	bl	8002e1c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c0a:	d901      	bls.n	8004c10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e007      	b.n	8004c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c1c:	d1ee      	bne.n	8004bfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000

08004c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e29b      	b.n	800517e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8087 	beq.w	8004d62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c54:	4b96      	ldr	r3, [pc, #600]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d00c      	beq.n	8004c7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c60:	4b93      	ldr	r3, [pc, #588]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 030c 	and.w	r3, r3, #12
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d112      	bne.n	8004c92 <HAL_RCC_OscConfig+0x62>
 8004c6c:	4b90      	ldr	r3, [pc, #576]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c78:	d10b      	bne.n	8004c92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7a:	4b8d      	ldr	r3, [pc, #564]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d06c      	beq.n	8004d60 <HAL_RCC_OscConfig+0x130>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d168      	bne.n	8004d60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e275      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9a:	d106      	bne.n	8004caa <HAL_RCC_OscConfig+0x7a>
 8004c9c:	4b84      	ldr	r3, [pc, #528]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a83      	ldr	r2, [pc, #524]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	e02e      	b.n	8004d08 <HAL_RCC_OscConfig+0xd8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0x9c>
 8004cb2:	4b7f      	ldr	r3, [pc, #508]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a7e      	ldr	r2, [pc, #504]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b7c      	ldr	r3, [pc, #496]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a7b      	ldr	r2, [pc, #492]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e01d      	b.n	8004d08 <HAL_RCC_OscConfig+0xd8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0xc0>
 8004cd6:	4b76      	ldr	r3, [pc, #472]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a75      	ldr	r2, [pc, #468]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b73      	ldr	r3, [pc, #460]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a72      	ldr	r2, [pc, #456]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e00b      	b.n	8004d08 <HAL_RCC_OscConfig+0xd8>
 8004cf0:	4b6f      	ldr	r3, [pc, #444]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a6e      	ldr	r2, [pc, #440]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a6b      	ldr	r2, [pc, #428]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d013      	beq.n	8004d38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fe f884 	bl	8002e1c <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d18:	f7fe f880 	bl	8002e1c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e229      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2a:	4b61      	ldr	r3, [pc, #388]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0xe8>
 8004d36:	e014      	b.n	8004d62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fe f870 	bl	8002e1c <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d40:	f7fe f86c 	bl	8002e1c <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e215      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d52:	4b57      	ldr	r3, [pc, #348]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x110>
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d069      	beq.n	8004e42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d6e:	4b50      	ldr	r3, [pc, #320]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00b      	beq.n	8004d92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7a:	4b4d      	ldr	r3, [pc, #308]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d11c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x190>
 8004d86:	4b4a      	ldr	r3, [pc, #296]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d116      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_RCC_OscConfig+0x17a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d001      	beq.n	8004daa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e1e9      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004daa:	4b41      	ldr	r3, [pc, #260]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	493d      	ldr	r1, [pc, #244]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dbe:	e040      	b.n	8004e42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d023      	beq.n	8004e10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc8:	4b39      	ldr	r3, [pc, #228]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a38      	ldr	r2, [pc, #224]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fe f822 	bl	8002e1c <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ddc:	f7fe f81e 	bl	8002e1c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e1c7      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	4b30      	ldr	r3, [pc, #192]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	4b2d      	ldr	r3, [pc, #180]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4929      	ldr	r1, [pc, #164]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
 8004e0e:	e018      	b.n	8004e42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e10:	4b27      	ldr	r3, [pc, #156]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fd fffe 	bl	8002e1c <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e24:	f7fd fffa 	bl	8002e1c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e1a3      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d038      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d019      	beq.n	8004e8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5a:	4a15      	ldr	r2, [pc, #84]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fd ffdb 	bl	8002e1c <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6a:	f7fd ffd7 	bl	8002e1c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e180      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x23a>
 8004e88:	e01a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8e:	4a08      	ldr	r2, [pc, #32]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e96:	f7fd ffc1 	bl	8002e1c <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9e:	f7fd ffbd 	bl	8002e1c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d903      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e166      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
 8004eb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	4b92      	ldr	r3, [pc, #584]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ee      	bne.n	8004e9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80a4 	beq.w	8005016 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ece:	4b8c      	ldr	r3, [pc, #560]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10d      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	4b89      	ldr	r3, [pc, #548]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	4a88      	ldr	r2, [pc, #544]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee6:	4b86      	ldr	r3, [pc, #536]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef6:	4b83      	ldr	r3, [pc, #524]	; (8005104 <HAL_RCC_OscConfig+0x4d4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d118      	bne.n	8004f34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f02:	4b80      	ldr	r3, [pc, #512]	; (8005104 <HAL_RCC_OscConfig+0x4d4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7f      	ldr	r2, [pc, #508]	; (8005104 <HAL_RCC_OscConfig+0x4d4>)
 8004f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0e:	f7fd ff85 	bl	8002e1c <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f16:	f7fd ff81 	bl	8002e1c <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b64      	cmp	r3, #100	; 0x64
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e12a      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f28:	4b76      	ldr	r3, [pc, #472]	; (8005104 <HAL_RCC_OscConfig+0x4d4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCC_OscConfig+0x31a>
 8004f3c:	4b70      	ldr	r3, [pc, #448]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4a6f      	ldr	r2, [pc, #444]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	; 0x70
 8004f48:	e02d      	b.n	8004fa6 <HAL_RCC_OscConfig+0x376>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x33c>
 8004f52:	4b6b      	ldr	r3, [pc, #428]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	4a6a      	ldr	r2, [pc, #424]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5e:	4b68      	ldr	r3, [pc, #416]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	4a67      	ldr	r2, [pc, #412]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f64:	f023 0304 	bic.w	r3, r3, #4
 8004f68:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6a:	e01c      	b.n	8004fa6 <HAL_RCC_OscConfig+0x376>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b05      	cmp	r3, #5
 8004f72:	d10c      	bne.n	8004f8e <HAL_RCC_OscConfig+0x35e>
 8004f74:	4b62      	ldr	r3, [pc, #392]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	4a61      	ldr	r2, [pc, #388]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f7a:	f043 0304 	orr.w	r3, r3, #4
 8004f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f80:	4b5f      	ldr	r3, [pc, #380]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4a5e      	ldr	r2, [pc, #376]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8c:	e00b      	b.n	8004fa6 <HAL_RCC_OscConfig+0x376>
 8004f8e:	4b5c      	ldr	r3, [pc, #368]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a5b      	ldr	r2, [pc, #364]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9a:	4b59      	ldr	r3, [pc, #356]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	4a58      	ldr	r2, [pc, #352]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d015      	beq.n	8004fda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fae:	f7fd ff35 	bl	8002e1c <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb4:	e00a      	b.n	8004fcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb6:	f7fd ff31 	bl	8002e1c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e0d8      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fcc:	4b4c      	ldr	r3, [pc, #304]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0ee      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x386>
 8004fd8:	e014      	b.n	8005004 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fda:	f7fd ff1f 	bl	8002e1c <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe0:	e00a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe2:	f7fd ff1b 	bl	8002e1c <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0c2      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff8:	4b41      	ldr	r3, [pc, #260]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1ee      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800500a:	4b3d      	ldr	r3, [pc, #244]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	4a3c      	ldr	r2, [pc, #240]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8005010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80ae 	beq.w	800517c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005020:	4b37      	ldr	r3, [pc, #220]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 030c 	and.w	r3, r3, #12
 8005028:	2b08      	cmp	r3, #8
 800502a:	d06d      	beq.n	8005108 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d14b      	bne.n	80050cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005034:	4b32      	ldr	r3, [pc, #200]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a31      	ldr	r2, [pc, #196]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 800503a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800503e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fd feec 	bl	8002e1c <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005048:	f7fd fee8 	bl	8002e1c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e091      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	4b29      	ldr	r3, [pc, #164]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	019b      	lsls	r3, r3, #6
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	3b01      	subs	r3, #1
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	061b      	lsls	r3, r3, #24
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	071b      	lsls	r3, r3, #28
 8005092:	491b      	ldr	r1, [pc, #108]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005098:	4b19      	ldr	r3, [pc, #100]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a18      	ldr	r2, [pc, #96]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fd feba 	bl	8002e1c <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd feb6 	bl	8002e1c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e05f      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050be:	4b10      	ldr	r3, [pc, #64]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x47c>
 80050ca:	e057      	b.n	800517c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fd fea0 	bl	8002e1c <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fd fe9c 	bl	8002e1c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e045      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f2:	4b03      	ldr	r3, [pc, #12]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4b0>
 80050fe:	e03d      	b.n	800517c <HAL_RCC_OscConfig+0x54c>
 8005100:	40023800 	.word	0x40023800
 8005104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005108:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <HAL_RCC_OscConfig+0x558>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d030      	beq.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d129      	bne.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d122      	bne.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800513e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d119      	bne.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d10f      	bne.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d107      	bne.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40023800 	.word	0x40023800

0800518c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0d0      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a4:	4b6a      	ldr	r3, [pc, #424]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d910      	bls.n	80051d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b67      	ldr	r3, [pc, #412]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 020f 	bic.w	r2, r3, #15
 80051ba:	4965      	ldr	r1, [pc, #404]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b63      	ldr	r3, [pc, #396]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0b8      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d020      	beq.n	8005222 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051ec:	4b59      	ldr	r3, [pc, #356]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4a58      	ldr	r2, [pc, #352]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 80051f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005204:	4b53      	ldr	r3, [pc, #332]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4a52      	ldr	r2, [pc, #328]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800520a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800520e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005210:	4b50      	ldr	r3, [pc, #320]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	494d      	ldr	r1, [pc, #308]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d040      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d107      	bne.n	8005246 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005236:	4b47      	ldr	r3, [pc, #284]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d115      	bne.n	800526e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e07f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524e:	4b41      	ldr	r3, [pc, #260]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e073      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e06b      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800526e:	4b39      	ldr	r3, [pc, #228]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f023 0203 	bic.w	r2, r3, #3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4936      	ldr	r1, [pc, #216]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800527c:	4313      	orrs	r3, r2
 800527e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005280:	f7fd fdcc 	bl	8002e1c <HAL_GetTick>
 8005284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005286:	e00a      	b.n	800529e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005288:	f7fd fdc8 	bl	8002e1c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	; 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e053      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529e:	4b2d      	ldr	r3, [pc, #180]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 020c 	and.w	r2, r3, #12
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d1eb      	bne.n	8005288 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052b0:	4b27      	ldr	r3, [pc, #156]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d210      	bcs.n	80052e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b24      	ldr	r3, [pc, #144]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 020f 	bic.w	r2, r3, #15
 80052c6:	4922      	ldr	r1, [pc, #136]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b20      	ldr	r3, [pc, #128]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e032      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ec:	4b19      	ldr	r3, [pc, #100]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4916      	ldr	r1, [pc, #88]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800530a:	4b12      	ldr	r3, [pc, #72]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	490e      	ldr	r1, [pc, #56]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800531e:	f000 f821 	bl	8005364 <HAL_RCC_GetSysClockFreq>
 8005322:	4602      	mov	r2, r0
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	490a      	ldr	r1, [pc, #40]	; (8005358 <HAL_RCC_ClockConfig+0x1cc>)
 8005330:	5ccb      	ldrb	r3, [r1, r3]
 8005332:	fa22 f303 	lsr.w	r3, r2, r3
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <HAL_RCC_ClockConfig+0x1d0>)
 8005338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <HAL_RCC_ClockConfig+0x1d4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fd fd28 	bl	8002d94 <HAL_InitTick>

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40023c00 	.word	0x40023c00
 8005354:	40023800 	.word	0x40023800
 8005358:	0800b13c 	.word	0x0800b13c
 800535c:	20000010 	.word	0x20000010
 8005360:	20000014 	.word	0x20000014

08005364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	607b      	str	r3, [r7, #4]
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	2300      	movs	r3, #0
 8005376:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800537c:	4b67      	ldr	r3, [pc, #412]	; (800551c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 030c 	and.w	r3, r3, #12
 8005384:	2b08      	cmp	r3, #8
 8005386:	d00d      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005388:	2b08      	cmp	r3, #8
 800538a:	f200 80bd 	bhi.w	8005508 <HAL_RCC_GetSysClockFreq+0x1a4>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x34>
 8005392:	2b04      	cmp	r3, #4
 8005394:	d003      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x3a>
 8005396:	e0b7      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005398:	4b61      	ldr	r3, [pc, #388]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800539a:	60bb      	str	r3, [r7, #8]
      break;
 800539c:	e0b7      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800539e:	4b60      	ldr	r3, [pc, #384]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053a0:	60bb      	str	r3, [r7, #8]
      break;
 80053a2:	e0b4      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a4:	4b5d      	ldr	r3, [pc, #372]	; (800551c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053ae:	4b5b      	ldr	r3, [pc, #364]	; (800551c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04d      	beq.n	8005456 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ba:	4b58      	ldr	r3, [pc, #352]	; (800551c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	099b      	lsrs	r3, r3, #6
 80053c0:	461a      	mov	r2, r3
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053ca:	f04f 0100 	mov.w	r1, #0
 80053ce:	ea02 0800 	and.w	r8, r2, r0
 80053d2:	ea03 0901 	and.w	r9, r3, r1
 80053d6:	4640      	mov	r0, r8
 80053d8:	4649      	mov	r1, r9
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	014b      	lsls	r3, r1, #5
 80053e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053e8:	0142      	lsls	r2, r0, #5
 80053ea:	4610      	mov	r0, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	ebb0 0008 	subs.w	r0, r0, r8
 80053f2:	eb61 0109 	sbc.w	r1, r1, r9
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	018b      	lsls	r3, r1, #6
 8005400:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005404:	0182      	lsls	r2, r0, #6
 8005406:	1a12      	subs	r2, r2, r0
 8005408:	eb63 0301 	sbc.w	r3, r3, r1
 800540c:	f04f 0000 	mov.w	r0, #0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	00d9      	lsls	r1, r3, #3
 8005416:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800541a:	00d0      	lsls	r0, r2, #3
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	eb12 0208 	adds.w	r2, r2, r8
 8005424:	eb43 0309 	adc.w	r3, r3, r9
 8005428:	f04f 0000 	mov.w	r0, #0
 800542c:	f04f 0100 	mov.w	r1, #0
 8005430:	0299      	lsls	r1, r3, #10
 8005432:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005436:	0290      	lsls	r0, r2, #10
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4610      	mov	r0, r2
 800543e:	4619      	mov	r1, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	461a      	mov	r2, r3
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	f7fa ff62 	bl	8000310 <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4613      	mov	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e04a      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005456:	4b31      	ldr	r3, [pc, #196]	; (800551c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	099b      	lsrs	r3, r3, #6
 800545c:	461a      	mov	r2, r3
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005466:	f04f 0100 	mov.w	r1, #0
 800546a:	ea02 0400 	and.w	r4, r2, r0
 800546e:	ea03 0501 	and.w	r5, r3, r1
 8005472:	4620      	mov	r0, r4
 8005474:	4629      	mov	r1, r5
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	014b      	lsls	r3, r1, #5
 8005480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005484:	0142      	lsls	r2, r0, #5
 8005486:	4610      	mov	r0, r2
 8005488:	4619      	mov	r1, r3
 800548a:	1b00      	subs	r0, r0, r4
 800548c:	eb61 0105 	sbc.w	r1, r1, r5
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	018b      	lsls	r3, r1, #6
 800549a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800549e:	0182      	lsls	r2, r0, #6
 80054a0:	1a12      	subs	r2, r2, r0
 80054a2:	eb63 0301 	sbc.w	r3, r3, r1
 80054a6:	f04f 0000 	mov.w	r0, #0
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	00d9      	lsls	r1, r3, #3
 80054b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b4:	00d0      	lsls	r0, r2, #3
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	1912      	adds	r2, r2, r4
 80054bc:	eb45 0303 	adc.w	r3, r5, r3
 80054c0:	f04f 0000 	mov.w	r0, #0
 80054c4:	f04f 0100 	mov.w	r1, #0
 80054c8:	0299      	lsls	r1, r3, #10
 80054ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80054ce:	0290      	lsls	r0, r2, #10
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4610      	mov	r0, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	461a      	mov	r2, r3
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	f7fa ff16 	bl	8000310 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4613      	mov	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054ec:	4b0b      	ldr	r3, [pc, #44]	; (800551c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	0c1b      	lsrs	r3, r3, #16
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	3301      	adds	r3, #1
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	fbb2 f3f3 	udiv	r3, r2, r3
 8005504:	60bb      	str	r3, [r7, #8]
      break;
 8005506:	e002      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800550a:	60bb      	str	r3, [r7, #8]
      break;
 800550c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550e:	68bb      	ldr	r3, [r7, #8]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800551a:	bf00      	nop
 800551c:	40023800 	.word	0x40023800
 8005520:	00f42400 	.word	0x00f42400

08005524 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <HAL_RCC_GetHCLKFreq+0x14>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000010 	.word	0x20000010

0800553c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005540:	f7ff fff0 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	0a9b      	lsrs	r3, r3, #10
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4903      	ldr	r1, [pc, #12]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40023800 	.word	0x40023800
 8005560:	0800b14c 	.word	0x0800b14c

08005564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005568:	f7ff ffdc 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	0b5b      	lsrs	r3, r3, #13
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4903      	ldr	r1, [pc, #12]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40023800 	.word	0x40023800
 8005588:	0800b14c 	.word	0x0800b14c

0800558c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d012      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055b4:	4b69      	ldr	r3, [pc, #420]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4a68      	ldr	r2, [pc, #416]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055be:	6093      	str	r3, [r2, #8]
 80055c0:	4b66      	ldr	r3, [pc, #408]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	4964      	ldr	r1, [pc, #400]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055d6:	2301      	movs	r3, #1
 80055d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d017      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055e6:	4b5d      	ldr	r3, [pc, #372]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f4:	4959      	ldr	r1, [pc, #356]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005604:	d101      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005606:	2301      	movs	r3, #1
 8005608:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005612:	2301      	movs	r3, #1
 8005614:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d017      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005622:	4b4e      	ldr	r3, [pc, #312]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005628:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	494a      	ldr	r1, [pc, #296]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005640:	d101      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005642:	2301      	movs	r3, #1
 8005644:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800564e:	2301      	movs	r3, #1
 8005650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800565e:	2301      	movs	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 808b 	beq.w	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005670:	4b3a      	ldr	r3, [pc, #232]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	4a39      	ldr	r2, [pc, #228]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567a:	6413      	str	r3, [r2, #64]	; 0x40
 800567c:	4b37      	ldr	r3, [pc, #220]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005688:	4b35      	ldr	r3, [pc, #212]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a34      	ldr	r2, [pc, #208]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800568e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005694:	f7fd fbc2 	bl	8002e1c <HAL_GetTick>
 8005698:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569c:	f7fd fbbe 	bl	8002e1c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b64      	cmp	r3, #100	; 0x64
 80056a8:	d901      	bls.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e38f      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056ae:	4b2c      	ldr	r3, [pc, #176]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0f0      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056ba:	4b28      	ldr	r3, [pc, #160]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d035      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d02e      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056d8:	4b20      	ldr	r3, [pc, #128]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056e2:	4b1e      	ldr	r3, [pc, #120]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	4a1d      	ldr	r2, [pc, #116]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ee:	4b1b      	ldr	r3, [pc, #108]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a1a      	ldr	r2, [pc, #104]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056fa:	4a18      	ldr	r2, [pc, #96]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005700:	4b16      	ldr	r3, [pc, #88]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b01      	cmp	r3, #1
 800570a:	d114      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570c:	f7fd fb86 	bl	8002e1c <HAL_GetTick>
 8005710:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005712:	e00a      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005714:	f7fd fb82 	bl	8002e1c <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e351      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572a:	4b0c      	ldr	r3, [pc, #48]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0ee      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005742:	d111      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005750:	4b04      	ldr	r3, [pc, #16]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005752:	400b      	ands	r3, r1
 8005754:	4901      	ldr	r1, [pc, #4]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005756:	4313      	orrs	r3, r2
 8005758:	608b      	str	r3, [r1, #8]
 800575a:	e00b      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800575c:	40023800 	.word	0x40023800
 8005760:	40007000 	.word	0x40007000
 8005764:	0ffffcff 	.word	0x0ffffcff
 8005768:	4bb3      	ldr	r3, [pc, #716]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	4ab2      	ldr	r2, [pc, #712]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800576e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005772:	6093      	str	r3, [r2, #8]
 8005774:	4bb0      	ldr	r3, [pc, #704]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005776:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005780:	49ad      	ldr	r1, [pc, #692]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005782:	4313      	orrs	r3, r2
 8005784:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b00      	cmp	r3, #0
 8005790:	d010      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005792:	4ba9      	ldr	r3, [pc, #676]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005798:	4aa7      	ldr	r2, [pc, #668]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800579a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80057a2:	4ba5      	ldr	r3, [pc, #660]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	49a2      	ldr	r1, [pc, #648]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c0:	4b9d      	ldr	r3, [pc, #628]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ce:	499a      	ldr	r1, [pc, #616]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057e2:	4b95      	ldr	r3, [pc, #596]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057f0:	4991      	ldr	r1, [pc, #580]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005804:	4b8c      	ldr	r3, [pc, #560]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005812:	4989      	ldr	r1, [pc, #548]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005826:	4b84      	ldr	r3, [pc, #528]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	4980      	ldr	r1, [pc, #512]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005848:	4b7b      	ldr	r3, [pc, #492]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584e:	f023 0203 	bic.w	r2, r3, #3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005856:	4978      	ldr	r1, [pc, #480]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800586a:	4b73      	ldr	r3, [pc, #460]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005870:	f023 020c 	bic.w	r2, r3, #12
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005878:	496f      	ldr	r1, [pc, #444]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800588c:	4b6a      	ldr	r3, [pc, #424]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589a:	4967      	ldr	r1, [pc, #412]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058ae:	4b62      	ldr	r3, [pc, #392]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	495e      	ldr	r1, [pc, #376]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058d0:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	4956      	ldr	r1, [pc, #344]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058f2:	4b51      	ldr	r3, [pc, #324]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005900:	494d      	ldr	r1, [pc, #308]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005914:	4b48      	ldr	r3, [pc, #288]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005922:	4945      	ldr	r1, [pc, #276]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005936:	4b40      	ldr	r3, [pc, #256]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005944:	493c      	ldr	r1, [pc, #240]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005958:	4b37      	ldr	r3, [pc, #220]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005966:	4934      	ldr	r1, [pc, #208]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d011      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800597a:	4b2f      	ldr	r3, [pc, #188]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005980:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005988:	492b      	ldr	r1, [pc, #172]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005998:	d101      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800599a:	2301      	movs	r3, #1
 800599c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80059aa:	2301      	movs	r3, #1
 80059ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059ba:	4b1f      	ldr	r3, [pc, #124]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c8:	491b      	ldr	r1, [pc, #108]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059dc:	4b16      	ldr	r3, [pc, #88]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ec:	4912      	ldr	r1, [pc, #72]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a00:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a10:	4909      	ldr	r1, [pc, #36]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00f      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a24:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	e002      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005a36:	bf00      	nop
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	4986      	ldr	r1, [pc, #536]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a50:	4b81      	ldr	r3, [pc, #516]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a60:	497d      	ldr	r1, [pc, #500]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d006      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 80d6 	beq.w	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a7c:	4b76      	ldr	r3, [pc, #472]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a75      	ldr	r2, [pc, #468]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a88:	f7fd f9c8 	bl	8002e1c <HAL_GetTick>
 8005a8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a90:	f7fd f9c4 	bl	8002e1c <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b64      	cmp	r3, #100	; 0x64
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e195      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aa2:	4b6d      	ldr	r3, [pc, #436]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f0      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d021      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d11d      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ac2:	4b65      	ldr	r3, [pc, #404]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ad0:	4b61      	ldr	r3, [pc, #388]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad6:	0e1b      	lsrs	r3, r3, #24
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	019a      	lsls	r2, r3, #6
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	041b      	lsls	r3, r3, #16
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	061b      	lsls	r3, r3, #24
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	071b      	lsls	r3, r3, #28
 8005af6:	4958      	ldr	r1, [pc, #352]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d02e      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b28:	d129      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b2a:	4b4b      	ldr	r3, [pc, #300]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b30:	0c1b      	lsrs	r3, r3, #16
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b38:	4b47      	ldr	r3, [pc, #284]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3e:	0f1b      	lsrs	r3, r3, #28
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	019a      	lsls	r2, r3, #6
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	061b      	lsls	r3, r3, #24
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	071b      	lsls	r3, r3, #28
 8005b5e:	493e      	ldr	r1, [pc, #248]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b66:	4b3c      	ldr	r3, [pc, #240]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6c:	f023 021f 	bic.w	r2, r3, #31
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	3b01      	subs	r3, #1
 8005b76:	4938      	ldr	r1, [pc, #224]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01d      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b8a:	4b33      	ldr	r3, [pc, #204]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b90:	0e1b      	lsrs	r3, r3, #24
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b98:	4b2f      	ldr	r3, [pc, #188]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9e:	0f1b      	lsrs	r3, r3, #28
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	019a      	lsls	r2, r3, #6
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	061b      	lsls	r3, r3, #24
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	071b      	lsls	r3, r3, #28
 8005bbe:	4926      	ldr	r1, [pc, #152]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d011      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	019a      	lsls	r2, r3, #6
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	061b      	lsls	r3, r3, #24
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	071b      	lsls	r3, r3, #28
 8005bee:	491a      	ldr	r1, [pc, #104]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bf6:	4b18      	ldr	r3, [pc, #96]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c02:	f7fd f90b 	bl	8002e1c <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c0a:	f7fd f907 	bl	8002e1c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b64      	cmp	r3, #100	; 0x64
 8005c16:	d901      	bls.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e0d8      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c1c:	4b0e      	ldr	r3, [pc, #56]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	f040 80ce 	bne.w	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c30:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c3c:	f7fd f8ee 	bl	8002e1c <HAL_GetTick>
 8005c40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c42:	e00b      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c44:	f7fd f8ea 	bl	8002e1c <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b64      	cmp	r3, #100	; 0x64
 8005c50:	d904      	bls.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e0bb      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c56:	bf00      	nop
 8005c58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c5c:	4b5e      	ldr	r3, [pc, #376]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c68:	d0ec      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d02e      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d12a      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c92:	4b51      	ldr	r3, [pc, #324]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	0c1b      	lsrs	r3, r3, #16
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ca0:	4b4d      	ldr	r3, [pc, #308]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	0f1b      	lsrs	r3, r3, #28
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	019a      	lsls	r2, r3, #6
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	041b      	lsls	r3, r3, #16
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	061b      	lsls	r3, r3, #24
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	071b      	lsls	r3, r3, #28
 8005cc6:	4944      	ldr	r1, [pc, #272]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cce:	4b42      	ldr	r3, [pc, #264]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	493d      	ldr	r1, [pc, #244]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d022      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cfc:	d11d      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cfe:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	0e1b      	lsrs	r3, r3, #24
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d0c:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	0f1b      	lsrs	r3, r3, #28
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	019a      	lsls	r2, r3, #6
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	041b      	lsls	r3, r3, #16
 8005d26:	431a      	orrs	r2, r3
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	061b      	lsls	r3, r3, #24
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	071b      	lsls	r3, r3, #28
 8005d32:	4929      	ldr	r1, [pc, #164]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d028      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d46:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4c:	0e1b      	lsrs	r3, r3, #24
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d54:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	0c1b      	lsrs	r3, r3, #16
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	019a      	lsls	r2, r3, #6
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	041b      	lsls	r3, r3, #16
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	061b      	lsls	r3, r3, #24
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	071b      	lsls	r3, r3, #28
 8005d7a:	4917      	ldr	r1, [pc, #92]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	4911      	ldr	r1, [pc, #68]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0e      	ldr	r2, [pc, #56]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005da4:	f7fd f83a 	bl	8002e1c <HAL_GetTick>
 8005da8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005daa:	e008      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005dac:	f7fd f836 	bl	8002e1c <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b64      	cmp	r3, #100	; 0x64
 8005db8:	d901      	bls.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e007      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dca:	d1ef      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40023800 	.word	0x40023800

08005ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e049      	b.n	8005e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fc fccc 	bl	80027a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f000 fb68 	bl	80064f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d001      	beq.n	8005ea4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e04c      	b.n	8005f3e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a26      	ldr	r2, [pc, #152]	; (8005f4c <HAL_TIM_Base_Start+0xc0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d022      	beq.n	8005efc <HAL_TIM_Base_Start+0x70>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebe:	d01d      	beq.n	8005efc <HAL_TIM_Base_Start+0x70>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <HAL_TIM_Base_Start+0xc4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d018      	beq.n	8005efc <HAL_TIM_Base_Start+0x70>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a21      	ldr	r2, [pc, #132]	; (8005f54 <HAL_TIM_Base_Start+0xc8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d013      	beq.n	8005efc <HAL_TIM_Base_Start+0x70>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1f      	ldr	r2, [pc, #124]	; (8005f58 <HAL_TIM_Base_Start+0xcc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00e      	beq.n	8005efc <HAL_TIM_Base_Start+0x70>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1e      	ldr	r2, [pc, #120]	; (8005f5c <HAL_TIM_Base_Start+0xd0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d009      	beq.n	8005efc <HAL_TIM_Base_Start+0x70>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1c      	ldr	r2, [pc, #112]	; (8005f60 <HAL_TIM_Base_Start+0xd4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d004      	beq.n	8005efc <HAL_TIM_Base_Start+0x70>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <HAL_TIM_Base_Start+0xd8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d115      	bne.n	8005f28 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	4b19      	ldr	r3, [pc, #100]	; (8005f68 <HAL_TIM_Base_Start+0xdc>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b06      	cmp	r3, #6
 8005f0c:	d015      	beq.n	8005f3a <HAL_TIM_Base_Start+0xae>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f14:	d011      	beq.n	8005f3a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0201 	orr.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f26:	e008      	b.n	8005f3a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	e000      	b.n	8005f3c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40001800 	.word	0x40001800
 8005f68:	00010007 	.word	0x00010007

08005f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d001      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e054      	b.n	800602e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a26      	ldr	r2, [pc, #152]	; (800603c <HAL_TIM_Base_Start_IT+0xd0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d022      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d01d      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a22      	ldr	r2, [pc, #136]	; (8006040 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d018      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a21      	ldr	r2, [pc, #132]	; (8006044 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1e      	ldr	r2, [pc, #120]	; (800604c <HAL_TIM_Base_Start_IT+0xe0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <HAL_TIM_Base_Start_IT+0xe4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1b      	ldr	r2, [pc, #108]	; (8006054 <HAL_TIM_Base_Start_IT+0xe8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d115      	bne.n	8006018 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	4b19      	ldr	r3, [pc, #100]	; (8006058 <HAL_TIM_Base_Start_IT+0xec>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b06      	cmp	r3, #6
 8005ffc:	d015      	beq.n	800602a <HAL_TIM_Base_Start_IT+0xbe>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006004:	d011      	beq.n	800602a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0201 	orr.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006016:	e008      	b.n	800602a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e000      	b.n	800602c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40010000 	.word	0x40010000
 8006040:	40000400 	.word	0x40000400
 8006044:	40000800 	.word	0x40000800
 8006048:	40000c00 	.word	0x40000c00
 800604c:	40010400 	.word	0x40010400
 8006050:	40014000 	.word	0x40014000
 8006054:	40001800 	.word	0x40001800
 8006058:	00010007 	.word	0x00010007

0800605c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6a1a      	ldr	r2, [r3, #32]
 800607a:	f241 1311 	movw	r3, #4369	; 0x1111
 800607e:	4013      	ands	r3, r2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10f      	bne.n	80060a4 <HAL_TIM_Base_Stop_IT+0x48>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	f240 4344 	movw	r3, #1092	; 0x444
 800608e:	4013      	ands	r3, r2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d107      	bne.n	80060a4 <HAL_TIM_Base_Stop_IT+0x48>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d122      	bne.n	8006116 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d11b      	bne.n	8006116 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f06f 0202 	mvn.w	r2, #2
 80060e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f003 0303 	and.w	r3, r3, #3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f9d9 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 8006102:	e005      	b.n	8006110 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f9cb 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f9dc 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b04      	cmp	r3, #4
 8006122:	d122      	bne.n	800616a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b04      	cmp	r3, #4
 8006130:	d11b      	bne.n	800616a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f06f 0204 	mvn.w	r2, #4
 800613a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f9af 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 8006156:	e005      	b.n	8006164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f9a1 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f9b2 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b08      	cmp	r3, #8
 8006176:	d122      	bne.n	80061be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b08      	cmp	r3, #8
 8006184:	d11b      	bne.n	80061be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f06f 0208 	mvn.w	r2, #8
 800618e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2204      	movs	r2, #4
 8006194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f985 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 80061aa:	e005      	b.n	80061b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f977 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f988 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d122      	bne.n	8006212 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	2b10      	cmp	r3, #16
 80061d8:	d11b      	bne.n	8006212 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f06f 0210 	mvn.w	r2, #16
 80061e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2208      	movs	r2, #8
 80061e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f95b 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 80061fe:	e005      	b.n	800620c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f94d 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f95e 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b01      	cmp	r3, #1
 800621e:	d10e      	bne.n	800623e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b01      	cmp	r3, #1
 800622c:	d107      	bne.n	800623e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f06f 0201 	mvn.w	r2, #1
 8006236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f927 	bl	800648c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006248:	2b80      	cmp	r3, #128	; 0x80
 800624a:	d10e      	bne.n	800626a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b80      	cmp	r3, #128	; 0x80
 8006258:	d107      	bne.n	800626a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fb15 	bl	8006894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006278:	d10e      	bne.n	8006298 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d107      	bne.n	8006298 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fb08 	bl	80068a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d10e      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	d107      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f90c 	bl	80064dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d10e      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d107      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0220 	mvn.w	r2, #32
 80062e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fac8 	bl	8006880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_TIM_ConfigClockSource+0x1c>
 8006310:	2302      	movs	r3, #2
 8006312:	e0b4      	b.n	800647e <HAL_TIM_ConfigClockSource+0x186>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	4b56      	ldr	r3, [pc, #344]	; (8006488 <HAL_TIM_ConfigClockSource+0x190>)
 8006330:	4013      	ands	r3, r2
 8006332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800633a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634c:	d03e      	beq.n	80063cc <HAL_TIM_ConfigClockSource+0xd4>
 800634e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006352:	f200 8087 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x16c>
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635a:	f000 8086 	beq.w	800646a <HAL_TIM_ConfigClockSource+0x172>
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006362:	d87f      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b70      	cmp	r3, #112	; 0x70
 8006366:	d01a      	beq.n	800639e <HAL_TIM_ConfigClockSource+0xa6>
 8006368:	2b70      	cmp	r3, #112	; 0x70
 800636a:	d87b      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x16c>
 800636c:	2b60      	cmp	r3, #96	; 0x60
 800636e:	d050      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x11a>
 8006370:	2b60      	cmp	r3, #96	; 0x60
 8006372:	d877      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x16c>
 8006374:	2b50      	cmp	r3, #80	; 0x50
 8006376:	d03c      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0xfa>
 8006378:	2b50      	cmp	r3, #80	; 0x50
 800637a:	d873      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x16c>
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d058      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x13a>
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	d86f      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x16c>
 8006384:	2b30      	cmp	r3, #48	; 0x30
 8006386:	d064      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x15a>
 8006388:	2b30      	cmp	r3, #48	; 0x30
 800638a:	d86b      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x16c>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d060      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x15a>
 8006390:	2b20      	cmp	r3, #32
 8006392:	d867      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x16c>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d05c      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x15a>
 8006398:	2b10      	cmp	r3, #16
 800639a:	d05a      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x15a>
 800639c:	e062      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6899      	ldr	r1, [r3, #8]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f000 f9b9 	bl	8006724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	609a      	str	r2, [r3, #8]
      break;
 80063ca:	e04f      	b.n	800646c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6899      	ldr	r1, [r3, #8]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f000 f9a2 	bl	8006724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ee:	609a      	str	r2, [r3, #8]
      break;
 80063f0:	e03c      	b.n	800646c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6859      	ldr	r1, [r3, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	461a      	mov	r2, r3
 8006400:	f000 f916 	bl	8006630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2150      	movs	r1, #80	; 0x50
 800640a:	4618      	mov	r0, r3
 800640c:	f000 f96f 	bl	80066ee <TIM_ITRx_SetConfig>
      break;
 8006410:	e02c      	b.n	800646c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6859      	ldr	r1, [r3, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	461a      	mov	r2, r3
 8006420:	f000 f935 	bl	800668e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2160      	movs	r1, #96	; 0x60
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f95f 	bl	80066ee <TIM_ITRx_SetConfig>
      break;
 8006430:	e01c      	b.n	800646c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6859      	ldr	r1, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	461a      	mov	r2, r3
 8006440:	f000 f8f6 	bl	8006630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2140      	movs	r1, #64	; 0x40
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f94f 	bl	80066ee <TIM_ITRx_SetConfig>
      break;
 8006450:	e00c      	b.n	800646c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f000 f946 	bl	80066ee <TIM_ITRx_SetConfig>
      break;
 8006462:	e003      	b.n	800646c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
      break;
 8006468:	e000      	b.n	800646c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800646a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	fffeff88 	.word	0xfffeff88

0800648c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a40      	ldr	r2, [pc, #256]	; (8006604 <TIM_Base_SetConfig+0x114>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650e:	d00f      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a3d      	ldr	r2, [pc, #244]	; (8006608 <TIM_Base_SetConfig+0x118>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00b      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a3c      	ldr	r2, [pc, #240]	; (800660c <TIM_Base_SetConfig+0x11c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d007      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a3b      	ldr	r2, [pc, #236]	; (8006610 <TIM_Base_SetConfig+0x120>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a3a      	ldr	r2, [pc, #232]	; (8006614 <TIM_Base_SetConfig+0x124>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d108      	bne.n	8006542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a2f      	ldr	r2, [pc, #188]	; (8006604 <TIM_Base_SetConfig+0x114>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d02b      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006550:	d027      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a2c      	ldr	r2, [pc, #176]	; (8006608 <TIM_Base_SetConfig+0x118>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d023      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a2b      	ldr	r2, [pc, #172]	; (800660c <TIM_Base_SetConfig+0x11c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d01f      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a2a      	ldr	r2, [pc, #168]	; (8006610 <TIM_Base_SetConfig+0x120>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d01b      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a29      	ldr	r2, [pc, #164]	; (8006614 <TIM_Base_SetConfig+0x124>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d017      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a28      	ldr	r2, [pc, #160]	; (8006618 <TIM_Base_SetConfig+0x128>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a27      	ldr	r2, [pc, #156]	; (800661c <TIM_Base_SetConfig+0x12c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00f      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a26      	ldr	r2, [pc, #152]	; (8006620 <TIM_Base_SetConfig+0x130>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00b      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a25      	ldr	r2, [pc, #148]	; (8006624 <TIM_Base_SetConfig+0x134>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a24      	ldr	r2, [pc, #144]	; (8006628 <TIM_Base_SetConfig+0x138>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_Base_SetConfig+0xb2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a23      	ldr	r2, [pc, #140]	; (800662c <TIM_Base_SetConfig+0x13c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d108      	bne.n	80065b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a0a      	ldr	r2, [pc, #40]	; (8006604 <TIM_Base_SetConfig+0x114>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_Base_SetConfig+0xf8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a0c      	ldr	r2, [pc, #48]	; (8006614 <TIM_Base_SetConfig+0x124>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d103      	bne.n	80065f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	615a      	str	r2, [r3, #20]
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800
 8006610:	40000c00 	.word	0x40000c00
 8006614:	40010400 	.word	0x40010400
 8006618:	40014000 	.word	0x40014000
 800661c:	40014400 	.word	0x40014400
 8006620:	40014800 	.word	0x40014800
 8006624:	40001800 	.word	0x40001800
 8006628:	40001c00 	.word	0x40001c00
 800662c:	40002000 	.word	0x40002000

08006630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	f023 0201 	bic.w	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800665a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f023 030a 	bic.w	r3, r3, #10
 800666c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	621a      	str	r2, [r3, #32]
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800668e:	b480      	push	{r7}
 8006690:	b087      	sub	sp, #28
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f023 0210 	bic.w	r2, r3, #16
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	031b      	lsls	r3, r3, #12
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	f043 0307 	orr.w	r3, r3, #7
 8006710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	609a      	str	r2, [r3, #8]
}
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800673e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	021a      	lsls	r2, r3, #8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	431a      	orrs	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4313      	orrs	r3, r2
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	4313      	orrs	r3, r2
 8006750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	609a      	str	r2, [r3, #8]
}
 8006758:	bf00      	nop
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006778:	2302      	movs	r3, #2
 800677a:	e06d      	b.n	8006858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a30      	ldr	r2, [pc, #192]	; (8006864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d004      	beq.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a2f      	ldr	r2, [pc, #188]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d108      	bne.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a20      	ldr	r2, [pc, #128]	; (8006864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d022      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ee:	d01d      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1d      	ldr	r2, [pc, #116]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d018      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d013      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00e      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a15      	ldr	r2, [pc, #84]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d009      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a16      	ldr	r2, [pc, #88]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a15      	ldr	r2, [pc, #84]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d10c      	bne.n	8006846 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	4313      	orrs	r3, r2
 800683c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40010000 	.word	0x40010000
 8006868:	40010400 	.word	0x40010400
 800686c:	40000400 	.word	0x40000400
 8006870:	40000800 	.word	0x40000800
 8006874:	40000c00 	.word	0x40000c00
 8006878:	40014000 	.word	0x40014000
 800687c:	40001800 	.word	0x40001800

08006880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e040      	b.n	8006950 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7fc f832 	bl	8002948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2224      	movs	r2, #36	; 0x24
 80068e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0201 	bic.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fbf2 	bl	80070e4 <UART_SetConfig>
 8006900:	4603      	mov	r3, r0
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e022      	b.n	8006950 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fe48 	bl	80075a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fecf 	bl	80076ec <UART_CheckIdleState>
 800694e:	4603      	mov	r3, r0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006958:	b480      	push	{r7}
 800695a:	b08b      	sub	sp, #44	; 0x2c
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800696a:	2b20      	cmp	r3, #32
 800696c:	d156      	bne.n	8006a1c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <HAL_UART_Transmit_IT+0x22>
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e04f      	b.n	8006a1e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <HAL_UART_Transmit_IT+0x34>
 8006988:	2302      	movs	r3, #2
 800698a:	e048      	b.n	8006a1e <HAL_UART_Transmit_IT+0xc6>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	88fa      	ldrh	r2, [r7, #6]
 800699e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	88fa      	ldrh	r2, [r7, #6]
 80069a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2221      	movs	r2, #33	; 0x21
 80069bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c6:	d107      	bne.n	80069d8 <HAL_UART_Transmit_IT+0x80>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <HAL_UART_Transmit_IT+0xd4>)
 80069d4:	669a      	str	r2, [r3, #104]	; 0x68
 80069d6:	e002      	b.n	80069de <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <HAL_UART_Transmit_IT+0xd8>)
 80069dc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	613b      	str	r3, [r7, #16]
   return(result);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	623b      	str	r3, [r7, #32]
 8006a06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	69f9      	ldr	r1, [r7, #28]
 8006a0a:	6a3a      	ldr	r2, [r7, #32]
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e6      	bne.n	80069e6 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e000      	b.n	8006a1e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006a1c:	2302      	movs	r3, #2
  }
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	372c      	adds	r7, #44	; 0x2c
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	08007c45 	.word	0x08007c45
 8006a30:	08007b8f 	.word	0x08007b8f

08006a34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d13d      	bne.n	8006ac6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <HAL_UART_Receive_IT+0x22>
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e036      	b.n	8006ac8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_UART_Receive_IT+0x34>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e02f      	b.n	8006ac8 <HAL_UART_Receive_IT+0x94>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d018      	beq.n	8006ab6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	613b      	str	r3, [r7, #16]
   return(result);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	623b      	str	r3, [r7, #32]
 8006aa4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	69f9      	ldr	r1, [r7, #28]
 8006aa8:	6a3a      	ldr	r2, [r7, #32]
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e6      	bne.n	8006a84 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 ff23 	bl	8007908 <UART_Start_Receive_IT>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	e000      	b.n	8006ac8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ac6:	2302      	movs	r3, #2
  }
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3728      	adds	r7, #40	; 0x28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b0ba      	sub	sp, #232	; 0xe8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006af6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006afa:	f640 030f 	movw	r3, #2063	; 0x80f
 8006afe:	4013      	ands	r3, r2
 8006b00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d115      	bne.n	8006b38 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00f      	beq.n	8006b38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d009      	beq.n	8006b38 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 82a4 	beq.w	8007076 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
      }
      return;
 8006b36:	e29e      	b.n	8007076 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8117 	beq.w	8006d70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b52:	4b85      	ldr	r3, [pc, #532]	; (8006d68 <HAL_UART_IRQHandler+0x298>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 810a 	beq.w	8006d70 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <HAL_UART_IRQHandler+0xbc>
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b82:	f043 0201 	orr.w	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d011      	beq.n	8006bbc <HAL_UART_IRQHandler+0xec>
 8006b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb2:	f043 0204 	orr.w	r2, r3, #4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d011      	beq.n	8006bec <HAL_UART_IRQHandler+0x11c>
 8006bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2204      	movs	r2, #4
 8006bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be2:	f043 0202 	orr.w	r2, r3, #2
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d017      	beq.n	8006c28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d105      	bne.n	8006c10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2208      	movs	r2, #8
 8006c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c1e:	f043 0208 	orr.w	r2, r3, #8
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d012      	beq.n	8006c5a <HAL_UART_IRQHandler+0x18a>
 8006c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00c      	beq.n	8006c5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c50:	f043 0220 	orr.w	r2, r3, #32
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 820a 	beq.w	800707a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d005      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006caa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d04f      	beq.n	8006d52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fef2 	bl	8007a9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d141      	bne.n	8006d4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3308      	adds	r3, #8
 8006ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3308      	adds	r3, #8
 8006cee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1d9      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d013      	beq.n	8006d42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <HAL_UART_IRQHandler+0x29c>)
 8006d20:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fd fac8 	bl	80042bc <HAL_DMA_Abort_IT>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d017      	beq.n	8006d62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d40:	e00f      	b.n	8006d62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f9ae 	bl	80070a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d48:	e00b      	b.n	8006d62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f9aa 	bl	80070a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d50:	e007      	b.n	8006d62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f9a6 	bl	80070a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006d60:	e18b      	b.n	800707a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d62:	bf00      	nop
    return;
 8006d64:	e189      	b.n	800707a <HAL_UART_IRQHandler+0x5aa>
 8006d66:	bf00      	nop
 8006d68:	04000120 	.word	0x04000120
 8006d6c:	08007b63 	.word	0x08007b63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	f040 8144 	bne.w	8007002 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 813d 	beq.w	8007002 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8136 	beq.w	8007002 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2210      	movs	r2, #16
 8006d9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b40      	cmp	r3, #64	; 0x40
 8006daa:	f040 80b2 	bne.w	8006f12 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 815d 	beq.w	800707e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	f080 8155 	bcs.w	800707e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de8:	f000 8085 	beq.w	8006ef6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1da      	bne.n	8006dec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3308      	adds	r3, #8
 8006e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e1      	bne.n	8006e36 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3308      	adds	r3, #8
 8006e78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3308      	adds	r3, #8
 8006e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e3      	bne.n	8006e72 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec6:	f023 0310 	bic.w	r3, r3, #16
 8006eca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ed8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ede:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e4      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fd f973 	bl	80041dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f8d4 	bl	80070b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f10:	e0b5      	b.n	800707e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80a7 	beq.w	8007082 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 80a2 	beq.w	8007082 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f60:	647b      	str	r3, [r7, #68]	; 0x44
 8006f62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e4      	bne.n	8006f3e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	623b      	str	r3, [r7, #32]
   return(result);
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	f023 0301 	bic.w	r3, r3, #1
 8006f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3308      	adds	r3, #8
 8006f94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f98:	633a      	str	r2, [r7, #48]	; 0x30
 8006f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e3      	bne.n	8006f74 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0310 	bic.w	r3, r3, #16
 8006fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	69b9      	ldr	r1, [r7, #24]
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	617b      	str	r3, [r7, #20]
   return(result);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e4      	bne.n	8006fbe <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f85c 	bl	80070b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007000:	e03f      	b.n	8007082 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00e      	beq.n	800702c <HAL_UART_IRQHandler+0x55c>
 800700e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d008      	beq.n	800702c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007022:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f853 	bl	80070d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800702a:	e02d      	b.n	8007088 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800702c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00e      	beq.n	8007056 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800703c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007040:	2b00      	cmp	r3, #0
 8007042:	d008      	beq.n	8007056 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01c      	beq.n	8007086 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	4798      	blx	r3
    }
    return;
 8007054:	e017      	b.n	8007086 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d012      	beq.n	8007088 <HAL_UART_IRQHandler+0x5b8>
 8007062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00c      	beq.n	8007088 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fe48 	bl	8007d04 <UART_EndTransmit_IT>
    return;
 8007074:	e008      	b.n	8007088 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007076:	bf00      	nop
 8007078:	e006      	b.n	8007088 <HAL_UART_IRQHandler+0x5b8>
    return;
 800707a:	bf00      	nop
 800707c:	e004      	b.n	8007088 <HAL_UART_IRQHandler+0x5b8>
      return;
 800707e:	bf00      	nop
 8007080:	e002      	b.n	8007088 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007082:	bf00      	nop
 8007084:	e000      	b.n	8007088 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007086:	bf00      	nop
  }

}
 8007088:	37e8      	adds	r7, #232	; 0xe8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop

08007090 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4ba7      	ldr	r3, [pc, #668]	; (80073ac <UART_SetConfig+0x2c8>)
 8007110:	4013      	ands	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6812      	ldr	r2, [r2, #0]
 8007116:	6979      	ldr	r1, [r7, #20]
 8007118:	430b      	orrs	r3, r1
 800711a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	430a      	orrs	r2, r1
 8007154:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a95      	ldr	r2, [pc, #596]	; (80073b0 <UART_SetConfig+0x2cc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d120      	bne.n	80071a2 <UART_SetConfig+0xbe>
 8007160:	4b94      	ldr	r3, [pc, #592]	; (80073b4 <UART_SetConfig+0x2d0>)
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	2b03      	cmp	r3, #3
 800716c:	d816      	bhi.n	800719c <UART_SetConfig+0xb8>
 800716e:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <UART_SetConfig+0x90>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	08007185 	.word	0x08007185
 8007178:	08007191 	.word	0x08007191
 800717c:	0800718b 	.word	0x0800718b
 8007180:	08007197 	.word	0x08007197
 8007184:	2301      	movs	r3, #1
 8007186:	77fb      	strb	r3, [r7, #31]
 8007188:	e14f      	b.n	800742a <UART_SetConfig+0x346>
 800718a:	2302      	movs	r3, #2
 800718c:	77fb      	strb	r3, [r7, #31]
 800718e:	e14c      	b.n	800742a <UART_SetConfig+0x346>
 8007190:	2304      	movs	r3, #4
 8007192:	77fb      	strb	r3, [r7, #31]
 8007194:	e149      	b.n	800742a <UART_SetConfig+0x346>
 8007196:	2308      	movs	r3, #8
 8007198:	77fb      	strb	r3, [r7, #31]
 800719a:	e146      	b.n	800742a <UART_SetConfig+0x346>
 800719c:	2310      	movs	r3, #16
 800719e:	77fb      	strb	r3, [r7, #31]
 80071a0:	e143      	b.n	800742a <UART_SetConfig+0x346>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a84      	ldr	r2, [pc, #528]	; (80073b8 <UART_SetConfig+0x2d4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d132      	bne.n	8007212 <UART_SetConfig+0x12e>
 80071ac:	4b81      	ldr	r3, [pc, #516]	; (80073b4 <UART_SetConfig+0x2d0>)
 80071ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b2:	f003 030c 	and.w	r3, r3, #12
 80071b6:	2b0c      	cmp	r3, #12
 80071b8:	d828      	bhi.n	800720c <UART_SetConfig+0x128>
 80071ba:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <UART_SetConfig+0xdc>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	080071f5 	.word	0x080071f5
 80071c4:	0800720d 	.word	0x0800720d
 80071c8:	0800720d 	.word	0x0800720d
 80071cc:	0800720d 	.word	0x0800720d
 80071d0:	08007201 	.word	0x08007201
 80071d4:	0800720d 	.word	0x0800720d
 80071d8:	0800720d 	.word	0x0800720d
 80071dc:	0800720d 	.word	0x0800720d
 80071e0:	080071fb 	.word	0x080071fb
 80071e4:	0800720d 	.word	0x0800720d
 80071e8:	0800720d 	.word	0x0800720d
 80071ec:	0800720d 	.word	0x0800720d
 80071f0:	08007207 	.word	0x08007207
 80071f4:	2300      	movs	r3, #0
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e117      	b.n	800742a <UART_SetConfig+0x346>
 80071fa:	2302      	movs	r3, #2
 80071fc:	77fb      	strb	r3, [r7, #31]
 80071fe:	e114      	b.n	800742a <UART_SetConfig+0x346>
 8007200:	2304      	movs	r3, #4
 8007202:	77fb      	strb	r3, [r7, #31]
 8007204:	e111      	b.n	800742a <UART_SetConfig+0x346>
 8007206:	2308      	movs	r3, #8
 8007208:	77fb      	strb	r3, [r7, #31]
 800720a:	e10e      	b.n	800742a <UART_SetConfig+0x346>
 800720c:	2310      	movs	r3, #16
 800720e:	77fb      	strb	r3, [r7, #31]
 8007210:	e10b      	b.n	800742a <UART_SetConfig+0x346>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a69      	ldr	r2, [pc, #420]	; (80073bc <UART_SetConfig+0x2d8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d120      	bne.n	800725e <UART_SetConfig+0x17a>
 800721c:	4b65      	ldr	r3, [pc, #404]	; (80073b4 <UART_SetConfig+0x2d0>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007226:	2b30      	cmp	r3, #48	; 0x30
 8007228:	d013      	beq.n	8007252 <UART_SetConfig+0x16e>
 800722a:	2b30      	cmp	r3, #48	; 0x30
 800722c:	d814      	bhi.n	8007258 <UART_SetConfig+0x174>
 800722e:	2b20      	cmp	r3, #32
 8007230:	d009      	beq.n	8007246 <UART_SetConfig+0x162>
 8007232:	2b20      	cmp	r3, #32
 8007234:	d810      	bhi.n	8007258 <UART_SetConfig+0x174>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <UART_SetConfig+0x15c>
 800723a:	2b10      	cmp	r3, #16
 800723c:	d006      	beq.n	800724c <UART_SetConfig+0x168>
 800723e:	e00b      	b.n	8007258 <UART_SetConfig+0x174>
 8007240:	2300      	movs	r3, #0
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e0f1      	b.n	800742a <UART_SetConfig+0x346>
 8007246:	2302      	movs	r3, #2
 8007248:	77fb      	strb	r3, [r7, #31]
 800724a:	e0ee      	b.n	800742a <UART_SetConfig+0x346>
 800724c:	2304      	movs	r3, #4
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e0eb      	b.n	800742a <UART_SetConfig+0x346>
 8007252:	2308      	movs	r3, #8
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	e0e8      	b.n	800742a <UART_SetConfig+0x346>
 8007258:	2310      	movs	r3, #16
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e0e5      	b.n	800742a <UART_SetConfig+0x346>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a57      	ldr	r2, [pc, #348]	; (80073c0 <UART_SetConfig+0x2dc>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d120      	bne.n	80072aa <UART_SetConfig+0x1c6>
 8007268:	4b52      	ldr	r3, [pc, #328]	; (80073b4 <UART_SetConfig+0x2d0>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007272:	2bc0      	cmp	r3, #192	; 0xc0
 8007274:	d013      	beq.n	800729e <UART_SetConfig+0x1ba>
 8007276:	2bc0      	cmp	r3, #192	; 0xc0
 8007278:	d814      	bhi.n	80072a4 <UART_SetConfig+0x1c0>
 800727a:	2b80      	cmp	r3, #128	; 0x80
 800727c:	d009      	beq.n	8007292 <UART_SetConfig+0x1ae>
 800727e:	2b80      	cmp	r3, #128	; 0x80
 8007280:	d810      	bhi.n	80072a4 <UART_SetConfig+0x1c0>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <UART_SetConfig+0x1a8>
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d006      	beq.n	8007298 <UART_SetConfig+0x1b4>
 800728a:	e00b      	b.n	80072a4 <UART_SetConfig+0x1c0>
 800728c:	2300      	movs	r3, #0
 800728e:	77fb      	strb	r3, [r7, #31]
 8007290:	e0cb      	b.n	800742a <UART_SetConfig+0x346>
 8007292:	2302      	movs	r3, #2
 8007294:	77fb      	strb	r3, [r7, #31]
 8007296:	e0c8      	b.n	800742a <UART_SetConfig+0x346>
 8007298:	2304      	movs	r3, #4
 800729a:	77fb      	strb	r3, [r7, #31]
 800729c:	e0c5      	b.n	800742a <UART_SetConfig+0x346>
 800729e:	2308      	movs	r3, #8
 80072a0:	77fb      	strb	r3, [r7, #31]
 80072a2:	e0c2      	b.n	800742a <UART_SetConfig+0x346>
 80072a4:	2310      	movs	r3, #16
 80072a6:	77fb      	strb	r3, [r7, #31]
 80072a8:	e0bf      	b.n	800742a <UART_SetConfig+0x346>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a45      	ldr	r2, [pc, #276]	; (80073c4 <UART_SetConfig+0x2e0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d125      	bne.n	8007300 <UART_SetConfig+0x21c>
 80072b4:	4b3f      	ldr	r3, [pc, #252]	; (80073b4 <UART_SetConfig+0x2d0>)
 80072b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c2:	d017      	beq.n	80072f4 <UART_SetConfig+0x210>
 80072c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c8:	d817      	bhi.n	80072fa <UART_SetConfig+0x216>
 80072ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ce:	d00b      	beq.n	80072e8 <UART_SetConfig+0x204>
 80072d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d4:	d811      	bhi.n	80072fa <UART_SetConfig+0x216>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <UART_SetConfig+0x1fe>
 80072da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072de:	d006      	beq.n	80072ee <UART_SetConfig+0x20a>
 80072e0:	e00b      	b.n	80072fa <UART_SetConfig+0x216>
 80072e2:	2300      	movs	r3, #0
 80072e4:	77fb      	strb	r3, [r7, #31]
 80072e6:	e0a0      	b.n	800742a <UART_SetConfig+0x346>
 80072e8:	2302      	movs	r3, #2
 80072ea:	77fb      	strb	r3, [r7, #31]
 80072ec:	e09d      	b.n	800742a <UART_SetConfig+0x346>
 80072ee:	2304      	movs	r3, #4
 80072f0:	77fb      	strb	r3, [r7, #31]
 80072f2:	e09a      	b.n	800742a <UART_SetConfig+0x346>
 80072f4:	2308      	movs	r3, #8
 80072f6:	77fb      	strb	r3, [r7, #31]
 80072f8:	e097      	b.n	800742a <UART_SetConfig+0x346>
 80072fa:	2310      	movs	r3, #16
 80072fc:	77fb      	strb	r3, [r7, #31]
 80072fe:	e094      	b.n	800742a <UART_SetConfig+0x346>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a30      	ldr	r2, [pc, #192]	; (80073c8 <UART_SetConfig+0x2e4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d125      	bne.n	8007356 <UART_SetConfig+0x272>
 800730a:	4b2a      	ldr	r3, [pc, #168]	; (80073b4 <UART_SetConfig+0x2d0>)
 800730c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007310:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007318:	d017      	beq.n	800734a <UART_SetConfig+0x266>
 800731a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800731e:	d817      	bhi.n	8007350 <UART_SetConfig+0x26c>
 8007320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007324:	d00b      	beq.n	800733e <UART_SetConfig+0x25a>
 8007326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800732a:	d811      	bhi.n	8007350 <UART_SetConfig+0x26c>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <UART_SetConfig+0x254>
 8007330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007334:	d006      	beq.n	8007344 <UART_SetConfig+0x260>
 8007336:	e00b      	b.n	8007350 <UART_SetConfig+0x26c>
 8007338:	2301      	movs	r3, #1
 800733a:	77fb      	strb	r3, [r7, #31]
 800733c:	e075      	b.n	800742a <UART_SetConfig+0x346>
 800733e:	2302      	movs	r3, #2
 8007340:	77fb      	strb	r3, [r7, #31]
 8007342:	e072      	b.n	800742a <UART_SetConfig+0x346>
 8007344:	2304      	movs	r3, #4
 8007346:	77fb      	strb	r3, [r7, #31]
 8007348:	e06f      	b.n	800742a <UART_SetConfig+0x346>
 800734a:	2308      	movs	r3, #8
 800734c:	77fb      	strb	r3, [r7, #31]
 800734e:	e06c      	b.n	800742a <UART_SetConfig+0x346>
 8007350:	2310      	movs	r3, #16
 8007352:	77fb      	strb	r3, [r7, #31]
 8007354:	e069      	b.n	800742a <UART_SetConfig+0x346>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1c      	ldr	r2, [pc, #112]	; (80073cc <UART_SetConfig+0x2e8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d137      	bne.n	80073d0 <UART_SetConfig+0x2ec>
 8007360:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <UART_SetConfig+0x2d0>)
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007366:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800736a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800736e:	d017      	beq.n	80073a0 <UART_SetConfig+0x2bc>
 8007370:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007374:	d817      	bhi.n	80073a6 <UART_SetConfig+0x2c2>
 8007376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737a:	d00b      	beq.n	8007394 <UART_SetConfig+0x2b0>
 800737c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007380:	d811      	bhi.n	80073a6 <UART_SetConfig+0x2c2>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <UART_SetConfig+0x2aa>
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738a:	d006      	beq.n	800739a <UART_SetConfig+0x2b6>
 800738c:	e00b      	b.n	80073a6 <UART_SetConfig+0x2c2>
 800738e:	2300      	movs	r3, #0
 8007390:	77fb      	strb	r3, [r7, #31]
 8007392:	e04a      	b.n	800742a <UART_SetConfig+0x346>
 8007394:	2302      	movs	r3, #2
 8007396:	77fb      	strb	r3, [r7, #31]
 8007398:	e047      	b.n	800742a <UART_SetConfig+0x346>
 800739a:	2304      	movs	r3, #4
 800739c:	77fb      	strb	r3, [r7, #31]
 800739e:	e044      	b.n	800742a <UART_SetConfig+0x346>
 80073a0:	2308      	movs	r3, #8
 80073a2:	77fb      	strb	r3, [r7, #31]
 80073a4:	e041      	b.n	800742a <UART_SetConfig+0x346>
 80073a6:	2310      	movs	r3, #16
 80073a8:	77fb      	strb	r3, [r7, #31]
 80073aa:	e03e      	b.n	800742a <UART_SetConfig+0x346>
 80073ac:	efff69f3 	.word	0xefff69f3
 80073b0:	40011000 	.word	0x40011000
 80073b4:	40023800 	.word	0x40023800
 80073b8:	40004400 	.word	0x40004400
 80073bc:	40004800 	.word	0x40004800
 80073c0:	40004c00 	.word	0x40004c00
 80073c4:	40005000 	.word	0x40005000
 80073c8:	40011400 	.word	0x40011400
 80073cc:	40007800 	.word	0x40007800
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a71      	ldr	r2, [pc, #452]	; (800759c <UART_SetConfig+0x4b8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d125      	bne.n	8007426 <UART_SetConfig+0x342>
 80073da:	4b71      	ldr	r3, [pc, #452]	; (80075a0 <UART_SetConfig+0x4bc>)
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073e8:	d017      	beq.n	800741a <UART_SetConfig+0x336>
 80073ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073ee:	d817      	bhi.n	8007420 <UART_SetConfig+0x33c>
 80073f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f4:	d00b      	beq.n	800740e <UART_SetConfig+0x32a>
 80073f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073fa:	d811      	bhi.n	8007420 <UART_SetConfig+0x33c>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <UART_SetConfig+0x324>
 8007400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007404:	d006      	beq.n	8007414 <UART_SetConfig+0x330>
 8007406:	e00b      	b.n	8007420 <UART_SetConfig+0x33c>
 8007408:	2300      	movs	r3, #0
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e00d      	b.n	800742a <UART_SetConfig+0x346>
 800740e:	2302      	movs	r3, #2
 8007410:	77fb      	strb	r3, [r7, #31]
 8007412:	e00a      	b.n	800742a <UART_SetConfig+0x346>
 8007414:	2304      	movs	r3, #4
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e007      	b.n	800742a <UART_SetConfig+0x346>
 800741a:	2308      	movs	r3, #8
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e004      	b.n	800742a <UART_SetConfig+0x346>
 8007420:	2310      	movs	r3, #16
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	e001      	b.n	800742a <UART_SetConfig+0x346>
 8007426:	2310      	movs	r3, #16
 8007428:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007432:	d15a      	bne.n	80074ea <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007434:	7ffb      	ldrb	r3, [r7, #31]
 8007436:	2b08      	cmp	r3, #8
 8007438:	d827      	bhi.n	800748a <UART_SetConfig+0x3a6>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <UART_SetConfig+0x35c>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007465 	.word	0x08007465
 8007444:	0800746d 	.word	0x0800746d
 8007448:	08007475 	.word	0x08007475
 800744c:	0800748b 	.word	0x0800748b
 8007450:	0800747b 	.word	0x0800747b
 8007454:	0800748b 	.word	0x0800748b
 8007458:	0800748b 	.word	0x0800748b
 800745c:	0800748b 	.word	0x0800748b
 8007460:	08007483 	.word	0x08007483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007464:	f7fe f86a 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8007468:	61b8      	str	r0, [r7, #24]
        break;
 800746a:	e013      	b.n	8007494 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800746c:	f7fe f87a 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8007470:	61b8      	str	r0, [r7, #24]
        break;
 8007472:	e00f      	b.n	8007494 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007474:	4b4b      	ldr	r3, [pc, #300]	; (80075a4 <UART_SetConfig+0x4c0>)
 8007476:	61bb      	str	r3, [r7, #24]
        break;
 8007478:	e00c      	b.n	8007494 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800747a:	f7fd ff73 	bl	8005364 <HAL_RCC_GetSysClockFreq>
 800747e:	61b8      	str	r0, [r7, #24]
        break;
 8007480:	e008      	b.n	8007494 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007486:	61bb      	str	r3, [r7, #24]
        break;
 8007488:	e004      	b.n	8007494 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	77bb      	strb	r3, [r7, #30]
        break;
 8007492:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d074      	beq.n	8007584 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	005a      	lsls	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	441a      	add	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b0f      	cmp	r3, #15
 80074b4:	d916      	bls.n	80074e4 <UART_SetConfig+0x400>
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074bc:	d212      	bcs.n	80074e4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f023 030f 	bic.w	r3, r3, #15
 80074c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	89fb      	ldrh	r3, [r7, #14]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	89fa      	ldrh	r2, [r7, #14]
 80074e0:	60da      	str	r2, [r3, #12]
 80074e2:	e04f      	b.n	8007584 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	77bb      	strb	r3, [r7, #30]
 80074e8:	e04c      	b.n	8007584 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074ea:	7ffb      	ldrb	r3, [r7, #31]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d828      	bhi.n	8007542 <UART_SetConfig+0x45e>
 80074f0:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <UART_SetConfig+0x414>)
 80074f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f6:	bf00      	nop
 80074f8:	0800751d 	.word	0x0800751d
 80074fc:	08007525 	.word	0x08007525
 8007500:	0800752d 	.word	0x0800752d
 8007504:	08007543 	.word	0x08007543
 8007508:	08007533 	.word	0x08007533
 800750c:	08007543 	.word	0x08007543
 8007510:	08007543 	.word	0x08007543
 8007514:	08007543 	.word	0x08007543
 8007518:	0800753b 	.word	0x0800753b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800751c:	f7fe f80e 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8007520:	61b8      	str	r0, [r7, #24]
        break;
 8007522:	e013      	b.n	800754c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007524:	f7fe f81e 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8007528:	61b8      	str	r0, [r7, #24]
        break;
 800752a:	e00f      	b.n	800754c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800752c:	4b1d      	ldr	r3, [pc, #116]	; (80075a4 <UART_SetConfig+0x4c0>)
 800752e:	61bb      	str	r3, [r7, #24]
        break;
 8007530:	e00c      	b.n	800754c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007532:	f7fd ff17 	bl	8005364 <HAL_RCC_GetSysClockFreq>
 8007536:	61b8      	str	r0, [r7, #24]
        break;
 8007538:	e008      	b.n	800754c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800753a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800753e:	61bb      	str	r3, [r7, #24]
        break;
 8007540:	e004      	b.n	800754c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	77bb      	strb	r3, [r7, #30]
        break;
 800754a:	bf00      	nop
    }

    if (pclk != 0U)
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d018      	beq.n	8007584 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	085a      	lsrs	r2, r3, #1
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	441a      	add	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	fbb2 f3f3 	udiv	r3, r2, r3
 8007564:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b0f      	cmp	r3, #15
 800756a:	d909      	bls.n	8007580 <UART_SetConfig+0x49c>
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007572:	d205      	bcs.n	8007580 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	b29a      	uxth	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	60da      	str	r2, [r3, #12]
 800757e:	e001      	b.n	8007584 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007590:	7fbb      	ldrb	r3, [r7, #30]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3720      	adds	r7, #32
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	40007c00 	.word	0x40007c00
 80075a0:	40023800 	.word	0x40023800
 80075a4:	00f42400 	.word	0x00f42400

080075a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01a      	beq.n	80076be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a6:	d10a      	bne.n	80076be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	605a      	str	r2, [r3, #4]
  }
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076fc:	f7fb fb8e 	bl	8002e1c <HAL_GetTick>
 8007700:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0308 	and.w	r3, r3, #8
 800770c:	2b08      	cmp	r3, #8
 800770e:	d10e      	bne.n	800772e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f82d 	bl	800777e <UART_WaitOnFlagUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e023      	b.n	8007776 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b04      	cmp	r3, #4
 800773a:	d10e      	bne.n	800775a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800773c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f817 	bl	800777e <UART_WaitOnFlagUntilTimeout>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e00d      	b.n	8007776 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b09c      	sub	sp, #112	; 0x70
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	603b      	str	r3, [r7, #0]
 800778a:	4613      	mov	r3, r2
 800778c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800778e:	e0a5      	b.n	80078dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007796:	f000 80a1 	beq.w	80078dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800779a:	f7fb fb3f 	bl	8002e1c <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d302      	bcc.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80077aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d13e      	bne.n	800782e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077c4:	667b      	str	r3, [r7, #100]	; 0x64
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e6      	bne.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3308      	adds	r3, #8
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ec:	e853 3f00 	ldrex	r3, [r3]
 80077f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f4:	f023 0301 	bic.w	r3, r3, #1
 80077f8:	663b      	str	r3, [r7, #96]	; 0x60
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007802:	64ba      	str	r2, [r7, #72]	; 0x48
 8007804:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e5      	bne.n	80077e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2220      	movs	r2, #32
 800781a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2220      	movs	r2, #32
 8007820:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e067      	b.n	80078fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d04f      	beq.n	80078dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800784a:	d147      	bne.n	80078dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007854:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800786a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007874:	637b      	str	r3, [r7, #52]	; 0x34
 8007876:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800787a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e6      	bne.n	8007856 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	613b      	str	r3, [r7, #16]
   return(result);
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	66bb      	str	r3, [r7, #104]	; 0x68
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3308      	adds	r3, #8
 80078a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078a8:	623a      	str	r2, [r7, #32]
 80078aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	69f9      	ldr	r1, [r7, #28]
 80078ae:	6a3a      	ldr	r2, [r7, #32]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e5      	bne.n	8007888 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2220      	movs	r2, #32
 80078c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e010      	b.n	80078fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69da      	ldr	r2, [r3, #28]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	4013      	ands	r3, r2
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	bf0c      	ite	eq
 80078ec:	2301      	moveq	r3, #1
 80078ee:	2300      	movne	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	f43f af4a 	beq.w	8007790 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3770      	adds	r7, #112	; 0x70
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007908:	b480      	push	{r7}
 800790a:	b097      	sub	sp, #92	; 0x5c
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800793a:	d10e      	bne.n	800795a <UART_Start_Receive_IT+0x52>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d105      	bne.n	8007950 <UART_Start_Receive_IT+0x48>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f240 12ff 	movw	r2, #511	; 0x1ff
 800794a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800794e:	e02d      	b.n	80079ac <UART_Start_Receive_IT+0xa4>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	22ff      	movs	r2, #255	; 0xff
 8007954:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007958:	e028      	b.n	80079ac <UART_Start_Receive_IT+0xa4>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10d      	bne.n	800797e <UART_Start_Receive_IT+0x76>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <UART_Start_Receive_IT+0x6c>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	22ff      	movs	r2, #255	; 0xff
 800796e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007972:	e01b      	b.n	80079ac <UART_Start_Receive_IT+0xa4>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	227f      	movs	r2, #127	; 0x7f
 8007978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800797c:	e016      	b.n	80079ac <UART_Start_Receive_IT+0xa4>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007986:	d10d      	bne.n	80079a4 <UART_Start_Receive_IT+0x9c>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <UART_Start_Receive_IT+0x92>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	227f      	movs	r2, #127	; 0x7f
 8007994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007998:	e008      	b.n	80079ac <UART_Start_Receive_IT+0xa4>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	223f      	movs	r2, #63	; 0x3f
 800799e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079a2:	e003      	b.n	80079ac <UART_Start_Receive_IT+0xa4>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2222      	movs	r2, #34	; 0x22
 80079b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	f043 0301 	orr.w	r3, r3, #1
 80079d0:	657b      	str	r3, [r7, #84]	; 0x54
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3308      	adds	r3, #8
 80079d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079da:	64ba      	str	r2, [r7, #72]	; 0x48
 80079dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e5      	bne.n	80079ba <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f6:	d107      	bne.n	8007a08 <UART_Start_Receive_IT+0x100>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d103      	bne.n	8007a08 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4a24      	ldr	r2, [pc, #144]	; (8007a94 <UART_Start_Receive_IT+0x18c>)
 8007a04:	665a      	str	r2, [r3, #100]	; 0x64
 8007a06:	e002      	b.n	8007a0e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4a23      	ldr	r2, [pc, #140]	; (8007a98 <UART_Start_Receive_IT+0x190>)
 8007a0c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d019      	beq.n	8007a52 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e6      	bne.n	8007a1e <UART_Start_Receive_IT+0x116>
 8007a50:	e018      	b.n	8007a84 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f043 0320 	orr.w	r3, r3, #32
 8007a66:	653b      	str	r3, [r7, #80]	; 0x50
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a70:	623b      	str	r3, [r7, #32]
 8007a72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	69f9      	ldr	r1, [r7, #28]
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e6      	bne.n	8007a52 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	375c      	adds	r7, #92	; 0x5c
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	08007eb5 	.word	0x08007eb5
 8007a98:	08007d59 	.word	0x08007d59

08007a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b095      	sub	sp, #84	; 0x54
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e6      	bne.n	8007aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3308      	adds	r3, #8
 8007adc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	f023 0301 	bic.w	r3, r3, #1
 8007aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3308      	adds	r3, #8
 8007af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007af8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e5      	bne.n	8007ad6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d118      	bne.n	8007b44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f023 0310 	bic.w	r3, r3, #16
 8007b26:	647b      	str	r3, [r7, #68]	; 0x44
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	6979      	ldr	r1, [r7, #20]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	e841 2300 	strex	r3, r2, [r1]
 8007b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e6      	bne.n	8007b12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2220      	movs	r2, #32
 8007b48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007b56:	bf00      	nop
 8007b58:	3754      	adds	r7, #84	; 0x54
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff fa8f 	bl	80070a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b08f      	sub	sp, #60	; 0x3c
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b9a:	2b21      	cmp	r3, #33	; 0x21
 8007b9c:	d14c      	bne.n	8007c38 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d132      	bne.n	8007c10 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e6      	bne.n	8007baa <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6979      	ldr	r1, [r7, #20]
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	613b      	str	r3, [r7, #16]
   return(result);
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e6      	bne.n	8007bdc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c0e:	e013      	b.n	8007c38 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c14:	781a      	ldrb	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007c38:	bf00      	nop
 8007c3a:	373c      	adds	r7, #60	; 0x3c
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b091      	sub	sp, #68	; 0x44
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c50:	2b21      	cmp	r3, #33	; 0x21
 8007c52:	d151      	bne.n	8007cf8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d132      	bne.n	8007cc6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c74:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8007c80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e6      	bne.n	8007c60 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	69b9      	ldr	r1, [r7, #24]
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e6      	bne.n	8007c92 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007cc4:	e018      	b.n	8007cf8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cda:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce0:	1c9a      	adds	r2, r3, #2
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007cf8:	bf00      	nop
 8007cfa:	3744      	adds	r7, #68	; 0x44
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d20:	61fb      	str	r3, [r7, #28]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	61bb      	str	r3, [r7, #24]
 8007d2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6979      	ldr	r1, [r7, #20]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	613b      	str	r3, [r7, #16]
   return(result);
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e6      	bne.n	8007d0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff f9a0 	bl	8007090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d50:	bf00      	nop
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b096      	sub	sp, #88	; 0x58
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6e:	2b22      	cmp	r3, #34	; 0x22
 8007d70:	f040 8094 	bne.w	8007e9c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d7e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007d82:	b2d9      	uxtb	r1, r3
 8007d84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8e:	400a      	ands	r2, r1
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	3b01      	subs	r3, #1
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d177      	bne.n	8007eac <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dda:	647b      	str	r3, [r7, #68]	; 0x44
 8007ddc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e6      	bne.n	8007dbc <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3308      	adds	r3, #8
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e5      	bne.n	8007dee <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d12e      	bne.n	8007e94 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f023 0310 	bic.w	r3, r3, #16
 8007e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e5a:	61fb      	str	r3, [r7, #28]
 8007e5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	69b9      	ldr	r1, [r7, #24]
 8007e60:	69fa      	ldr	r2, [r7, #28]
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	617b      	str	r3, [r7, #20]
   return(result);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e6      	bne.n	8007e3c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b10      	cmp	r3, #16
 8007e7a:	d103      	bne.n	8007e84 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2210      	movs	r2, #16
 8007e82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff f913 	bl	80070b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e92:	e00b      	b.n	8007eac <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7fa feb1 	bl	8002bfc <HAL_UART_RxCpltCallback>
}
 8007e9a:	e007      	b.n	8007eac <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0208 	orr.w	r2, r2, #8
 8007eaa:	619a      	str	r2, [r3, #24]
}
 8007eac:	bf00      	nop
 8007eae:	3758      	adds	r7, #88	; 0x58
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b096      	sub	sp, #88	; 0x58
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ec2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eca:	2b22      	cmp	r3, #34	; 0x22
 8007ecc:	f040 8094 	bne.w	8007ff8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ede:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ee0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007ee4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ee8:	4013      	ands	r3, r2
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef4:	1c9a      	adds	r2, r3, #2
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d177      	bne.n	8008008 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f36:	643b      	str	r3, [r7, #64]	; 0x40
 8007f38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e5      	bne.n	8007f4a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2220      	movs	r2, #32
 8007f82:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d12e      	bne.n	8007ff0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f023 0310 	bic.w	r3, r3, #16
 8007fac:	647b      	str	r3, [r7, #68]	; 0x44
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fb6:	61bb      	str	r3, [r7, #24]
 8007fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6979      	ldr	r1, [r7, #20]
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e6      	bne.n	8007f98 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b10      	cmp	r3, #16
 8007fd6:	d103      	bne.n	8007fe0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2210      	movs	r2, #16
 8007fde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff f865 	bl	80070b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fee:	e00b      	b.n	8008008 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fa fe03 	bl	8002bfc <HAL_UART_RxCpltCallback>
}
 8007ff6:	e007      	b.n	8008008 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0208 	orr.w	r2, r2, #8
 8008006:	619a      	str	r2, [r3, #24]
}
 8008008:	bf00      	nop
 800800a:	3758      	adds	r7, #88	; 0x58
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <__errno>:
 8008010:	4b01      	ldr	r3, [pc, #4]	; (8008018 <__errno+0x8>)
 8008012:	6818      	ldr	r0, [r3, #0]
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	2000001c 	.word	0x2000001c

0800801c <__libc_init_array>:
 800801c:	b570      	push	{r4, r5, r6, lr}
 800801e:	4d0d      	ldr	r5, [pc, #52]	; (8008054 <__libc_init_array+0x38>)
 8008020:	4c0d      	ldr	r4, [pc, #52]	; (8008058 <__libc_init_array+0x3c>)
 8008022:	1b64      	subs	r4, r4, r5
 8008024:	10a4      	asrs	r4, r4, #2
 8008026:	2600      	movs	r6, #0
 8008028:	42a6      	cmp	r6, r4
 800802a:	d109      	bne.n	8008040 <__libc_init_array+0x24>
 800802c:	4d0b      	ldr	r5, [pc, #44]	; (800805c <__libc_init_array+0x40>)
 800802e:	4c0c      	ldr	r4, [pc, #48]	; (8008060 <__libc_init_array+0x44>)
 8008030:	f002 f8c8 	bl	800a1c4 <_init>
 8008034:	1b64      	subs	r4, r4, r5
 8008036:	10a4      	asrs	r4, r4, #2
 8008038:	2600      	movs	r6, #0
 800803a:	42a6      	cmp	r6, r4
 800803c:	d105      	bne.n	800804a <__libc_init_array+0x2e>
 800803e:	bd70      	pop	{r4, r5, r6, pc}
 8008040:	f855 3b04 	ldr.w	r3, [r5], #4
 8008044:	4798      	blx	r3
 8008046:	3601      	adds	r6, #1
 8008048:	e7ee      	b.n	8008028 <__libc_init_array+0xc>
 800804a:	f855 3b04 	ldr.w	r3, [r5], #4
 800804e:	4798      	blx	r3
 8008050:	3601      	adds	r6, #1
 8008052:	e7f2      	b.n	800803a <__libc_init_array+0x1e>
 8008054:	0800b5b0 	.word	0x0800b5b0
 8008058:	0800b5b0 	.word	0x0800b5b0
 800805c:	0800b5b0 	.word	0x0800b5b0
 8008060:	0800b5b4 	.word	0x0800b5b4

08008064 <malloc>:
 8008064:	4b02      	ldr	r3, [pc, #8]	; (8008070 <malloc+0xc>)
 8008066:	4601      	mov	r1, r0
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	f000 b863 	b.w	8008134 <_malloc_r>
 800806e:	bf00      	nop
 8008070:	2000001c 	.word	0x2000001c

08008074 <free>:
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <free+0xc>)
 8008076:	4601      	mov	r1, r0
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f000 b80b 	b.w	8008094 <_free_r>
 800807e:	bf00      	nop
 8008080:	2000001c 	.word	0x2000001c

08008084 <memset>:
 8008084:	4402      	add	r2, r0
 8008086:	4603      	mov	r3, r0
 8008088:	4293      	cmp	r3, r2
 800808a:	d100      	bne.n	800808e <memset+0xa>
 800808c:	4770      	bx	lr
 800808e:	f803 1b01 	strb.w	r1, [r3], #1
 8008092:	e7f9      	b.n	8008088 <memset+0x4>

08008094 <_free_r>:
 8008094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008096:	2900      	cmp	r1, #0
 8008098:	d048      	beq.n	800812c <_free_r+0x98>
 800809a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800809e:	9001      	str	r0, [sp, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f1a1 0404 	sub.w	r4, r1, #4
 80080a6:	bfb8      	it	lt
 80080a8:	18e4      	addlt	r4, r4, r3
 80080aa:	f000 fa2b 	bl	8008504 <__malloc_lock>
 80080ae:	4a20      	ldr	r2, [pc, #128]	; (8008130 <_free_r+0x9c>)
 80080b0:	9801      	ldr	r0, [sp, #4]
 80080b2:	6813      	ldr	r3, [r2, #0]
 80080b4:	4615      	mov	r5, r2
 80080b6:	b933      	cbnz	r3, 80080c6 <_free_r+0x32>
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	6014      	str	r4, [r2, #0]
 80080bc:	b003      	add	sp, #12
 80080be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080c2:	f000 ba25 	b.w	8008510 <__malloc_unlock>
 80080c6:	42a3      	cmp	r3, r4
 80080c8:	d90b      	bls.n	80080e2 <_free_r+0x4e>
 80080ca:	6821      	ldr	r1, [r4, #0]
 80080cc:	1862      	adds	r2, r4, r1
 80080ce:	4293      	cmp	r3, r2
 80080d0:	bf04      	itt	eq
 80080d2:	681a      	ldreq	r2, [r3, #0]
 80080d4:	685b      	ldreq	r3, [r3, #4]
 80080d6:	6063      	str	r3, [r4, #4]
 80080d8:	bf04      	itt	eq
 80080da:	1852      	addeq	r2, r2, r1
 80080dc:	6022      	streq	r2, [r4, #0]
 80080de:	602c      	str	r4, [r5, #0]
 80080e0:	e7ec      	b.n	80080bc <_free_r+0x28>
 80080e2:	461a      	mov	r2, r3
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	b10b      	cbz	r3, 80080ec <_free_r+0x58>
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	d9fa      	bls.n	80080e2 <_free_r+0x4e>
 80080ec:	6811      	ldr	r1, [r2, #0]
 80080ee:	1855      	adds	r5, r2, r1
 80080f0:	42a5      	cmp	r5, r4
 80080f2:	d10b      	bne.n	800810c <_free_r+0x78>
 80080f4:	6824      	ldr	r4, [r4, #0]
 80080f6:	4421      	add	r1, r4
 80080f8:	1854      	adds	r4, r2, r1
 80080fa:	42a3      	cmp	r3, r4
 80080fc:	6011      	str	r1, [r2, #0]
 80080fe:	d1dd      	bne.n	80080bc <_free_r+0x28>
 8008100:	681c      	ldr	r4, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	6053      	str	r3, [r2, #4]
 8008106:	4421      	add	r1, r4
 8008108:	6011      	str	r1, [r2, #0]
 800810a:	e7d7      	b.n	80080bc <_free_r+0x28>
 800810c:	d902      	bls.n	8008114 <_free_r+0x80>
 800810e:	230c      	movs	r3, #12
 8008110:	6003      	str	r3, [r0, #0]
 8008112:	e7d3      	b.n	80080bc <_free_r+0x28>
 8008114:	6825      	ldr	r5, [r4, #0]
 8008116:	1961      	adds	r1, r4, r5
 8008118:	428b      	cmp	r3, r1
 800811a:	bf04      	itt	eq
 800811c:	6819      	ldreq	r1, [r3, #0]
 800811e:	685b      	ldreq	r3, [r3, #4]
 8008120:	6063      	str	r3, [r4, #4]
 8008122:	bf04      	itt	eq
 8008124:	1949      	addeq	r1, r1, r5
 8008126:	6021      	streq	r1, [r4, #0]
 8008128:	6054      	str	r4, [r2, #4]
 800812a:	e7c7      	b.n	80080bc <_free_r+0x28>
 800812c:	b003      	add	sp, #12
 800812e:	bd30      	pop	{r4, r5, pc}
 8008130:	20000270 	.word	0x20000270

08008134 <_malloc_r>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	1ccd      	adds	r5, r1, #3
 8008138:	f025 0503 	bic.w	r5, r5, #3
 800813c:	3508      	adds	r5, #8
 800813e:	2d0c      	cmp	r5, #12
 8008140:	bf38      	it	cc
 8008142:	250c      	movcc	r5, #12
 8008144:	2d00      	cmp	r5, #0
 8008146:	4606      	mov	r6, r0
 8008148:	db01      	blt.n	800814e <_malloc_r+0x1a>
 800814a:	42a9      	cmp	r1, r5
 800814c:	d903      	bls.n	8008156 <_malloc_r+0x22>
 800814e:	230c      	movs	r3, #12
 8008150:	6033      	str	r3, [r6, #0]
 8008152:	2000      	movs	r0, #0
 8008154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008156:	f000 f9d5 	bl	8008504 <__malloc_lock>
 800815a:	4921      	ldr	r1, [pc, #132]	; (80081e0 <_malloc_r+0xac>)
 800815c:	680a      	ldr	r2, [r1, #0]
 800815e:	4614      	mov	r4, r2
 8008160:	b99c      	cbnz	r4, 800818a <_malloc_r+0x56>
 8008162:	4f20      	ldr	r7, [pc, #128]	; (80081e4 <_malloc_r+0xb0>)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	b923      	cbnz	r3, 8008172 <_malloc_r+0x3e>
 8008168:	4621      	mov	r1, r4
 800816a:	4630      	mov	r0, r6
 800816c:	f000 f844 	bl	80081f8 <_sbrk_r>
 8008170:	6038      	str	r0, [r7, #0]
 8008172:	4629      	mov	r1, r5
 8008174:	4630      	mov	r0, r6
 8008176:	f000 f83f 	bl	80081f8 <_sbrk_r>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d123      	bne.n	80081c6 <_malloc_r+0x92>
 800817e:	230c      	movs	r3, #12
 8008180:	6033      	str	r3, [r6, #0]
 8008182:	4630      	mov	r0, r6
 8008184:	f000 f9c4 	bl	8008510 <__malloc_unlock>
 8008188:	e7e3      	b.n	8008152 <_malloc_r+0x1e>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	1b5b      	subs	r3, r3, r5
 800818e:	d417      	bmi.n	80081c0 <_malloc_r+0x8c>
 8008190:	2b0b      	cmp	r3, #11
 8008192:	d903      	bls.n	800819c <_malloc_r+0x68>
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	441c      	add	r4, r3
 8008198:	6025      	str	r5, [r4, #0]
 800819a:	e004      	b.n	80081a6 <_malloc_r+0x72>
 800819c:	6863      	ldr	r3, [r4, #4]
 800819e:	42a2      	cmp	r2, r4
 80081a0:	bf0c      	ite	eq
 80081a2:	600b      	streq	r3, [r1, #0]
 80081a4:	6053      	strne	r3, [r2, #4]
 80081a6:	4630      	mov	r0, r6
 80081a8:	f000 f9b2 	bl	8008510 <__malloc_unlock>
 80081ac:	f104 000b 	add.w	r0, r4, #11
 80081b0:	1d23      	adds	r3, r4, #4
 80081b2:	f020 0007 	bic.w	r0, r0, #7
 80081b6:	1ac2      	subs	r2, r0, r3
 80081b8:	d0cc      	beq.n	8008154 <_malloc_r+0x20>
 80081ba:	1a1b      	subs	r3, r3, r0
 80081bc:	50a3      	str	r3, [r4, r2]
 80081be:	e7c9      	b.n	8008154 <_malloc_r+0x20>
 80081c0:	4622      	mov	r2, r4
 80081c2:	6864      	ldr	r4, [r4, #4]
 80081c4:	e7cc      	b.n	8008160 <_malloc_r+0x2c>
 80081c6:	1cc4      	adds	r4, r0, #3
 80081c8:	f024 0403 	bic.w	r4, r4, #3
 80081cc:	42a0      	cmp	r0, r4
 80081ce:	d0e3      	beq.n	8008198 <_malloc_r+0x64>
 80081d0:	1a21      	subs	r1, r4, r0
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 f810 	bl	80081f8 <_sbrk_r>
 80081d8:	3001      	adds	r0, #1
 80081da:	d1dd      	bne.n	8008198 <_malloc_r+0x64>
 80081dc:	e7cf      	b.n	800817e <_malloc_r+0x4a>
 80081de:	bf00      	nop
 80081e0:	20000270 	.word	0x20000270
 80081e4:	20000274 	.word	0x20000274

080081e8 <realloc>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	; (80081f4 <realloc+0xc>)
 80081ea:	460a      	mov	r2, r1
 80081ec:	4601      	mov	r1, r0
 80081ee:	6818      	ldr	r0, [r3, #0]
 80081f0:	f000 b994 	b.w	800851c <_realloc_r>
 80081f4:	2000001c 	.word	0x2000001c

080081f8 <_sbrk_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d06      	ldr	r5, [pc, #24]	; (8008214 <_sbrk_r+0x1c>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	602b      	str	r3, [r5, #0]
 8008204:	f7fa f9fc 	bl	8002600 <_sbrk>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d102      	bne.n	8008212 <_sbrk_r+0x1a>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	b103      	cbz	r3, 8008212 <_sbrk_r+0x1a>
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	200005fc 	.word	0x200005fc

08008218 <sniprintf>:
 8008218:	b40c      	push	{r2, r3}
 800821a:	b530      	push	{r4, r5, lr}
 800821c:	4b17      	ldr	r3, [pc, #92]	; (800827c <sniprintf+0x64>)
 800821e:	1e0c      	subs	r4, r1, #0
 8008220:	681d      	ldr	r5, [r3, #0]
 8008222:	b09d      	sub	sp, #116	; 0x74
 8008224:	da08      	bge.n	8008238 <sniprintf+0x20>
 8008226:	238b      	movs	r3, #139	; 0x8b
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	f04f 30ff 	mov.w	r0, #4294967295
 800822e:	b01d      	add	sp, #116	; 0x74
 8008230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008234:	b002      	add	sp, #8
 8008236:	4770      	bx	lr
 8008238:	f44f 7302 	mov.w	r3, #520	; 0x208
 800823c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008240:	bf14      	ite	ne
 8008242:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008246:	4623      	moveq	r3, r4
 8008248:	9304      	str	r3, [sp, #16]
 800824a:	9307      	str	r3, [sp, #28]
 800824c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008250:	9002      	str	r0, [sp, #8]
 8008252:	9006      	str	r0, [sp, #24]
 8008254:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008258:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800825a:	ab21      	add	r3, sp, #132	; 0x84
 800825c:	a902      	add	r1, sp, #8
 800825e:	4628      	mov	r0, r5
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	f000 f9dd 	bl	8008620 <_svfiprintf_r>
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	bfbc      	itt	lt
 800826a:	238b      	movlt	r3, #139	; 0x8b
 800826c:	602b      	strlt	r3, [r5, #0]
 800826e:	2c00      	cmp	r4, #0
 8008270:	d0dd      	beq.n	800822e <sniprintf+0x16>
 8008272:	9b02      	ldr	r3, [sp, #8]
 8008274:	2200      	movs	r2, #0
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e7d9      	b.n	800822e <sniprintf+0x16>
 800827a:	bf00      	nop
 800827c:	2000001c 	.word	0x2000001c

08008280 <siprintf>:
 8008280:	b40e      	push	{r1, r2, r3}
 8008282:	b500      	push	{lr}
 8008284:	b09c      	sub	sp, #112	; 0x70
 8008286:	ab1d      	add	r3, sp, #116	; 0x74
 8008288:	9002      	str	r0, [sp, #8]
 800828a:	9006      	str	r0, [sp, #24]
 800828c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008290:	4809      	ldr	r0, [pc, #36]	; (80082b8 <siprintf+0x38>)
 8008292:	9107      	str	r1, [sp, #28]
 8008294:	9104      	str	r1, [sp, #16]
 8008296:	4909      	ldr	r1, [pc, #36]	; (80082bc <siprintf+0x3c>)
 8008298:	f853 2b04 	ldr.w	r2, [r3], #4
 800829c:	9105      	str	r1, [sp, #20]
 800829e:	6800      	ldr	r0, [r0, #0]
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	a902      	add	r1, sp, #8
 80082a4:	f000 f9bc 	bl	8008620 <_svfiprintf_r>
 80082a8:	9b02      	ldr	r3, [sp, #8]
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	b01c      	add	sp, #112	; 0x70
 80082b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b4:	b003      	add	sp, #12
 80082b6:	4770      	bx	lr
 80082b8:	2000001c 	.word	0x2000001c
 80082bc:	ffff0208 	.word	0xffff0208

080082c0 <strcpy>:
 80082c0:	4603      	mov	r3, r0
 80082c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082c6:	f803 2b01 	strb.w	r2, [r3], #1
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	d1f9      	bne.n	80082c2 <strcpy+0x2>
 80082ce:	4770      	bx	lr

080082d0 <strtok>:
 80082d0:	4b16      	ldr	r3, [pc, #88]	; (800832c <strtok+0x5c>)
 80082d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082d4:	681e      	ldr	r6, [r3, #0]
 80082d6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80082d8:	4605      	mov	r5, r0
 80082da:	b9fc      	cbnz	r4, 800831c <strtok+0x4c>
 80082dc:	2050      	movs	r0, #80	; 0x50
 80082de:	9101      	str	r1, [sp, #4]
 80082e0:	f7ff fec0 	bl	8008064 <malloc>
 80082e4:	9901      	ldr	r1, [sp, #4]
 80082e6:	65b0      	str	r0, [r6, #88]	; 0x58
 80082e8:	4602      	mov	r2, r0
 80082ea:	b920      	cbnz	r0, 80082f6 <strtok+0x26>
 80082ec:	4b10      	ldr	r3, [pc, #64]	; (8008330 <strtok+0x60>)
 80082ee:	4811      	ldr	r0, [pc, #68]	; (8008334 <strtok+0x64>)
 80082f0:	2157      	movs	r1, #87	; 0x57
 80082f2:	f000 f8d7 	bl	80084a4 <__assert_func>
 80082f6:	e9c0 4400 	strd	r4, r4, [r0]
 80082fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80082fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008302:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008306:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800830a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800830e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008312:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008316:	6184      	str	r4, [r0, #24]
 8008318:	7704      	strb	r4, [r0, #28]
 800831a:	6244      	str	r4, [r0, #36]	; 0x24
 800831c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800831e:	2301      	movs	r3, #1
 8008320:	4628      	mov	r0, r5
 8008322:	b002      	add	sp, #8
 8008324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008328:	f000 b806 	b.w	8008338 <__strtok_r>
 800832c:	2000001c 	.word	0x2000001c
 8008330:	0800b188 	.word	0x0800b188
 8008334:	0800b19f 	.word	0x0800b19f

08008338 <__strtok_r>:
 8008338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800833a:	b908      	cbnz	r0, 8008340 <__strtok_r+0x8>
 800833c:	6810      	ldr	r0, [r2, #0]
 800833e:	b188      	cbz	r0, 8008364 <__strtok_r+0x2c>
 8008340:	4604      	mov	r4, r0
 8008342:	4620      	mov	r0, r4
 8008344:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008348:	460f      	mov	r7, r1
 800834a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800834e:	b91e      	cbnz	r6, 8008358 <__strtok_r+0x20>
 8008350:	b965      	cbnz	r5, 800836c <__strtok_r+0x34>
 8008352:	6015      	str	r5, [r2, #0]
 8008354:	4628      	mov	r0, r5
 8008356:	e005      	b.n	8008364 <__strtok_r+0x2c>
 8008358:	42b5      	cmp	r5, r6
 800835a:	d1f6      	bne.n	800834a <__strtok_r+0x12>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f0      	bne.n	8008342 <__strtok_r+0xa>
 8008360:	6014      	str	r4, [r2, #0]
 8008362:	7003      	strb	r3, [r0, #0]
 8008364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008366:	461c      	mov	r4, r3
 8008368:	e00c      	b.n	8008384 <__strtok_r+0x4c>
 800836a:	b915      	cbnz	r5, 8008372 <__strtok_r+0x3a>
 800836c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008370:	460e      	mov	r6, r1
 8008372:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008376:	42ab      	cmp	r3, r5
 8008378:	d1f7      	bne.n	800836a <__strtok_r+0x32>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0f3      	beq.n	8008366 <__strtok_r+0x2e>
 800837e:	2300      	movs	r3, #0
 8008380:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008384:	6014      	str	r4, [r2, #0]
 8008386:	e7ed      	b.n	8008364 <__strtok_r+0x2c>

08008388 <_strtol_l.isra.0>:
 8008388:	2b01      	cmp	r3, #1
 800838a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838e:	d001      	beq.n	8008394 <_strtol_l.isra.0+0xc>
 8008390:	2b24      	cmp	r3, #36	; 0x24
 8008392:	d906      	bls.n	80083a2 <_strtol_l.isra.0+0x1a>
 8008394:	f7ff fe3c 	bl	8008010 <__errno>
 8008398:	2316      	movs	r3, #22
 800839a:	6003      	str	r3, [r0, #0]
 800839c:	2000      	movs	r0, #0
 800839e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a2:	4f3a      	ldr	r7, [pc, #232]	; (800848c <_strtol_l.isra.0+0x104>)
 80083a4:	468e      	mov	lr, r1
 80083a6:	4676      	mov	r6, lr
 80083a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80083ac:	5de5      	ldrb	r5, [r4, r7]
 80083ae:	f015 0508 	ands.w	r5, r5, #8
 80083b2:	d1f8      	bne.n	80083a6 <_strtol_l.isra.0+0x1e>
 80083b4:	2c2d      	cmp	r4, #45	; 0x2d
 80083b6:	d134      	bne.n	8008422 <_strtol_l.isra.0+0x9a>
 80083b8:	f89e 4000 	ldrb.w	r4, [lr]
 80083bc:	f04f 0801 	mov.w	r8, #1
 80083c0:	f106 0e02 	add.w	lr, r6, #2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d05c      	beq.n	8008482 <_strtol_l.isra.0+0xfa>
 80083c8:	2b10      	cmp	r3, #16
 80083ca:	d10c      	bne.n	80083e6 <_strtol_l.isra.0+0x5e>
 80083cc:	2c30      	cmp	r4, #48	; 0x30
 80083ce:	d10a      	bne.n	80083e6 <_strtol_l.isra.0+0x5e>
 80083d0:	f89e 4000 	ldrb.w	r4, [lr]
 80083d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80083d8:	2c58      	cmp	r4, #88	; 0x58
 80083da:	d14d      	bne.n	8008478 <_strtol_l.isra.0+0xf0>
 80083dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80083e0:	2310      	movs	r3, #16
 80083e2:	f10e 0e02 	add.w	lr, lr, #2
 80083e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80083ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80083ee:	2600      	movs	r6, #0
 80083f0:	fbbc f9f3 	udiv	r9, ip, r3
 80083f4:	4635      	mov	r5, r6
 80083f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80083fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80083fe:	2f09      	cmp	r7, #9
 8008400:	d818      	bhi.n	8008434 <_strtol_l.isra.0+0xac>
 8008402:	463c      	mov	r4, r7
 8008404:	42a3      	cmp	r3, r4
 8008406:	dd24      	ble.n	8008452 <_strtol_l.isra.0+0xca>
 8008408:	2e00      	cmp	r6, #0
 800840a:	db1f      	blt.n	800844c <_strtol_l.isra.0+0xc4>
 800840c:	45a9      	cmp	r9, r5
 800840e:	d31d      	bcc.n	800844c <_strtol_l.isra.0+0xc4>
 8008410:	d101      	bne.n	8008416 <_strtol_l.isra.0+0x8e>
 8008412:	45a2      	cmp	sl, r4
 8008414:	db1a      	blt.n	800844c <_strtol_l.isra.0+0xc4>
 8008416:	fb05 4503 	mla	r5, r5, r3, r4
 800841a:	2601      	movs	r6, #1
 800841c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008420:	e7eb      	b.n	80083fa <_strtol_l.isra.0+0x72>
 8008422:	2c2b      	cmp	r4, #43	; 0x2b
 8008424:	bf08      	it	eq
 8008426:	f89e 4000 	ldrbeq.w	r4, [lr]
 800842a:	46a8      	mov	r8, r5
 800842c:	bf08      	it	eq
 800842e:	f106 0e02 	addeq.w	lr, r6, #2
 8008432:	e7c7      	b.n	80083c4 <_strtol_l.isra.0+0x3c>
 8008434:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008438:	2f19      	cmp	r7, #25
 800843a:	d801      	bhi.n	8008440 <_strtol_l.isra.0+0xb8>
 800843c:	3c37      	subs	r4, #55	; 0x37
 800843e:	e7e1      	b.n	8008404 <_strtol_l.isra.0+0x7c>
 8008440:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008444:	2f19      	cmp	r7, #25
 8008446:	d804      	bhi.n	8008452 <_strtol_l.isra.0+0xca>
 8008448:	3c57      	subs	r4, #87	; 0x57
 800844a:	e7db      	b.n	8008404 <_strtol_l.isra.0+0x7c>
 800844c:	f04f 36ff 	mov.w	r6, #4294967295
 8008450:	e7e4      	b.n	800841c <_strtol_l.isra.0+0x94>
 8008452:	2e00      	cmp	r6, #0
 8008454:	da05      	bge.n	8008462 <_strtol_l.isra.0+0xda>
 8008456:	2322      	movs	r3, #34	; 0x22
 8008458:	6003      	str	r3, [r0, #0]
 800845a:	4665      	mov	r5, ip
 800845c:	b942      	cbnz	r2, 8008470 <_strtol_l.isra.0+0xe8>
 800845e:	4628      	mov	r0, r5
 8008460:	e79d      	b.n	800839e <_strtol_l.isra.0+0x16>
 8008462:	f1b8 0f00 	cmp.w	r8, #0
 8008466:	d000      	beq.n	800846a <_strtol_l.isra.0+0xe2>
 8008468:	426d      	negs	r5, r5
 800846a:	2a00      	cmp	r2, #0
 800846c:	d0f7      	beq.n	800845e <_strtol_l.isra.0+0xd6>
 800846e:	b10e      	cbz	r6, 8008474 <_strtol_l.isra.0+0xec>
 8008470:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008474:	6011      	str	r1, [r2, #0]
 8008476:	e7f2      	b.n	800845e <_strtol_l.isra.0+0xd6>
 8008478:	2430      	movs	r4, #48	; 0x30
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1b3      	bne.n	80083e6 <_strtol_l.isra.0+0x5e>
 800847e:	2308      	movs	r3, #8
 8008480:	e7b1      	b.n	80083e6 <_strtol_l.isra.0+0x5e>
 8008482:	2c30      	cmp	r4, #48	; 0x30
 8008484:	d0a4      	beq.n	80083d0 <_strtol_l.isra.0+0x48>
 8008486:	230a      	movs	r3, #10
 8008488:	e7ad      	b.n	80083e6 <_strtol_l.isra.0+0x5e>
 800848a:	bf00      	nop
 800848c:	0800b23d 	.word	0x0800b23d

08008490 <strtol>:
 8008490:	4613      	mov	r3, r2
 8008492:	460a      	mov	r2, r1
 8008494:	4601      	mov	r1, r0
 8008496:	4802      	ldr	r0, [pc, #8]	; (80084a0 <strtol+0x10>)
 8008498:	6800      	ldr	r0, [r0, #0]
 800849a:	f7ff bf75 	b.w	8008388 <_strtol_l.isra.0>
 800849e:	bf00      	nop
 80084a0:	2000001c 	.word	0x2000001c

080084a4 <__assert_func>:
 80084a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084a6:	4614      	mov	r4, r2
 80084a8:	461a      	mov	r2, r3
 80084aa:	4b09      	ldr	r3, [pc, #36]	; (80084d0 <__assert_func+0x2c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4605      	mov	r5, r0
 80084b0:	68d8      	ldr	r0, [r3, #12]
 80084b2:	b14c      	cbz	r4, 80084c8 <__assert_func+0x24>
 80084b4:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <__assert_func+0x30>)
 80084b6:	9100      	str	r1, [sp, #0]
 80084b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084bc:	4906      	ldr	r1, [pc, #24]	; (80084d8 <__assert_func+0x34>)
 80084be:	462b      	mov	r3, r5
 80084c0:	f000 f80e 	bl	80084e0 <fiprintf>
 80084c4:	f000 fd5a 	bl	8008f7c <abort>
 80084c8:	4b04      	ldr	r3, [pc, #16]	; (80084dc <__assert_func+0x38>)
 80084ca:	461c      	mov	r4, r3
 80084cc:	e7f3      	b.n	80084b6 <__assert_func+0x12>
 80084ce:	bf00      	nop
 80084d0:	2000001c 	.word	0x2000001c
 80084d4:	0800b200 	.word	0x0800b200
 80084d8:	0800b20d 	.word	0x0800b20d
 80084dc:	0800b23b 	.word	0x0800b23b

080084e0 <fiprintf>:
 80084e0:	b40e      	push	{r1, r2, r3}
 80084e2:	b503      	push	{r0, r1, lr}
 80084e4:	4601      	mov	r1, r0
 80084e6:	ab03      	add	r3, sp, #12
 80084e8:	4805      	ldr	r0, [pc, #20]	; (8008500 <fiprintf+0x20>)
 80084ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ee:	6800      	ldr	r0, [r0, #0]
 80084f0:	9301      	str	r3, [sp, #4]
 80084f2:	f000 f9bf 	bl	8008874 <_vfiprintf_r>
 80084f6:	b002      	add	sp, #8
 80084f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084fc:	b003      	add	sp, #12
 80084fe:	4770      	bx	lr
 8008500:	2000001c 	.word	0x2000001c

08008504 <__malloc_lock>:
 8008504:	4801      	ldr	r0, [pc, #4]	; (800850c <__malloc_lock+0x8>)
 8008506:	f000 bef9 	b.w	80092fc <__retarget_lock_acquire_recursive>
 800850a:	bf00      	nop
 800850c:	20000604 	.word	0x20000604

08008510 <__malloc_unlock>:
 8008510:	4801      	ldr	r0, [pc, #4]	; (8008518 <__malloc_unlock+0x8>)
 8008512:	f000 bef4 	b.w	80092fe <__retarget_lock_release_recursive>
 8008516:	bf00      	nop
 8008518:	20000604 	.word	0x20000604

0800851c <_realloc_r>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	4607      	mov	r7, r0
 8008520:	4614      	mov	r4, r2
 8008522:	460e      	mov	r6, r1
 8008524:	b921      	cbnz	r1, 8008530 <_realloc_r+0x14>
 8008526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800852a:	4611      	mov	r1, r2
 800852c:	f7ff be02 	b.w	8008134 <_malloc_r>
 8008530:	b922      	cbnz	r2, 800853c <_realloc_r+0x20>
 8008532:	f7ff fdaf 	bl	8008094 <_free_r>
 8008536:	4625      	mov	r5, r4
 8008538:	4628      	mov	r0, r5
 800853a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800853c:	f000 ff6c 	bl	8009418 <_malloc_usable_size_r>
 8008540:	42a0      	cmp	r0, r4
 8008542:	d20f      	bcs.n	8008564 <_realloc_r+0x48>
 8008544:	4621      	mov	r1, r4
 8008546:	4638      	mov	r0, r7
 8008548:	f7ff fdf4 	bl	8008134 <_malloc_r>
 800854c:	4605      	mov	r5, r0
 800854e:	2800      	cmp	r0, #0
 8008550:	d0f2      	beq.n	8008538 <_realloc_r+0x1c>
 8008552:	4631      	mov	r1, r6
 8008554:	4622      	mov	r2, r4
 8008556:	f000 ff37 	bl	80093c8 <memcpy>
 800855a:	4631      	mov	r1, r6
 800855c:	4638      	mov	r0, r7
 800855e:	f7ff fd99 	bl	8008094 <_free_r>
 8008562:	e7e9      	b.n	8008538 <_realloc_r+0x1c>
 8008564:	4635      	mov	r5, r6
 8008566:	e7e7      	b.n	8008538 <_realloc_r+0x1c>

08008568 <__ssputs_r>:
 8008568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	688e      	ldr	r6, [r1, #8]
 800856e:	429e      	cmp	r6, r3
 8008570:	4682      	mov	sl, r0
 8008572:	460c      	mov	r4, r1
 8008574:	4690      	mov	r8, r2
 8008576:	461f      	mov	r7, r3
 8008578:	d838      	bhi.n	80085ec <__ssputs_r+0x84>
 800857a:	898a      	ldrh	r2, [r1, #12]
 800857c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008580:	d032      	beq.n	80085e8 <__ssputs_r+0x80>
 8008582:	6825      	ldr	r5, [r4, #0]
 8008584:	6909      	ldr	r1, [r1, #16]
 8008586:	eba5 0901 	sub.w	r9, r5, r1
 800858a:	6965      	ldr	r5, [r4, #20]
 800858c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008590:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008594:	3301      	adds	r3, #1
 8008596:	444b      	add	r3, r9
 8008598:	106d      	asrs	r5, r5, #1
 800859a:	429d      	cmp	r5, r3
 800859c:	bf38      	it	cc
 800859e:	461d      	movcc	r5, r3
 80085a0:	0553      	lsls	r3, r2, #21
 80085a2:	d531      	bpl.n	8008608 <__ssputs_r+0xa0>
 80085a4:	4629      	mov	r1, r5
 80085a6:	f7ff fdc5 	bl	8008134 <_malloc_r>
 80085aa:	4606      	mov	r6, r0
 80085ac:	b950      	cbnz	r0, 80085c4 <__ssputs_r+0x5c>
 80085ae:	230c      	movs	r3, #12
 80085b0:	f8ca 3000 	str.w	r3, [sl]
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c4:	6921      	ldr	r1, [r4, #16]
 80085c6:	464a      	mov	r2, r9
 80085c8:	f000 fefe 	bl	80093c8 <memcpy>
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	6126      	str	r6, [r4, #16]
 80085da:	6165      	str	r5, [r4, #20]
 80085dc:	444e      	add	r6, r9
 80085de:	eba5 0509 	sub.w	r5, r5, r9
 80085e2:	6026      	str	r6, [r4, #0]
 80085e4:	60a5      	str	r5, [r4, #8]
 80085e6:	463e      	mov	r6, r7
 80085e8:	42be      	cmp	r6, r7
 80085ea:	d900      	bls.n	80085ee <__ssputs_r+0x86>
 80085ec:	463e      	mov	r6, r7
 80085ee:	4632      	mov	r2, r6
 80085f0:	6820      	ldr	r0, [r4, #0]
 80085f2:	4641      	mov	r1, r8
 80085f4:	f000 fef6 	bl	80093e4 <memmove>
 80085f8:	68a3      	ldr	r3, [r4, #8]
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	1b9b      	subs	r3, r3, r6
 80085fe:	4432      	add	r2, r6
 8008600:	60a3      	str	r3, [r4, #8]
 8008602:	6022      	str	r2, [r4, #0]
 8008604:	2000      	movs	r0, #0
 8008606:	e7db      	b.n	80085c0 <__ssputs_r+0x58>
 8008608:	462a      	mov	r2, r5
 800860a:	f7ff ff87 	bl	800851c <_realloc_r>
 800860e:	4606      	mov	r6, r0
 8008610:	2800      	cmp	r0, #0
 8008612:	d1e1      	bne.n	80085d8 <__ssputs_r+0x70>
 8008614:	6921      	ldr	r1, [r4, #16]
 8008616:	4650      	mov	r0, sl
 8008618:	f7ff fd3c 	bl	8008094 <_free_r>
 800861c:	e7c7      	b.n	80085ae <__ssputs_r+0x46>
	...

08008620 <_svfiprintf_r>:
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	4698      	mov	r8, r3
 8008626:	898b      	ldrh	r3, [r1, #12]
 8008628:	061b      	lsls	r3, r3, #24
 800862a:	b09d      	sub	sp, #116	; 0x74
 800862c:	4607      	mov	r7, r0
 800862e:	460d      	mov	r5, r1
 8008630:	4614      	mov	r4, r2
 8008632:	d50e      	bpl.n	8008652 <_svfiprintf_r+0x32>
 8008634:	690b      	ldr	r3, [r1, #16]
 8008636:	b963      	cbnz	r3, 8008652 <_svfiprintf_r+0x32>
 8008638:	2140      	movs	r1, #64	; 0x40
 800863a:	f7ff fd7b 	bl	8008134 <_malloc_r>
 800863e:	6028      	str	r0, [r5, #0]
 8008640:	6128      	str	r0, [r5, #16]
 8008642:	b920      	cbnz	r0, 800864e <_svfiprintf_r+0x2e>
 8008644:	230c      	movs	r3, #12
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	f04f 30ff 	mov.w	r0, #4294967295
 800864c:	e0d1      	b.n	80087f2 <_svfiprintf_r+0x1d2>
 800864e:	2340      	movs	r3, #64	; 0x40
 8008650:	616b      	str	r3, [r5, #20]
 8008652:	2300      	movs	r3, #0
 8008654:	9309      	str	r3, [sp, #36]	; 0x24
 8008656:	2320      	movs	r3, #32
 8008658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800865c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008660:	2330      	movs	r3, #48	; 0x30
 8008662:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800880c <_svfiprintf_r+0x1ec>
 8008666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800866a:	f04f 0901 	mov.w	r9, #1
 800866e:	4623      	mov	r3, r4
 8008670:	469a      	mov	sl, r3
 8008672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008676:	b10a      	cbz	r2, 800867c <_svfiprintf_r+0x5c>
 8008678:	2a25      	cmp	r2, #37	; 0x25
 800867a:	d1f9      	bne.n	8008670 <_svfiprintf_r+0x50>
 800867c:	ebba 0b04 	subs.w	fp, sl, r4
 8008680:	d00b      	beq.n	800869a <_svfiprintf_r+0x7a>
 8008682:	465b      	mov	r3, fp
 8008684:	4622      	mov	r2, r4
 8008686:	4629      	mov	r1, r5
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff ff6d 	bl	8008568 <__ssputs_r>
 800868e:	3001      	adds	r0, #1
 8008690:	f000 80aa 	beq.w	80087e8 <_svfiprintf_r+0x1c8>
 8008694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008696:	445a      	add	r2, fp
 8008698:	9209      	str	r2, [sp, #36]	; 0x24
 800869a:	f89a 3000 	ldrb.w	r3, [sl]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 80a2 	beq.w	80087e8 <_svfiprintf_r+0x1c8>
 80086a4:	2300      	movs	r3, #0
 80086a6:	f04f 32ff 	mov.w	r2, #4294967295
 80086aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ae:	f10a 0a01 	add.w	sl, sl, #1
 80086b2:	9304      	str	r3, [sp, #16]
 80086b4:	9307      	str	r3, [sp, #28]
 80086b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086ba:	931a      	str	r3, [sp, #104]	; 0x68
 80086bc:	4654      	mov	r4, sl
 80086be:	2205      	movs	r2, #5
 80086c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c4:	4851      	ldr	r0, [pc, #324]	; (800880c <_svfiprintf_r+0x1ec>)
 80086c6:	f7f7 fdd3 	bl	8000270 <memchr>
 80086ca:	9a04      	ldr	r2, [sp, #16]
 80086cc:	b9d8      	cbnz	r0, 8008706 <_svfiprintf_r+0xe6>
 80086ce:	06d0      	lsls	r0, r2, #27
 80086d0:	bf44      	itt	mi
 80086d2:	2320      	movmi	r3, #32
 80086d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d8:	0711      	lsls	r1, r2, #28
 80086da:	bf44      	itt	mi
 80086dc:	232b      	movmi	r3, #43	; 0x2b
 80086de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086e2:	f89a 3000 	ldrb.w	r3, [sl]
 80086e6:	2b2a      	cmp	r3, #42	; 0x2a
 80086e8:	d015      	beq.n	8008716 <_svfiprintf_r+0xf6>
 80086ea:	9a07      	ldr	r2, [sp, #28]
 80086ec:	4654      	mov	r4, sl
 80086ee:	2000      	movs	r0, #0
 80086f0:	f04f 0c0a 	mov.w	ip, #10
 80086f4:	4621      	mov	r1, r4
 80086f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086fa:	3b30      	subs	r3, #48	; 0x30
 80086fc:	2b09      	cmp	r3, #9
 80086fe:	d94e      	bls.n	800879e <_svfiprintf_r+0x17e>
 8008700:	b1b0      	cbz	r0, 8008730 <_svfiprintf_r+0x110>
 8008702:	9207      	str	r2, [sp, #28]
 8008704:	e014      	b.n	8008730 <_svfiprintf_r+0x110>
 8008706:	eba0 0308 	sub.w	r3, r0, r8
 800870a:	fa09 f303 	lsl.w	r3, r9, r3
 800870e:	4313      	orrs	r3, r2
 8008710:	9304      	str	r3, [sp, #16]
 8008712:	46a2      	mov	sl, r4
 8008714:	e7d2      	b.n	80086bc <_svfiprintf_r+0x9c>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	1d19      	adds	r1, r3, #4
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	9103      	str	r1, [sp, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfbb      	ittet	lt
 8008722:	425b      	neglt	r3, r3
 8008724:	f042 0202 	orrlt.w	r2, r2, #2
 8008728:	9307      	strge	r3, [sp, #28]
 800872a:	9307      	strlt	r3, [sp, #28]
 800872c:	bfb8      	it	lt
 800872e:	9204      	strlt	r2, [sp, #16]
 8008730:	7823      	ldrb	r3, [r4, #0]
 8008732:	2b2e      	cmp	r3, #46	; 0x2e
 8008734:	d10c      	bne.n	8008750 <_svfiprintf_r+0x130>
 8008736:	7863      	ldrb	r3, [r4, #1]
 8008738:	2b2a      	cmp	r3, #42	; 0x2a
 800873a:	d135      	bne.n	80087a8 <_svfiprintf_r+0x188>
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	1d1a      	adds	r2, r3, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	9203      	str	r2, [sp, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	bfb8      	it	lt
 8008748:	f04f 33ff 	movlt.w	r3, #4294967295
 800874c:	3402      	adds	r4, #2
 800874e:	9305      	str	r3, [sp, #20]
 8008750:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800881c <_svfiprintf_r+0x1fc>
 8008754:	7821      	ldrb	r1, [r4, #0]
 8008756:	2203      	movs	r2, #3
 8008758:	4650      	mov	r0, sl
 800875a:	f7f7 fd89 	bl	8000270 <memchr>
 800875e:	b140      	cbz	r0, 8008772 <_svfiprintf_r+0x152>
 8008760:	2340      	movs	r3, #64	; 0x40
 8008762:	eba0 000a 	sub.w	r0, r0, sl
 8008766:	fa03 f000 	lsl.w	r0, r3, r0
 800876a:	9b04      	ldr	r3, [sp, #16]
 800876c:	4303      	orrs	r3, r0
 800876e:	3401      	adds	r4, #1
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008776:	4826      	ldr	r0, [pc, #152]	; (8008810 <_svfiprintf_r+0x1f0>)
 8008778:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800877c:	2206      	movs	r2, #6
 800877e:	f7f7 fd77 	bl	8000270 <memchr>
 8008782:	2800      	cmp	r0, #0
 8008784:	d038      	beq.n	80087f8 <_svfiprintf_r+0x1d8>
 8008786:	4b23      	ldr	r3, [pc, #140]	; (8008814 <_svfiprintf_r+0x1f4>)
 8008788:	bb1b      	cbnz	r3, 80087d2 <_svfiprintf_r+0x1b2>
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	3307      	adds	r3, #7
 800878e:	f023 0307 	bic.w	r3, r3, #7
 8008792:	3308      	adds	r3, #8
 8008794:	9303      	str	r3, [sp, #12]
 8008796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008798:	4433      	add	r3, r6
 800879a:	9309      	str	r3, [sp, #36]	; 0x24
 800879c:	e767      	b.n	800866e <_svfiprintf_r+0x4e>
 800879e:	fb0c 3202 	mla	r2, ip, r2, r3
 80087a2:	460c      	mov	r4, r1
 80087a4:	2001      	movs	r0, #1
 80087a6:	e7a5      	b.n	80086f4 <_svfiprintf_r+0xd4>
 80087a8:	2300      	movs	r3, #0
 80087aa:	3401      	adds	r4, #1
 80087ac:	9305      	str	r3, [sp, #20]
 80087ae:	4619      	mov	r1, r3
 80087b0:	f04f 0c0a 	mov.w	ip, #10
 80087b4:	4620      	mov	r0, r4
 80087b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087ba:	3a30      	subs	r2, #48	; 0x30
 80087bc:	2a09      	cmp	r2, #9
 80087be:	d903      	bls.n	80087c8 <_svfiprintf_r+0x1a8>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0c5      	beq.n	8008750 <_svfiprintf_r+0x130>
 80087c4:	9105      	str	r1, [sp, #20]
 80087c6:	e7c3      	b.n	8008750 <_svfiprintf_r+0x130>
 80087c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80087cc:	4604      	mov	r4, r0
 80087ce:	2301      	movs	r3, #1
 80087d0:	e7f0      	b.n	80087b4 <_svfiprintf_r+0x194>
 80087d2:	ab03      	add	r3, sp, #12
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	462a      	mov	r2, r5
 80087d8:	4b0f      	ldr	r3, [pc, #60]	; (8008818 <_svfiprintf_r+0x1f8>)
 80087da:	a904      	add	r1, sp, #16
 80087dc:	4638      	mov	r0, r7
 80087de:	f3af 8000 	nop.w
 80087e2:	1c42      	adds	r2, r0, #1
 80087e4:	4606      	mov	r6, r0
 80087e6:	d1d6      	bne.n	8008796 <_svfiprintf_r+0x176>
 80087e8:	89ab      	ldrh	r3, [r5, #12]
 80087ea:	065b      	lsls	r3, r3, #25
 80087ec:	f53f af2c 	bmi.w	8008648 <_svfiprintf_r+0x28>
 80087f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087f2:	b01d      	add	sp, #116	; 0x74
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	ab03      	add	r3, sp, #12
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	462a      	mov	r2, r5
 80087fe:	4b06      	ldr	r3, [pc, #24]	; (8008818 <_svfiprintf_r+0x1f8>)
 8008800:	a904      	add	r1, sp, #16
 8008802:	4638      	mov	r0, r7
 8008804:	f000 f9d4 	bl	8008bb0 <_printf_i>
 8008808:	e7eb      	b.n	80087e2 <_svfiprintf_r+0x1c2>
 800880a:	bf00      	nop
 800880c:	0800b33d 	.word	0x0800b33d
 8008810:	0800b347 	.word	0x0800b347
 8008814:	00000000 	.word	0x00000000
 8008818:	08008569 	.word	0x08008569
 800881c:	0800b343 	.word	0x0800b343

08008820 <__sfputc_r>:
 8008820:	6893      	ldr	r3, [r2, #8]
 8008822:	3b01      	subs	r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	b410      	push	{r4}
 8008828:	6093      	str	r3, [r2, #8]
 800882a:	da08      	bge.n	800883e <__sfputc_r+0x1e>
 800882c:	6994      	ldr	r4, [r2, #24]
 800882e:	42a3      	cmp	r3, r4
 8008830:	db01      	blt.n	8008836 <__sfputc_r+0x16>
 8008832:	290a      	cmp	r1, #10
 8008834:	d103      	bne.n	800883e <__sfputc_r+0x1e>
 8008836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800883a:	f000 badf 	b.w	8008dfc <__swbuf_r>
 800883e:	6813      	ldr	r3, [r2, #0]
 8008840:	1c58      	adds	r0, r3, #1
 8008842:	6010      	str	r0, [r2, #0]
 8008844:	7019      	strb	r1, [r3, #0]
 8008846:	4608      	mov	r0, r1
 8008848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800884c:	4770      	bx	lr

0800884e <__sfputs_r>:
 800884e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008850:	4606      	mov	r6, r0
 8008852:	460f      	mov	r7, r1
 8008854:	4614      	mov	r4, r2
 8008856:	18d5      	adds	r5, r2, r3
 8008858:	42ac      	cmp	r4, r5
 800885a:	d101      	bne.n	8008860 <__sfputs_r+0x12>
 800885c:	2000      	movs	r0, #0
 800885e:	e007      	b.n	8008870 <__sfputs_r+0x22>
 8008860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008864:	463a      	mov	r2, r7
 8008866:	4630      	mov	r0, r6
 8008868:	f7ff ffda 	bl	8008820 <__sfputc_r>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d1f3      	bne.n	8008858 <__sfputs_r+0xa>
 8008870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008874 <_vfiprintf_r>:
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	460d      	mov	r5, r1
 800887a:	b09d      	sub	sp, #116	; 0x74
 800887c:	4614      	mov	r4, r2
 800887e:	4698      	mov	r8, r3
 8008880:	4606      	mov	r6, r0
 8008882:	b118      	cbz	r0, 800888c <_vfiprintf_r+0x18>
 8008884:	6983      	ldr	r3, [r0, #24]
 8008886:	b90b      	cbnz	r3, 800888c <_vfiprintf_r+0x18>
 8008888:	f000 fc9a 	bl	80091c0 <__sinit>
 800888c:	4b89      	ldr	r3, [pc, #548]	; (8008ab4 <_vfiprintf_r+0x240>)
 800888e:	429d      	cmp	r5, r3
 8008890:	d11b      	bne.n	80088ca <_vfiprintf_r+0x56>
 8008892:	6875      	ldr	r5, [r6, #4]
 8008894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008896:	07d9      	lsls	r1, r3, #31
 8008898:	d405      	bmi.n	80088a6 <_vfiprintf_r+0x32>
 800889a:	89ab      	ldrh	r3, [r5, #12]
 800889c:	059a      	lsls	r2, r3, #22
 800889e:	d402      	bmi.n	80088a6 <_vfiprintf_r+0x32>
 80088a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088a2:	f000 fd2b 	bl	80092fc <__retarget_lock_acquire_recursive>
 80088a6:	89ab      	ldrh	r3, [r5, #12]
 80088a8:	071b      	lsls	r3, r3, #28
 80088aa:	d501      	bpl.n	80088b0 <_vfiprintf_r+0x3c>
 80088ac:	692b      	ldr	r3, [r5, #16]
 80088ae:	b9eb      	cbnz	r3, 80088ec <_vfiprintf_r+0x78>
 80088b0:	4629      	mov	r1, r5
 80088b2:	4630      	mov	r0, r6
 80088b4:	f000 faf4 	bl	8008ea0 <__swsetup_r>
 80088b8:	b1c0      	cbz	r0, 80088ec <_vfiprintf_r+0x78>
 80088ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088bc:	07dc      	lsls	r4, r3, #31
 80088be:	d50e      	bpl.n	80088de <_vfiprintf_r+0x6a>
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	b01d      	add	sp, #116	; 0x74
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	4b7b      	ldr	r3, [pc, #492]	; (8008ab8 <_vfiprintf_r+0x244>)
 80088cc:	429d      	cmp	r5, r3
 80088ce:	d101      	bne.n	80088d4 <_vfiprintf_r+0x60>
 80088d0:	68b5      	ldr	r5, [r6, #8]
 80088d2:	e7df      	b.n	8008894 <_vfiprintf_r+0x20>
 80088d4:	4b79      	ldr	r3, [pc, #484]	; (8008abc <_vfiprintf_r+0x248>)
 80088d6:	429d      	cmp	r5, r3
 80088d8:	bf08      	it	eq
 80088da:	68f5      	ldreq	r5, [r6, #12]
 80088dc:	e7da      	b.n	8008894 <_vfiprintf_r+0x20>
 80088de:	89ab      	ldrh	r3, [r5, #12]
 80088e0:	0598      	lsls	r0, r3, #22
 80088e2:	d4ed      	bmi.n	80088c0 <_vfiprintf_r+0x4c>
 80088e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088e6:	f000 fd0a 	bl	80092fe <__retarget_lock_release_recursive>
 80088ea:	e7e9      	b.n	80088c0 <_vfiprintf_r+0x4c>
 80088ec:	2300      	movs	r3, #0
 80088ee:	9309      	str	r3, [sp, #36]	; 0x24
 80088f0:	2320      	movs	r3, #32
 80088f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088fa:	2330      	movs	r3, #48	; 0x30
 80088fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ac0 <_vfiprintf_r+0x24c>
 8008900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008904:	f04f 0901 	mov.w	r9, #1
 8008908:	4623      	mov	r3, r4
 800890a:	469a      	mov	sl, r3
 800890c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008910:	b10a      	cbz	r2, 8008916 <_vfiprintf_r+0xa2>
 8008912:	2a25      	cmp	r2, #37	; 0x25
 8008914:	d1f9      	bne.n	800890a <_vfiprintf_r+0x96>
 8008916:	ebba 0b04 	subs.w	fp, sl, r4
 800891a:	d00b      	beq.n	8008934 <_vfiprintf_r+0xc0>
 800891c:	465b      	mov	r3, fp
 800891e:	4622      	mov	r2, r4
 8008920:	4629      	mov	r1, r5
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff ff93 	bl	800884e <__sfputs_r>
 8008928:	3001      	adds	r0, #1
 800892a:	f000 80aa 	beq.w	8008a82 <_vfiprintf_r+0x20e>
 800892e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008930:	445a      	add	r2, fp
 8008932:	9209      	str	r2, [sp, #36]	; 0x24
 8008934:	f89a 3000 	ldrb.w	r3, [sl]
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 80a2 	beq.w	8008a82 <_vfiprintf_r+0x20e>
 800893e:	2300      	movs	r3, #0
 8008940:	f04f 32ff 	mov.w	r2, #4294967295
 8008944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008948:	f10a 0a01 	add.w	sl, sl, #1
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	9307      	str	r3, [sp, #28]
 8008950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008954:	931a      	str	r3, [sp, #104]	; 0x68
 8008956:	4654      	mov	r4, sl
 8008958:	2205      	movs	r2, #5
 800895a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800895e:	4858      	ldr	r0, [pc, #352]	; (8008ac0 <_vfiprintf_r+0x24c>)
 8008960:	f7f7 fc86 	bl	8000270 <memchr>
 8008964:	9a04      	ldr	r2, [sp, #16]
 8008966:	b9d8      	cbnz	r0, 80089a0 <_vfiprintf_r+0x12c>
 8008968:	06d1      	lsls	r1, r2, #27
 800896a:	bf44      	itt	mi
 800896c:	2320      	movmi	r3, #32
 800896e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008972:	0713      	lsls	r3, r2, #28
 8008974:	bf44      	itt	mi
 8008976:	232b      	movmi	r3, #43	; 0x2b
 8008978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800897c:	f89a 3000 	ldrb.w	r3, [sl]
 8008980:	2b2a      	cmp	r3, #42	; 0x2a
 8008982:	d015      	beq.n	80089b0 <_vfiprintf_r+0x13c>
 8008984:	9a07      	ldr	r2, [sp, #28]
 8008986:	4654      	mov	r4, sl
 8008988:	2000      	movs	r0, #0
 800898a:	f04f 0c0a 	mov.w	ip, #10
 800898e:	4621      	mov	r1, r4
 8008990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008994:	3b30      	subs	r3, #48	; 0x30
 8008996:	2b09      	cmp	r3, #9
 8008998:	d94e      	bls.n	8008a38 <_vfiprintf_r+0x1c4>
 800899a:	b1b0      	cbz	r0, 80089ca <_vfiprintf_r+0x156>
 800899c:	9207      	str	r2, [sp, #28]
 800899e:	e014      	b.n	80089ca <_vfiprintf_r+0x156>
 80089a0:	eba0 0308 	sub.w	r3, r0, r8
 80089a4:	fa09 f303 	lsl.w	r3, r9, r3
 80089a8:	4313      	orrs	r3, r2
 80089aa:	9304      	str	r3, [sp, #16]
 80089ac:	46a2      	mov	sl, r4
 80089ae:	e7d2      	b.n	8008956 <_vfiprintf_r+0xe2>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	1d19      	adds	r1, r3, #4
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	9103      	str	r1, [sp, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	bfbb      	ittet	lt
 80089bc:	425b      	neglt	r3, r3
 80089be:	f042 0202 	orrlt.w	r2, r2, #2
 80089c2:	9307      	strge	r3, [sp, #28]
 80089c4:	9307      	strlt	r3, [sp, #28]
 80089c6:	bfb8      	it	lt
 80089c8:	9204      	strlt	r2, [sp, #16]
 80089ca:	7823      	ldrb	r3, [r4, #0]
 80089cc:	2b2e      	cmp	r3, #46	; 0x2e
 80089ce:	d10c      	bne.n	80089ea <_vfiprintf_r+0x176>
 80089d0:	7863      	ldrb	r3, [r4, #1]
 80089d2:	2b2a      	cmp	r3, #42	; 0x2a
 80089d4:	d135      	bne.n	8008a42 <_vfiprintf_r+0x1ce>
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	1d1a      	adds	r2, r3, #4
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	9203      	str	r2, [sp, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfb8      	it	lt
 80089e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80089e6:	3402      	adds	r4, #2
 80089e8:	9305      	str	r3, [sp, #20]
 80089ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ad0 <_vfiprintf_r+0x25c>
 80089ee:	7821      	ldrb	r1, [r4, #0]
 80089f0:	2203      	movs	r2, #3
 80089f2:	4650      	mov	r0, sl
 80089f4:	f7f7 fc3c 	bl	8000270 <memchr>
 80089f8:	b140      	cbz	r0, 8008a0c <_vfiprintf_r+0x198>
 80089fa:	2340      	movs	r3, #64	; 0x40
 80089fc:	eba0 000a 	sub.w	r0, r0, sl
 8008a00:	fa03 f000 	lsl.w	r0, r3, r0
 8008a04:	9b04      	ldr	r3, [sp, #16]
 8008a06:	4303      	orrs	r3, r0
 8008a08:	3401      	adds	r4, #1
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a10:	482c      	ldr	r0, [pc, #176]	; (8008ac4 <_vfiprintf_r+0x250>)
 8008a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a16:	2206      	movs	r2, #6
 8008a18:	f7f7 fc2a 	bl	8000270 <memchr>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d03f      	beq.n	8008aa0 <_vfiprintf_r+0x22c>
 8008a20:	4b29      	ldr	r3, [pc, #164]	; (8008ac8 <_vfiprintf_r+0x254>)
 8008a22:	bb1b      	cbnz	r3, 8008a6c <_vfiprintf_r+0x1f8>
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	3307      	adds	r3, #7
 8008a28:	f023 0307 	bic.w	r3, r3, #7
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a32:	443b      	add	r3, r7
 8008a34:	9309      	str	r3, [sp, #36]	; 0x24
 8008a36:	e767      	b.n	8008908 <_vfiprintf_r+0x94>
 8008a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	2001      	movs	r0, #1
 8008a40:	e7a5      	b.n	800898e <_vfiprintf_r+0x11a>
 8008a42:	2300      	movs	r3, #0
 8008a44:	3401      	adds	r4, #1
 8008a46:	9305      	str	r3, [sp, #20]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f04f 0c0a 	mov.w	ip, #10
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a54:	3a30      	subs	r2, #48	; 0x30
 8008a56:	2a09      	cmp	r2, #9
 8008a58:	d903      	bls.n	8008a62 <_vfiprintf_r+0x1ee>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0c5      	beq.n	80089ea <_vfiprintf_r+0x176>
 8008a5e:	9105      	str	r1, [sp, #20]
 8008a60:	e7c3      	b.n	80089ea <_vfiprintf_r+0x176>
 8008a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a66:	4604      	mov	r4, r0
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e7f0      	b.n	8008a4e <_vfiprintf_r+0x1da>
 8008a6c:	ab03      	add	r3, sp, #12
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	462a      	mov	r2, r5
 8008a72:	4b16      	ldr	r3, [pc, #88]	; (8008acc <_vfiprintf_r+0x258>)
 8008a74:	a904      	add	r1, sp, #16
 8008a76:	4630      	mov	r0, r6
 8008a78:	f3af 8000 	nop.w
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	1c78      	adds	r0, r7, #1
 8008a80:	d1d6      	bne.n	8008a30 <_vfiprintf_r+0x1bc>
 8008a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a84:	07d9      	lsls	r1, r3, #31
 8008a86:	d405      	bmi.n	8008a94 <_vfiprintf_r+0x220>
 8008a88:	89ab      	ldrh	r3, [r5, #12]
 8008a8a:	059a      	lsls	r2, r3, #22
 8008a8c:	d402      	bmi.n	8008a94 <_vfiprintf_r+0x220>
 8008a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a90:	f000 fc35 	bl	80092fe <__retarget_lock_release_recursive>
 8008a94:	89ab      	ldrh	r3, [r5, #12]
 8008a96:	065b      	lsls	r3, r3, #25
 8008a98:	f53f af12 	bmi.w	80088c0 <_vfiprintf_r+0x4c>
 8008a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a9e:	e711      	b.n	80088c4 <_vfiprintf_r+0x50>
 8008aa0:	ab03      	add	r3, sp, #12
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	4b09      	ldr	r3, [pc, #36]	; (8008acc <_vfiprintf_r+0x258>)
 8008aa8:	a904      	add	r1, sp, #16
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f000 f880 	bl	8008bb0 <_printf_i>
 8008ab0:	e7e4      	b.n	8008a7c <_vfiprintf_r+0x208>
 8008ab2:	bf00      	nop
 8008ab4:	0800b390 	.word	0x0800b390
 8008ab8:	0800b3b0 	.word	0x0800b3b0
 8008abc:	0800b370 	.word	0x0800b370
 8008ac0:	0800b33d 	.word	0x0800b33d
 8008ac4:	0800b347 	.word	0x0800b347
 8008ac8:	00000000 	.word	0x00000000
 8008acc:	0800884f 	.word	0x0800884f
 8008ad0:	0800b343 	.word	0x0800b343

08008ad4 <_printf_common>:
 8008ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad8:	4616      	mov	r6, r2
 8008ada:	4699      	mov	r9, r3
 8008adc:	688a      	ldr	r2, [r1, #8]
 8008ade:	690b      	ldr	r3, [r1, #16]
 8008ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	bfb8      	it	lt
 8008ae8:	4613      	movlt	r3, r2
 8008aea:	6033      	str	r3, [r6, #0]
 8008aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008af0:	4607      	mov	r7, r0
 8008af2:	460c      	mov	r4, r1
 8008af4:	b10a      	cbz	r2, 8008afa <_printf_common+0x26>
 8008af6:	3301      	adds	r3, #1
 8008af8:	6033      	str	r3, [r6, #0]
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	0699      	lsls	r1, r3, #26
 8008afe:	bf42      	ittt	mi
 8008b00:	6833      	ldrmi	r3, [r6, #0]
 8008b02:	3302      	addmi	r3, #2
 8008b04:	6033      	strmi	r3, [r6, #0]
 8008b06:	6825      	ldr	r5, [r4, #0]
 8008b08:	f015 0506 	ands.w	r5, r5, #6
 8008b0c:	d106      	bne.n	8008b1c <_printf_common+0x48>
 8008b0e:	f104 0a19 	add.w	sl, r4, #25
 8008b12:	68e3      	ldr	r3, [r4, #12]
 8008b14:	6832      	ldr	r2, [r6, #0]
 8008b16:	1a9b      	subs	r3, r3, r2
 8008b18:	42ab      	cmp	r3, r5
 8008b1a:	dc26      	bgt.n	8008b6a <_printf_common+0x96>
 8008b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b20:	1e13      	subs	r3, r2, #0
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	bf18      	it	ne
 8008b26:	2301      	movne	r3, #1
 8008b28:	0692      	lsls	r2, r2, #26
 8008b2a:	d42b      	bmi.n	8008b84 <_printf_common+0xb0>
 8008b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b30:	4649      	mov	r1, r9
 8008b32:	4638      	mov	r0, r7
 8008b34:	47c0      	blx	r8
 8008b36:	3001      	adds	r0, #1
 8008b38:	d01e      	beq.n	8008b78 <_printf_common+0xa4>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	68e5      	ldr	r5, [r4, #12]
 8008b3e:	6832      	ldr	r2, [r6, #0]
 8008b40:	f003 0306 	and.w	r3, r3, #6
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	bf08      	it	eq
 8008b48:	1aad      	subeq	r5, r5, r2
 8008b4a:	68a3      	ldr	r3, [r4, #8]
 8008b4c:	6922      	ldr	r2, [r4, #16]
 8008b4e:	bf0c      	ite	eq
 8008b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b54:	2500      	movne	r5, #0
 8008b56:	4293      	cmp	r3, r2
 8008b58:	bfc4      	itt	gt
 8008b5a:	1a9b      	subgt	r3, r3, r2
 8008b5c:	18ed      	addgt	r5, r5, r3
 8008b5e:	2600      	movs	r6, #0
 8008b60:	341a      	adds	r4, #26
 8008b62:	42b5      	cmp	r5, r6
 8008b64:	d11a      	bne.n	8008b9c <_printf_common+0xc8>
 8008b66:	2000      	movs	r0, #0
 8008b68:	e008      	b.n	8008b7c <_printf_common+0xa8>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4652      	mov	r2, sl
 8008b6e:	4649      	mov	r1, r9
 8008b70:	4638      	mov	r0, r7
 8008b72:	47c0      	blx	r8
 8008b74:	3001      	adds	r0, #1
 8008b76:	d103      	bne.n	8008b80 <_printf_common+0xac>
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b80:	3501      	adds	r5, #1
 8008b82:	e7c6      	b.n	8008b12 <_printf_common+0x3e>
 8008b84:	18e1      	adds	r1, r4, r3
 8008b86:	1c5a      	adds	r2, r3, #1
 8008b88:	2030      	movs	r0, #48	; 0x30
 8008b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b8e:	4422      	add	r2, r4
 8008b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b98:	3302      	adds	r3, #2
 8008b9a:	e7c7      	b.n	8008b2c <_printf_common+0x58>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	47c0      	blx	r8
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d0e6      	beq.n	8008b78 <_printf_common+0xa4>
 8008baa:	3601      	adds	r6, #1
 8008bac:	e7d9      	b.n	8008b62 <_printf_common+0x8e>
	...

08008bb0 <_printf_i>:
 8008bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	4691      	mov	r9, r2
 8008bb8:	7e27      	ldrb	r7, [r4, #24]
 8008bba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bbc:	2f78      	cmp	r7, #120	; 0x78
 8008bbe:	4680      	mov	r8, r0
 8008bc0:	469a      	mov	sl, r3
 8008bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bc6:	d807      	bhi.n	8008bd8 <_printf_i+0x28>
 8008bc8:	2f62      	cmp	r7, #98	; 0x62
 8008bca:	d80a      	bhi.n	8008be2 <_printf_i+0x32>
 8008bcc:	2f00      	cmp	r7, #0
 8008bce:	f000 80d8 	beq.w	8008d82 <_printf_i+0x1d2>
 8008bd2:	2f58      	cmp	r7, #88	; 0x58
 8008bd4:	f000 80a3 	beq.w	8008d1e <_printf_i+0x16e>
 8008bd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008be0:	e03a      	b.n	8008c58 <_printf_i+0xa8>
 8008be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008be6:	2b15      	cmp	r3, #21
 8008be8:	d8f6      	bhi.n	8008bd8 <_printf_i+0x28>
 8008bea:	a001      	add	r0, pc, #4	; (adr r0, 8008bf0 <_printf_i+0x40>)
 8008bec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008bf0:	08008c49 	.word	0x08008c49
 8008bf4:	08008c5d 	.word	0x08008c5d
 8008bf8:	08008bd9 	.word	0x08008bd9
 8008bfc:	08008bd9 	.word	0x08008bd9
 8008c00:	08008bd9 	.word	0x08008bd9
 8008c04:	08008bd9 	.word	0x08008bd9
 8008c08:	08008c5d 	.word	0x08008c5d
 8008c0c:	08008bd9 	.word	0x08008bd9
 8008c10:	08008bd9 	.word	0x08008bd9
 8008c14:	08008bd9 	.word	0x08008bd9
 8008c18:	08008bd9 	.word	0x08008bd9
 8008c1c:	08008d69 	.word	0x08008d69
 8008c20:	08008c8d 	.word	0x08008c8d
 8008c24:	08008d4b 	.word	0x08008d4b
 8008c28:	08008bd9 	.word	0x08008bd9
 8008c2c:	08008bd9 	.word	0x08008bd9
 8008c30:	08008d8b 	.word	0x08008d8b
 8008c34:	08008bd9 	.word	0x08008bd9
 8008c38:	08008c8d 	.word	0x08008c8d
 8008c3c:	08008bd9 	.word	0x08008bd9
 8008c40:	08008bd9 	.word	0x08008bd9
 8008c44:	08008d53 	.word	0x08008d53
 8008c48:	680b      	ldr	r3, [r1, #0]
 8008c4a:	1d1a      	adds	r2, r3, #4
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	600a      	str	r2, [r1, #0]
 8008c50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e0a3      	b.n	8008da4 <_printf_i+0x1f4>
 8008c5c:	6825      	ldr	r5, [r4, #0]
 8008c5e:	6808      	ldr	r0, [r1, #0]
 8008c60:	062e      	lsls	r6, r5, #24
 8008c62:	f100 0304 	add.w	r3, r0, #4
 8008c66:	d50a      	bpl.n	8008c7e <_printf_i+0xce>
 8008c68:	6805      	ldr	r5, [r0, #0]
 8008c6a:	600b      	str	r3, [r1, #0]
 8008c6c:	2d00      	cmp	r5, #0
 8008c6e:	da03      	bge.n	8008c78 <_printf_i+0xc8>
 8008c70:	232d      	movs	r3, #45	; 0x2d
 8008c72:	426d      	negs	r5, r5
 8008c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c78:	485e      	ldr	r0, [pc, #376]	; (8008df4 <_printf_i+0x244>)
 8008c7a:	230a      	movs	r3, #10
 8008c7c:	e019      	b.n	8008cb2 <_printf_i+0x102>
 8008c7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c82:	6805      	ldr	r5, [r0, #0]
 8008c84:	600b      	str	r3, [r1, #0]
 8008c86:	bf18      	it	ne
 8008c88:	b22d      	sxthne	r5, r5
 8008c8a:	e7ef      	b.n	8008c6c <_printf_i+0xbc>
 8008c8c:	680b      	ldr	r3, [r1, #0]
 8008c8e:	6825      	ldr	r5, [r4, #0]
 8008c90:	1d18      	adds	r0, r3, #4
 8008c92:	6008      	str	r0, [r1, #0]
 8008c94:	0628      	lsls	r0, r5, #24
 8008c96:	d501      	bpl.n	8008c9c <_printf_i+0xec>
 8008c98:	681d      	ldr	r5, [r3, #0]
 8008c9a:	e002      	b.n	8008ca2 <_printf_i+0xf2>
 8008c9c:	0669      	lsls	r1, r5, #25
 8008c9e:	d5fb      	bpl.n	8008c98 <_printf_i+0xe8>
 8008ca0:	881d      	ldrh	r5, [r3, #0]
 8008ca2:	4854      	ldr	r0, [pc, #336]	; (8008df4 <_printf_i+0x244>)
 8008ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ca6:	bf0c      	ite	eq
 8008ca8:	2308      	moveq	r3, #8
 8008caa:	230a      	movne	r3, #10
 8008cac:	2100      	movs	r1, #0
 8008cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cb2:	6866      	ldr	r6, [r4, #4]
 8008cb4:	60a6      	str	r6, [r4, #8]
 8008cb6:	2e00      	cmp	r6, #0
 8008cb8:	bfa2      	ittt	ge
 8008cba:	6821      	ldrge	r1, [r4, #0]
 8008cbc:	f021 0104 	bicge.w	r1, r1, #4
 8008cc0:	6021      	strge	r1, [r4, #0]
 8008cc2:	b90d      	cbnz	r5, 8008cc8 <_printf_i+0x118>
 8008cc4:	2e00      	cmp	r6, #0
 8008cc6:	d04d      	beq.n	8008d64 <_printf_i+0x1b4>
 8008cc8:	4616      	mov	r6, r2
 8008cca:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cce:	fb03 5711 	mls	r7, r3, r1, r5
 8008cd2:	5dc7      	ldrb	r7, [r0, r7]
 8008cd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cd8:	462f      	mov	r7, r5
 8008cda:	42bb      	cmp	r3, r7
 8008cdc:	460d      	mov	r5, r1
 8008cde:	d9f4      	bls.n	8008cca <_printf_i+0x11a>
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d10b      	bne.n	8008cfc <_printf_i+0x14c>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	07df      	lsls	r7, r3, #31
 8008ce8:	d508      	bpl.n	8008cfc <_printf_i+0x14c>
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	6861      	ldr	r1, [r4, #4]
 8008cee:	4299      	cmp	r1, r3
 8008cf0:	bfde      	ittt	le
 8008cf2:	2330      	movle	r3, #48	; 0x30
 8008cf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cfc:	1b92      	subs	r2, r2, r6
 8008cfe:	6122      	str	r2, [r4, #16]
 8008d00:	f8cd a000 	str.w	sl, [sp]
 8008d04:	464b      	mov	r3, r9
 8008d06:	aa03      	add	r2, sp, #12
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	f7ff fee2 	bl	8008ad4 <_printf_common>
 8008d10:	3001      	adds	r0, #1
 8008d12:	d14c      	bne.n	8008dae <_printf_i+0x1fe>
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295
 8008d18:	b004      	add	sp, #16
 8008d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1e:	4835      	ldr	r0, [pc, #212]	; (8008df4 <_printf_i+0x244>)
 8008d20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	680e      	ldr	r6, [r1, #0]
 8008d28:	061f      	lsls	r7, r3, #24
 8008d2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d2e:	600e      	str	r6, [r1, #0]
 8008d30:	d514      	bpl.n	8008d5c <_printf_i+0x1ac>
 8008d32:	07d9      	lsls	r1, r3, #31
 8008d34:	bf44      	itt	mi
 8008d36:	f043 0320 	orrmi.w	r3, r3, #32
 8008d3a:	6023      	strmi	r3, [r4, #0]
 8008d3c:	b91d      	cbnz	r5, 8008d46 <_printf_i+0x196>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	f023 0320 	bic.w	r3, r3, #32
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	2310      	movs	r3, #16
 8008d48:	e7b0      	b.n	8008cac <_printf_i+0xfc>
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	f043 0320 	orr.w	r3, r3, #32
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	2378      	movs	r3, #120	; 0x78
 8008d54:	4828      	ldr	r0, [pc, #160]	; (8008df8 <_printf_i+0x248>)
 8008d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d5a:	e7e3      	b.n	8008d24 <_printf_i+0x174>
 8008d5c:	065e      	lsls	r6, r3, #25
 8008d5e:	bf48      	it	mi
 8008d60:	b2ad      	uxthmi	r5, r5
 8008d62:	e7e6      	b.n	8008d32 <_printf_i+0x182>
 8008d64:	4616      	mov	r6, r2
 8008d66:	e7bb      	b.n	8008ce0 <_printf_i+0x130>
 8008d68:	680b      	ldr	r3, [r1, #0]
 8008d6a:	6826      	ldr	r6, [r4, #0]
 8008d6c:	6960      	ldr	r0, [r4, #20]
 8008d6e:	1d1d      	adds	r5, r3, #4
 8008d70:	600d      	str	r5, [r1, #0]
 8008d72:	0635      	lsls	r5, r6, #24
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	d501      	bpl.n	8008d7c <_printf_i+0x1cc>
 8008d78:	6018      	str	r0, [r3, #0]
 8008d7a:	e002      	b.n	8008d82 <_printf_i+0x1d2>
 8008d7c:	0671      	lsls	r1, r6, #25
 8008d7e:	d5fb      	bpl.n	8008d78 <_printf_i+0x1c8>
 8008d80:	8018      	strh	r0, [r3, #0]
 8008d82:	2300      	movs	r3, #0
 8008d84:	6123      	str	r3, [r4, #16]
 8008d86:	4616      	mov	r6, r2
 8008d88:	e7ba      	b.n	8008d00 <_printf_i+0x150>
 8008d8a:	680b      	ldr	r3, [r1, #0]
 8008d8c:	1d1a      	adds	r2, r3, #4
 8008d8e:	600a      	str	r2, [r1, #0]
 8008d90:	681e      	ldr	r6, [r3, #0]
 8008d92:	6862      	ldr	r2, [r4, #4]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4630      	mov	r0, r6
 8008d98:	f7f7 fa6a 	bl	8000270 <memchr>
 8008d9c:	b108      	cbz	r0, 8008da2 <_printf_i+0x1f2>
 8008d9e:	1b80      	subs	r0, r0, r6
 8008da0:	6060      	str	r0, [r4, #4]
 8008da2:	6863      	ldr	r3, [r4, #4]
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	2300      	movs	r3, #0
 8008da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dac:	e7a8      	b.n	8008d00 <_printf_i+0x150>
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	4632      	mov	r2, r6
 8008db2:	4649      	mov	r1, r9
 8008db4:	4640      	mov	r0, r8
 8008db6:	47d0      	blx	sl
 8008db8:	3001      	adds	r0, #1
 8008dba:	d0ab      	beq.n	8008d14 <_printf_i+0x164>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	079b      	lsls	r3, r3, #30
 8008dc0:	d413      	bmi.n	8008dea <_printf_i+0x23a>
 8008dc2:	68e0      	ldr	r0, [r4, #12]
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	4298      	cmp	r0, r3
 8008dc8:	bfb8      	it	lt
 8008dca:	4618      	movlt	r0, r3
 8008dcc:	e7a4      	b.n	8008d18 <_printf_i+0x168>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	47d0      	blx	sl
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d09b      	beq.n	8008d14 <_printf_i+0x164>
 8008ddc:	3501      	adds	r5, #1
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	9903      	ldr	r1, [sp, #12]
 8008de2:	1a5b      	subs	r3, r3, r1
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	dcf2      	bgt.n	8008dce <_printf_i+0x21e>
 8008de8:	e7eb      	b.n	8008dc2 <_printf_i+0x212>
 8008dea:	2500      	movs	r5, #0
 8008dec:	f104 0619 	add.w	r6, r4, #25
 8008df0:	e7f5      	b.n	8008dde <_printf_i+0x22e>
 8008df2:	bf00      	nop
 8008df4:	0800b34e 	.word	0x0800b34e
 8008df8:	0800b35f 	.word	0x0800b35f

08008dfc <__swbuf_r>:
 8008dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfe:	460e      	mov	r6, r1
 8008e00:	4614      	mov	r4, r2
 8008e02:	4605      	mov	r5, r0
 8008e04:	b118      	cbz	r0, 8008e0e <__swbuf_r+0x12>
 8008e06:	6983      	ldr	r3, [r0, #24]
 8008e08:	b90b      	cbnz	r3, 8008e0e <__swbuf_r+0x12>
 8008e0a:	f000 f9d9 	bl	80091c0 <__sinit>
 8008e0e:	4b21      	ldr	r3, [pc, #132]	; (8008e94 <__swbuf_r+0x98>)
 8008e10:	429c      	cmp	r4, r3
 8008e12:	d12b      	bne.n	8008e6c <__swbuf_r+0x70>
 8008e14:	686c      	ldr	r4, [r5, #4]
 8008e16:	69a3      	ldr	r3, [r4, #24]
 8008e18:	60a3      	str	r3, [r4, #8]
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	071a      	lsls	r2, r3, #28
 8008e1e:	d52f      	bpl.n	8008e80 <__swbuf_r+0x84>
 8008e20:	6923      	ldr	r3, [r4, #16]
 8008e22:	b36b      	cbz	r3, 8008e80 <__swbuf_r+0x84>
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	6820      	ldr	r0, [r4, #0]
 8008e28:	1ac0      	subs	r0, r0, r3
 8008e2a:	6963      	ldr	r3, [r4, #20]
 8008e2c:	b2f6      	uxtb	r6, r6
 8008e2e:	4283      	cmp	r3, r0
 8008e30:	4637      	mov	r7, r6
 8008e32:	dc04      	bgt.n	8008e3e <__swbuf_r+0x42>
 8008e34:	4621      	mov	r1, r4
 8008e36:	4628      	mov	r0, r5
 8008e38:	f000 f92e 	bl	8009098 <_fflush_r>
 8008e3c:	bb30      	cbnz	r0, 8008e8c <__swbuf_r+0x90>
 8008e3e:	68a3      	ldr	r3, [r4, #8]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	60a3      	str	r3, [r4, #8]
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	6022      	str	r2, [r4, #0]
 8008e4a:	701e      	strb	r6, [r3, #0]
 8008e4c:	6963      	ldr	r3, [r4, #20]
 8008e4e:	3001      	adds	r0, #1
 8008e50:	4283      	cmp	r3, r0
 8008e52:	d004      	beq.n	8008e5e <__swbuf_r+0x62>
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	07db      	lsls	r3, r3, #31
 8008e58:	d506      	bpl.n	8008e68 <__swbuf_r+0x6c>
 8008e5a:	2e0a      	cmp	r6, #10
 8008e5c:	d104      	bne.n	8008e68 <__swbuf_r+0x6c>
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4628      	mov	r0, r5
 8008e62:	f000 f919 	bl	8009098 <_fflush_r>
 8008e66:	b988      	cbnz	r0, 8008e8c <__swbuf_r+0x90>
 8008e68:	4638      	mov	r0, r7
 8008e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <__swbuf_r+0x9c>)
 8008e6e:	429c      	cmp	r4, r3
 8008e70:	d101      	bne.n	8008e76 <__swbuf_r+0x7a>
 8008e72:	68ac      	ldr	r4, [r5, #8]
 8008e74:	e7cf      	b.n	8008e16 <__swbuf_r+0x1a>
 8008e76:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <__swbuf_r+0xa0>)
 8008e78:	429c      	cmp	r4, r3
 8008e7a:	bf08      	it	eq
 8008e7c:	68ec      	ldreq	r4, [r5, #12]
 8008e7e:	e7ca      	b.n	8008e16 <__swbuf_r+0x1a>
 8008e80:	4621      	mov	r1, r4
 8008e82:	4628      	mov	r0, r5
 8008e84:	f000 f80c 	bl	8008ea0 <__swsetup_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d0cb      	beq.n	8008e24 <__swbuf_r+0x28>
 8008e8c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e90:	e7ea      	b.n	8008e68 <__swbuf_r+0x6c>
 8008e92:	bf00      	nop
 8008e94:	0800b390 	.word	0x0800b390
 8008e98:	0800b3b0 	.word	0x0800b3b0
 8008e9c:	0800b370 	.word	0x0800b370

08008ea0 <__swsetup_r>:
 8008ea0:	4b32      	ldr	r3, [pc, #200]	; (8008f6c <__swsetup_r+0xcc>)
 8008ea2:	b570      	push	{r4, r5, r6, lr}
 8008ea4:	681d      	ldr	r5, [r3, #0]
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	b125      	cbz	r5, 8008eb6 <__swsetup_r+0x16>
 8008eac:	69ab      	ldr	r3, [r5, #24]
 8008eae:	b913      	cbnz	r3, 8008eb6 <__swsetup_r+0x16>
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f000 f985 	bl	80091c0 <__sinit>
 8008eb6:	4b2e      	ldr	r3, [pc, #184]	; (8008f70 <__swsetup_r+0xd0>)
 8008eb8:	429c      	cmp	r4, r3
 8008eba:	d10f      	bne.n	8008edc <__swsetup_r+0x3c>
 8008ebc:	686c      	ldr	r4, [r5, #4]
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec4:	0719      	lsls	r1, r3, #28
 8008ec6:	d42c      	bmi.n	8008f22 <__swsetup_r+0x82>
 8008ec8:	06dd      	lsls	r5, r3, #27
 8008eca:	d411      	bmi.n	8008ef0 <__swsetup_r+0x50>
 8008ecc:	2309      	movs	r3, #9
 8008ece:	6033      	str	r3, [r6, #0]
 8008ed0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ed4:	81a3      	strh	r3, [r4, #12]
 8008ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eda:	e03e      	b.n	8008f5a <__swsetup_r+0xba>
 8008edc:	4b25      	ldr	r3, [pc, #148]	; (8008f74 <__swsetup_r+0xd4>)
 8008ede:	429c      	cmp	r4, r3
 8008ee0:	d101      	bne.n	8008ee6 <__swsetup_r+0x46>
 8008ee2:	68ac      	ldr	r4, [r5, #8]
 8008ee4:	e7eb      	b.n	8008ebe <__swsetup_r+0x1e>
 8008ee6:	4b24      	ldr	r3, [pc, #144]	; (8008f78 <__swsetup_r+0xd8>)
 8008ee8:	429c      	cmp	r4, r3
 8008eea:	bf08      	it	eq
 8008eec:	68ec      	ldreq	r4, [r5, #12]
 8008eee:	e7e6      	b.n	8008ebe <__swsetup_r+0x1e>
 8008ef0:	0758      	lsls	r0, r3, #29
 8008ef2:	d512      	bpl.n	8008f1a <__swsetup_r+0x7a>
 8008ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ef6:	b141      	cbz	r1, 8008f0a <__swsetup_r+0x6a>
 8008ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008efc:	4299      	cmp	r1, r3
 8008efe:	d002      	beq.n	8008f06 <__swsetup_r+0x66>
 8008f00:	4630      	mov	r0, r6
 8008f02:	f7ff f8c7 	bl	8008094 <_free_r>
 8008f06:	2300      	movs	r3, #0
 8008f08:	6363      	str	r3, [r4, #52]	; 0x34
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	2300      	movs	r3, #0
 8008f14:	6063      	str	r3, [r4, #4]
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	f043 0308 	orr.w	r3, r3, #8
 8008f20:	81a3      	strh	r3, [r4, #12]
 8008f22:	6923      	ldr	r3, [r4, #16]
 8008f24:	b94b      	cbnz	r3, 8008f3a <__swsetup_r+0x9a>
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f30:	d003      	beq.n	8008f3a <__swsetup_r+0x9a>
 8008f32:	4621      	mov	r1, r4
 8008f34:	4630      	mov	r0, r6
 8008f36:	f000 fa07 	bl	8009348 <__smakebuf_r>
 8008f3a:	89a0      	ldrh	r0, [r4, #12]
 8008f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f40:	f010 0301 	ands.w	r3, r0, #1
 8008f44:	d00a      	beq.n	8008f5c <__swsetup_r+0xbc>
 8008f46:	2300      	movs	r3, #0
 8008f48:	60a3      	str	r3, [r4, #8]
 8008f4a:	6963      	ldr	r3, [r4, #20]
 8008f4c:	425b      	negs	r3, r3
 8008f4e:	61a3      	str	r3, [r4, #24]
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	b943      	cbnz	r3, 8008f66 <__swsetup_r+0xc6>
 8008f54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f58:	d1ba      	bne.n	8008ed0 <__swsetup_r+0x30>
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
 8008f5c:	0781      	lsls	r1, r0, #30
 8008f5e:	bf58      	it	pl
 8008f60:	6963      	ldrpl	r3, [r4, #20]
 8008f62:	60a3      	str	r3, [r4, #8]
 8008f64:	e7f4      	b.n	8008f50 <__swsetup_r+0xb0>
 8008f66:	2000      	movs	r0, #0
 8008f68:	e7f7      	b.n	8008f5a <__swsetup_r+0xba>
 8008f6a:	bf00      	nop
 8008f6c:	2000001c 	.word	0x2000001c
 8008f70:	0800b390 	.word	0x0800b390
 8008f74:	0800b3b0 	.word	0x0800b3b0
 8008f78:	0800b370 	.word	0x0800b370

08008f7c <abort>:
 8008f7c:	b508      	push	{r3, lr}
 8008f7e:	2006      	movs	r0, #6
 8008f80:	f000 fa7a 	bl	8009478 <raise>
 8008f84:	2001      	movs	r0, #1
 8008f86:	f7f9 fac3 	bl	8002510 <_exit>
	...

08008f8c <__sflush_r>:
 8008f8c:	898a      	ldrh	r2, [r1, #12]
 8008f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f92:	4605      	mov	r5, r0
 8008f94:	0710      	lsls	r0, r2, #28
 8008f96:	460c      	mov	r4, r1
 8008f98:	d458      	bmi.n	800904c <__sflush_r+0xc0>
 8008f9a:	684b      	ldr	r3, [r1, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	dc05      	bgt.n	8008fac <__sflush_r+0x20>
 8008fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	dc02      	bgt.n	8008fac <__sflush_r+0x20>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fae:	2e00      	cmp	r6, #0
 8008fb0:	d0f9      	beq.n	8008fa6 <__sflush_r+0x1a>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fb8:	682f      	ldr	r7, [r5, #0]
 8008fba:	602b      	str	r3, [r5, #0]
 8008fbc:	d032      	beq.n	8009024 <__sflush_r+0x98>
 8008fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	075a      	lsls	r2, r3, #29
 8008fc4:	d505      	bpl.n	8008fd2 <__sflush_r+0x46>
 8008fc6:	6863      	ldr	r3, [r4, #4]
 8008fc8:	1ac0      	subs	r0, r0, r3
 8008fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fcc:	b10b      	cbz	r3, 8008fd2 <__sflush_r+0x46>
 8008fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fd0:	1ac0      	subs	r0, r0, r3
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fd8:	6a21      	ldr	r1, [r4, #32]
 8008fda:	4628      	mov	r0, r5
 8008fdc:	47b0      	blx	r6
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	d106      	bne.n	8008ff2 <__sflush_r+0x66>
 8008fe4:	6829      	ldr	r1, [r5, #0]
 8008fe6:	291d      	cmp	r1, #29
 8008fe8:	d82c      	bhi.n	8009044 <__sflush_r+0xb8>
 8008fea:	4a2a      	ldr	r2, [pc, #168]	; (8009094 <__sflush_r+0x108>)
 8008fec:	40ca      	lsrs	r2, r1
 8008fee:	07d6      	lsls	r6, r2, #31
 8008ff0:	d528      	bpl.n	8009044 <__sflush_r+0xb8>
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	6062      	str	r2, [r4, #4]
 8008ff6:	04d9      	lsls	r1, r3, #19
 8008ff8:	6922      	ldr	r2, [r4, #16]
 8008ffa:	6022      	str	r2, [r4, #0]
 8008ffc:	d504      	bpl.n	8009008 <__sflush_r+0x7c>
 8008ffe:	1c42      	adds	r2, r0, #1
 8009000:	d101      	bne.n	8009006 <__sflush_r+0x7a>
 8009002:	682b      	ldr	r3, [r5, #0]
 8009004:	b903      	cbnz	r3, 8009008 <__sflush_r+0x7c>
 8009006:	6560      	str	r0, [r4, #84]	; 0x54
 8009008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800900a:	602f      	str	r7, [r5, #0]
 800900c:	2900      	cmp	r1, #0
 800900e:	d0ca      	beq.n	8008fa6 <__sflush_r+0x1a>
 8009010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009014:	4299      	cmp	r1, r3
 8009016:	d002      	beq.n	800901e <__sflush_r+0x92>
 8009018:	4628      	mov	r0, r5
 800901a:	f7ff f83b 	bl	8008094 <_free_r>
 800901e:	2000      	movs	r0, #0
 8009020:	6360      	str	r0, [r4, #52]	; 0x34
 8009022:	e7c1      	b.n	8008fa8 <__sflush_r+0x1c>
 8009024:	6a21      	ldr	r1, [r4, #32]
 8009026:	2301      	movs	r3, #1
 8009028:	4628      	mov	r0, r5
 800902a:	47b0      	blx	r6
 800902c:	1c41      	adds	r1, r0, #1
 800902e:	d1c7      	bne.n	8008fc0 <__sflush_r+0x34>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0c4      	beq.n	8008fc0 <__sflush_r+0x34>
 8009036:	2b1d      	cmp	r3, #29
 8009038:	d001      	beq.n	800903e <__sflush_r+0xb2>
 800903a:	2b16      	cmp	r3, #22
 800903c:	d101      	bne.n	8009042 <__sflush_r+0xb6>
 800903e:	602f      	str	r7, [r5, #0]
 8009040:	e7b1      	b.n	8008fa6 <__sflush_r+0x1a>
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009048:	81a3      	strh	r3, [r4, #12]
 800904a:	e7ad      	b.n	8008fa8 <__sflush_r+0x1c>
 800904c:	690f      	ldr	r7, [r1, #16]
 800904e:	2f00      	cmp	r7, #0
 8009050:	d0a9      	beq.n	8008fa6 <__sflush_r+0x1a>
 8009052:	0793      	lsls	r3, r2, #30
 8009054:	680e      	ldr	r6, [r1, #0]
 8009056:	bf08      	it	eq
 8009058:	694b      	ldreq	r3, [r1, #20]
 800905a:	600f      	str	r7, [r1, #0]
 800905c:	bf18      	it	ne
 800905e:	2300      	movne	r3, #0
 8009060:	eba6 0807 	sub.w	r8, r6, r7
 8009064:	608b      	str	r3, [r1, #8]
 8009066:	f1b8 0f00 	cmp.w	r8, #0
 800906a:	dd9c      	ble.n	8008fa6 <__sflush_r+0x1a>
 800906c:	6a21      	ldr	r1, [r4, #32]
 800906e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009070:	4643      	mov	r3, r8
 8009072:	463a      	mov	r2, r7
 8009074:	4628      	mov	r0, r5
 8009076:	47b0      	blx	r6
 8009078:	2800      	cmp	r0, #0
 800907a:	dc06      	bgt.n	800908a <__sflush_r+0xfe>
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009082:	81a3      	strh	r3, [r4, #12]
 8009084:	f04f 30ff 	mov.w	r0, #4294967295
 8009088:	e78e      	b.n	8008fa8 <__sflush_r+0x1c>
 800908a:	4407      	add	r7, r0
 800908c:	eba8 0800 	sub.w	r8, r8, r0
 8009090:	e7e9      	b.n	8009066 <__sflush_r+0xda>
 8009092:	bf00      	nop
 8009094:	20400001 	.word	0x20400001

08009098 <_fflush_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	690b      	ldr	r3, [r1, #16]
 800909c:	4605      	mov	r5, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	b913      	cbnz	r3, 80090a8 <_fflush_r+0x10>
 80090a2:	2500      	movs	r5, #0
 80090a4:	4628      	mov	r0, r5
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	b118      	cbz	r0, 80090b2 <_fflush_r+0x1a>
 80090aa:	6983      	ldr	r3, [r0, #24]
 80090ac:	b90b      	cbnz	r3, 80090b2 <_fflush_r+0x1a>
 80090ae:	f000 f887 	bl	80091c0 <__sinit>
 80090b2:	4b14      	ldr	r3, [pc, #80]	; (8009104 <_fflush_r+0x6c>)
 80090b4:	429c      	cmp	r4, r3
 80090b6:	d11b      	bne.n	80090f0 <_fflush_r+0x58>
 80090b8:	686c      	ldr	r4, [r5, #4]
 80090ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d0ef      	beq.n	80090a2 <_fflush_r+0xa>
 80090c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090c4:	07d0      	lsls	r0, r2, #31
 80090c6:	d404      	bmi.n	80090d2 <_fflush_r+0x3a>
 80090c8:	0599      	lsls	r1, r3, #22
 80090ca:	d402      	bmi.n	80090d2 <_fflush_r+0x3a>
 80090cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ce:	f000 f915 	bl	80092fc <__retarget_lock_acquire_recursive>
 80090d2:	4628      	mov	r0, r5
 80090d4:	4621      	mov	r1, r4
 80090d6:	f7ff ff59 	bl	8008f8c <__sflush_r>
 80090da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090dc:	07da      	lsls	r2, r3, #31
 80090de:	4605      	mov	r5, r0
 80090e0:	d4e0      	bmi.n	80090a4 <_fflush_r+0xc>
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	059b      	lsls	r3, r3, #22
 80090e6:	d4dd      	bmi.n	80090a4 <_fflush_r+0xc>
 80090e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ea:	f000 f908 	bl	80092fe <__retarget_lock_release_recursive>
 80090ee:	e7d9      	b.n	80090a4 <_fflush_r+0xc>
 80090f0:	4b05      	ldr	r3, [pc, #20]	; (8009108 <_fflush_r+0x70>)
 80090f2:	429c      	cmp	r4, r3
 80090f4:	d101      	bne.n	80090fa <_fflush_r+0x62>
 80090f6:	68ac      	ldr	r4, [r5, #8]
 80090f8:	e7df      	b.n	80090ba <_fflush_r+0x22>
 80090fa:	4b04      	ldr	r3, [pc, #16]	; (800910c <_fflush_r+0x74>)
 80090fc:	429c      	cmp	r4, r3
 80090fe:	bf08      	it	eq
 8009100:	68ec      	ldreq	r4, [r5, #12]
 8009102:	e7da      	b.n	80090ba <_fflush_r+0x22>
 8009104:	0800b390 	.word	0x0800b390
 8009108:	0800b3b0 	.word	0x0800b3b0
 800910c:	0800b370 	.word	0x0800b370

08009110 <std>:
 8009110:	2300      	movs	r3, #0
 8009112:	b510      	push	{r4, lr}
 8009114:	4604      	mov	r4, r0
 8009116:	e9c0 3300 	strd	r3, r3, [r0]
 800911a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800911e:	6083      	str	r3, [r0, #8]
 8009120:	8181      	strh	r1, [r0, #12]
 8009122:	6643      	str	r3, [r0, #100]	; 0x64
 8009124:	81c2      	strh	r2, [r0, #14]
 8009126:	6183      	str	r3, [r0, #24]
 8009128:	4619      	mov	r1, r3
 800912a:	2208      	movs	r2, #8
 800912c:	305c      	adds	r0, #92	; 0x5c
 800912e:	f7fe ffa9 	bl	8008084 <memset>
 8009132:	4b05      	ldr	r3, [pc, #20]	; (8009148 <std+0x38>)
 8009134:	6263      	str	r3, [r4, #36]	; 0x24
 8009136:	4b05      	ldr	r3, [pc, #20]	; (800914c <std+0x3c>)
 8009138:	62a3      	str	r3, [r4, #40]	; 0x28
 800913a:	4b05      	ldr	r3, [pc, #20]	; (8009150 <std+0x40>)
 800913c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800913e:	4b05      	ldr	r3, [pc, #20]	; (8009154 <std+0x44>)
 8009140:	6224      	str	r4, [r4, #32]
 8009142:	6323      	str	r3, [r4, #48]	; 0x30
 8009144:	bd10      	pop	{r4, pc}
 8009146:	bf00      	nop
 8009148:	080094b1 	.word	0x080094b1
 800914c:	080094d3 	.word	0x080094d3
 8009150:	0800950b 	.word	0x0800950b
 8009154:	0800952f 	.word	0x0800952f

08009158 <_cleanup_r>:
 8009158:	4901      	ldr	r1, [pc, #4]	; (8009160 <_cleanup_r+0x8>)
 800915a:	f000 b8af 	b.w	80092bc <_fwalk_reent>
 800915e:	bf00      	nop
 8009160:	08009099 	.word	0x08009099

08009164 <__sfmoreglue>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	1e4a      	subs	r2, r1, #1
 8009168:	2568      	movs	r5, #104	; 0x68
 800916a:	4355      	muls	r5, r2
 800916c:	460e      	mov	r6, r1
 800916e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009172:	f7fe ffdf 	bl	8008134 <_malloc_r>
 8009176:	4604      	mov	r4, r0
 8009178:	b140      	cbz	r0, 800918c <__sfmoreglue+0x28>
 800917a:	2100      	movs	r1, #0
 800917c:	e9c0 1600 	strd	r1, r6, [r0]
 8009180:	300c      	adds	r0, #12
 8009182:	60a0      	str	r0, [r4, #8]
 8009184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009188:	f7fe ff7c 	bl	8008084 <memset>
 800918c:	4620      	mov	r0, r4
 800918e:	bd70      	pop	{r4, r5, r6, pc}

08009190 <__sfp_lock_acquire>:
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <__sfp_lock_acquire+0x8>)
 8009192:	f000 b8b3 	b.w	80092fc <__retarget_lock_acquire_recursive>
 8009196:	bf00      	nop
 8009198:	20000608 	.word	0x20000608

0800919c <__sfp_lock_release>:
 800919c:	4801      	ldr	r0, [pc, #4]	; (80091a4 <__sfp_lock_release+0x8>)
 800919e:	f000 b8ae 	b.w	80092fe <__retarget_lock_release_recursive>
 80091a2:	bf00      	nop
 80091a4:	20000608 	.word	0x20000608

080091a8 <__sinit_lock_acquire>:
 80091a8:	4801      	ldr	r0, [pc, #4]	; (80091b0 <__sinit_lock_acquire+0x8>)
 80091aa:	f000 b8a7 	b.w	80092fc <__retarget_lock_acquire_recursive>
 80091ae:	bf00      	nop
 80091b0:	20000603 	.word	0x20000603

080091b4 <__sinit_lock_release>:
 80091b4:	4801      	ldr	r0, [pc, #4]	; (80091bc <__sinit_lock_release+0x8>)
 80091b6:	f000 b8a2 	b.w	80092fe <__retarget_lock_release_recursive>
 80091ba:	bf00      	nop
 80091bc:	20000603 	.word	0x20000603

080091c0 <__sinit>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	4604      	mov	r4, r0
 80091c4:	f7ff fff0 	bl	80091a8 <__sinit_lock_acquire>
 80091c8:	69a3      	ldr	r3, [r4, #24]
 80091ca:	b11b      	cbz	r3, 80091d4 <__sinit+0x14>
 80091cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091d0:	f7ff bff0 	b.w	80091b4 <__sinit_lock_release>
 80091d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091d8:	6523      	str	r3, [r4, #80]	; 0x50
 80091da:	4b13      	ldr	r3, [pc, #76]	; (8009228 <__sinit+0x68>)
 80091dc:	4a13      	ldr	r2, [pc, #76]	; (800922c <__sinit+0x6c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80091e2:	42a3      	cmp	r3, r4
 80091e4:	bf04      	itt	eq
 80091e6:	2301      	moveq	r3, #1
 80091e8:	61a3      	streq	r3, [r4, #24]
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 f820 	bl	8009230 <__sfp>
 80091f0:	6060      	str	r0, [r4, #4]
 80091f2:	4620      	mov	r0, r4
 80091f4:	f000 f81c 	bl	8009230 <__sfp>
 80091f8:	60a0      	str	r0, [r4, #8]
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 f818 	bl	8009230 <__sfp>
 8009200:	2200      	movs	r2, #0
 8009202:	60e0      	str	r0, [r4, #12]
 8009204:	2104      	movs	r1, #4
 8009206:	6860      	ldr	r0, [r4, #4]
 8009208:	f7ff ff82 	bl	8009110 <std>
 800920c:	68a0      	ldr	r0, [r4, #8]
 800920e:	2201      	movs	r2, #1
 8009210:	2109      	movs	r1, #9
 8009212:	f7ff ff7d 	bl	8009110 <std>
 8009216:	68e0      	ldr	r0, [r4, #12]
 8009218:	2202      	movs	r2, #2
 800921a:	2112      	movs	r1, #18
 800921c:	f7ff ff78 	bl	8009110 <std>
 8009220:	2301      	movs	r3, #1
 8009222:	61a3      	str	r3, [r4, #24]
 8009224:	e7d2      	b.n	80091cc <__sinit+0xc>
 8009226:	bf00      	nop
 8009228:	0800b184 	.word	0x0800b184
 800922c:	08009159 	.word	0x08009159

08009230 <__sfp>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	4607      	mov	r7, r0
 8009234:	f7ff ffac 	bl	8009190 <__sfp_lock_acquire>
 8009238:	4b1e      	ldr	r3, [pc, #120]	; (80092b4 <__sfp+0x84>)
 800923a:	681e      	ldr	r6, [r3, #0]
 800923c:	69b3      	ldr	r3, [r6, #24]
 800923e:	b913      	cbnz	r3, 8009246 <__sfp+0x16>
 8009240:	4630      	mov	r0, r6
 8009242:	f7ff ffbd 	bl	80091c0 <__sinit>
 8009246:	3648      	adds	r6, #72	; 0x48
 8009248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800924c:	3b01      	subs	r3, #1
 800924e:	d503      	bpl.n	8009258 <__sfp+0x28>
 8009250:	6833      	ldr	r3, [r6, #0]
 8009252:	b30b      	cbz	r3, 8009298 <__sfp+0x68>
 8009254:	6836      	ldr	r6, [r6, #0]
 8009256:	e7f7      	b.n	8009248 <__sfp+0x18>
 8009258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800925c:	b9d5      	cbnz	r5, 8009294 <__sfp+0x64>
 800925e:	4b16      	ldr	r3, [pc, #88]	; (80092b8 <__sfp+0x88>)
 8009260:	60e3      	str	r3, [r4, #12]
 8009262:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009266:	6665      	str	r5, [r4, #100]	; 0x64
 8009268:	f000 f847 	bl	80092fa <__retarget_lock_init_recursive>
 800926c:	f7ff ff96 	bl	800919c <__sfp_lock_release>
 8009270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009278:	6025      	str	r5, [r4, #0]
 800927a:	61a5      	str	r5, [r4, #24]
 800927c:	2208      	movs	r2, #8
 800927e:	4629      	mov	r1, r5
 8009280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009284:	f7fe fefe 	bl	8008084 <memset>
 8009288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800928c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009290:	4620      	mov	r0, r4
 8009292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009294:	3468      	adds	r4, #104	; 0x68
 8009296:	e7d9      	b.n	800924c <__sfp+0x1c>
 8009298:	2104      	movs	r1, #4
 800929a:	4638      	mov	r0, r7
 800929c:	f7ff ff62 	bl	8009164 <__sfmoreglue>
 80092a0:	4604      	mov	r4, r0
 80092a2:	6030      	str	r0, [r6, #0]
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d1d5      	bne.n	8009254 <__sfp+0x24>
 80092a8:	f7ff ff78 	bl	800919c <__sfp_lock_release>
 80092ac:	230c      	movs	r3, #12
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	e7ee      	b.n	8009290 <__sfp+0x60>
 80092b2:	bf00      	nop
 80092b4:	0800b184 	.word	0x0800b184
 80092b8:	ffff0001 	.word	0xffff0001

080092bc <_fwalk_reent>:
 80092bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c0:	4606      	mov	r6, r0
 80092c2:	4688      	mov	r8, r1
 80092c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092c8:	2700      	movs	r7, #0
 80092ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ce:	f1b9 0901 	subs.w	r9, r9, #1
 80092d2:	d505      	bpl.n	80092e0 <_fwalk_reent+0x24>
 80092d4:	6824      	ldr	r4, [r4, #0]
 80092d6:	2c00      	cmp	r4, #0
 80092d8:	d1f7      	bne.n	80092ca <_fwalk_reent+0xe>
 80092da:	4638      	mov	r0, r7
 80092dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e0:	89ab      	ldrh	r3, [r5, #12]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d907      	bls.n	80092f6 <_fwalk_reent+0x3a>
 80092e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092ea:	3301      	adds	r3, #1
 80092ec:	d003      	beq.n	80092f6 <_fwalk_reent+0x3a>
 80092ee:	4629      	mov	r1, r5
 80092f0:	4630      	mov	r0, r6
 80092f2:	47c0      	blx	r8
 80092f4:	4307      	orrs	r7, r0
 80092f6:	3568      	adds	r5, #104	; 0x68
 80092f8:	e7e9      	b.n	80092ce <_fwalk_reent+0x12>

080092fa <__retarget_lock_init_recursive>:
 80092fa:	4770      	bx	lr

080092fc <__retarget_lock_acquire_recursive>:
 80092fc:	4770      	bx	lr

080092fe <__retarget_lock_release_recursive>:
 80092fe:	4770      	bx	lr

08009300 <__swhatbuf_r>:
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	460e      	mov	r6, r1
 8009304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009308:	2900      	cmp	r1, #0
 800930a:	b096      	sub	sp, #88	; 0x58
 800930c:	4614      	mov	r4, r2
 800930e:	461d      	mov	r5, r3
 8009310:	da07      	bge.n	8009322 <__swhatbuf_r+0x22>
 8009312:	2300      	movs	r3, #0
 8009314:	602b      	str	r3, [r5, #0]
 8009316:	89b3      	ldrh	r3, [r6, #12]
 8009318:	061a      	lsls	r2, r3, #24
 800931a:	d410      	bmi.n	800933e <__swhatbuf_r+0x3e>
 800931c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009320:	e00e      	b.n	8009340 <__swhatbuf_r+0x40>
 8009322:	466a      	mov	r2, sp
 8009324:	f000 f92a 	bl	800957c <_fstat_r>
 8009328:	2800      	cmp	r0, #0
 800932a:	dbf2      	blt.n	8009312 <__swhatbuf_r+0x12>
 800932c:	9a01      	ldr	r2, [sp, #4]
 800932e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009332:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009336:	425a      	negs	r2, r3
 8009338:	415a      	adcs	r2, r3
 800933a:	602a      	str	r2, [r5, #0]
 800933c:	e7ee      	b.n	800931c <__swhatbuf_r+0x1c>
 800933e:	2340      	movs	r3, #64	; 0x40
 8009340:	2000      	movs	r0, #0
 8009342:	6023      	str	r3, [r4, #0]
 8009344:	b016      	add	sp, #88	; 0x58
 8009346:	bd70      	pop	{r4, r5, r6, pc}

08009348 <__smakebuf_r>:
 8009348:	898b      	ldrh	r3, [r1, #12]
 800934a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800934c:	079d      	lsls	r5, r3, #30
 800934e:	4606      	mov	r6, r0
 8009350:	460c      	mov	r4, r1
 8009352:	d507      	bpl.n	8009364 <__smakebuf_r+0x1c>
 8009354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	6123      	str	r3, [r4, #16]
 800935c:	2301      	movs	r3, #1
 800935e:	6163      	str	r3, [r4, #20]
 8009360:	b002      	add	sp, #8
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	ab01      	add	r3, sp, #4
 8009366:	466a      	mov	r2, sp
 8009368:	f7ff ffca 	bl	8009300 <__swhatbuf_r>
 800936c:	9900      	ldr	r1, [sp, #0]
 800936e:	4605      	mov	r5, r0
 8009370:	4630      	mov	r0, r6
 8009372:	f7fe fedf 	bl	8008134 <_malloc_r>
 8009376:	b948      	cbnz	r0, 800938c <__smakebuf_r+0x44>
 8009378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800937c:	059a      	lsls	r2, r3, #22
 800937e:	d4ef      	bmi.n	8009360 <__smakebuf_r+0x18>
 8009380:	f023 0303 	bic.w	r3, r3, #3
 8009384:	f043 0302 	orr.w	r3, r3, #2
 8009388:	81a3      	strh	r3, [r4, #12]
 800938a:	e7e3      	b.n	8009354 <__smakebuf_r+0xc>
 800938c:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <__smakebuf_r+0x7c>)
 800938e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	6020      	str	r0, [r4, #0]
 8009394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	9b00      	ldr	r3, [sp, #0]
 800939c:	6163      	str	r3, [r4, #20]
 800939e:	9b01      	ldr	r3, [sp, #4]
 80093a0:	6120      	str	r0, [r4, #16]
 80093a2:	b15b      	cbz	r3, 80093bc <__smakebuf_r+0x74>
 80093a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f8f9 	bl	80095a0 <_isatty_r>
 80093ae:	b128      	cbz	r0, 80093bc <__smakebuf_r+0x74>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f023 0303 	bic.w	r3, r3, #3
 80093b6:	f043 0301 	orr.w	r3, r3, #1
 80093ba:	81a3      	strh	r3, [r4, #12]
 80093bc:	89a0      	ldrh	r0, [r4, #12]
 80093be:	4305      	orrs	r5, r0
 80093c0:	81a5      	strh	r5, [r4, #12]
 80093c2:	e7cd      	b.n	8009360 <__smakebuf_r+0x18>
 80093c4:	08009159 	.word	0x08009159

080093c8 <memcpy>:
 80093c8:	440a      	add	r2, r1
 80093ca:	4291      	cmp	r1, r2
 80093cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80093d0:	d100      	bne.n	80093d4 <memcpy+0xc>
 80093d2:	4770      	bx	lr
 80093d4:	b510      	push	{r4, lr}
 80093d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093de:	4291      	cmp	r1, r2
 80093e0:	d1f9      	bne.n	80093d6 <memcpy+0xe>
 80093e2:	bd10      	pop	{r4, pc}

080093e4 <memmove>:
 80093e4:	4288      	cmp	r0, r1
 80093e6:	b510      	push	{r4, lr}
 80093e8:	eb01 0402 	add.w	r4, r1, r2
 80093ec:	d902      	bls.n	80093f4 <memmove+0x10>
 80093ee:	4284      	cmp	r4, r0
 80093f0:	4623      	mov	r3, r4
 80093f2:	d807      	bhi.n	8009404 <memmove+0x20>
 80093f4:	1e43      	subs	r3, r0, #1
 80093f6:	42a1      	cmp	r1, r4
 80093f8:	d008      	beq.n	800940c <memmove+0x28>
 80093fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009402:	e7f8      	b.n	80093f6 <memmove+0x12>
 8009404:	4402      	add	r2, r0
 8009406:	4601      	mov	r1, r0
 8009408:	428a      	cmp	r2, r1
 800940a:	d100      	bne.n	800940e <memmove+0x2a>
 800940c:	bd10      	pop	{r4, pc}
 800940e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009416:	e7f7      	b.n	8009408 <memmove+0x24>

08009418 <_malloc_usable_size_r>:
 8009418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800941c:	1f18      	subs	r0, r3, #4
 800941e:	2b00      	cmp	r3, #0
 8009420:	bfbc      	itt	lt
 8009422:	580b      	ldrlt	r3, [r1, r0]
 8009424:	18c0      	addlt	r0, r0, r3
 8009426:	4770      	bx	lr

08009428 <_raise_r>:
 8009428:	291f      	cmp	r1, #31
 800942a:	b538      	push	{r3, r4, r5, lr}
 800942c:	4604      	mov	r4, r0
 800942e:	460d      	mov	r5, r1
 8009430:	d904      	bls.n	800943c <_raise_r+0x14>
 8009432:	2316      	movs	r3, #22
 8009434:	6003      	str	r3, [r0, #0]
 8009436:	f04f 30ff 	mov.w	r0, #4294967295
 800943a:	bd38      	pop	{r3, r4, r5, pc}
 800943c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800943e:	b112      	cbz	r2, 8009446 <_raise_r+0x1e>
 8009440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009444:	b94b      	cbnz	r3, 800945a <_raise_r+0x32>
 8009446:	4620      	mov	r0, r4
 8009448:	f000 f830 	bl	80094ac <_getpid_r>
 800944c:	462a      	mov	r2, r5
 800944e:	4601      	mov	r1, r0
 8009450:	4620      	mov	r0, r4
 8009452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009456:	f000 b817 	b.w	8009488 <_kill_r>
 800945a:	2b01      	cmp	r3, #1
 800945c:	d00a      	beq.n	8009474 <_raise_r+0x4c>
 800945e:	1c59      	adds	r1, r3, #1
 8009460:	d103      	bne.n	800946a <_raise_r+0x42>
 8009462:	2316      	movs	r3, #22
 8009464:	6003      	str	r3, [r0, #0]
 8009466:	2001      	movs	r0, #1
 8009468:	e7e7      	b.n	800943a <_raise_r+0x12>
 800946a:	2400      	movs	r4, #0
 800946c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009470:	4628      	mov	r0, r5
 8009472:	4798      	blx	r3
 8009474:	2000      	movs	r0, #0
 8009476:	e7e0      	b.n	800943a <_raise_r+0x12>

08009478 <raise>:
 8009478:	4b02      	ldr	r3, [pc, #8]	; (8009484 <raise+0xc>)
 800947a:	4601      	mov	r1, r0
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	f7ff bfd3 	b.w	8009428 <_raise_r>
 8009482:	bf00      	nop
 8009484:	2000001c 	.word	0x2000001c

08009488 <_kill_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4d07      	ldr	r5, [pc, #28]	; (80094a8 <_kill_r+0x20>)
 800948c:	2300      	movs	r3, #0
 800948e:	4604      	mov	r4, r0
 8009490:	4608      	mov	r0, r1
 8009492:	4611      	mov	r1, r2
 8009494:	602b      	str	r3, [r5, #0]
 8009496:	f7f9 f82b 	bl	80024f0 <_kill>
 800949a:	1c43      	adds	r3, r0, #1
 800949c:	d102      	bne.n	80094a4 <_kill_r+0x1c>
 800949e:	682b      	ldr	r3, [r5, #0]
 80094a0:	b103      	cbz	r3, 80094a4 <_kill_r+0x1c>
 80094a2:	6023      	str	r3, [r4, #0]
 80094a4:	bd38      	pop	{r3, r4, r5, pc}
 80094a6:	bf00      	nop
 80094a8:	200005fc 	.word	0x200005fc

080094ac <_getpid_r>:
 80094ac:	f7f9 b818 	b.w	80024e0 <_getpid>

080094b0 <__sread>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	460c      	mov	r4, r1
 80094b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b8:	f000 f894 	bl	80095e4 <_read_r>
 80094bc:	2800      	cmp	r0, #0
 80094be:	bfab      	itete	ge
 80094c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094c2:	89a3      	ldrhlt	r3, [r4, #12]
 80094c4:	181b      	addge	r3, r3, r0
 80094c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094ca:	bfac      	ite	ge
 80094cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ce:	81a3      	strhlt	r3, [r4, #12]
 80094d0:	bd10      	pop	{r4, pc}

080094d2 <__swrite>:
 80094d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d6:	461f      	mov	r7, r3
 80094d8:	898b      	ldrh	r3, [r1, #12]
 80094da:	05db      	lsls	r3, r3, #23
 80094dc:	4605      	mov	r5, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	4616      	mov	r6, r2
 80094e2:	d505      	bpl.n	80094f0 <__swrite+0x1e>
 80094e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e8:	2302      	movs	r3, #2
 80094ea:	2200      	movs	r2, #0
 80094ec:	f000 f868 	bl	80095c0 <_lseek_r>
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094fa:	81a3      	strh	r3, [r4, #12]
 80094fc:	4632      	mov	r2, r6
 80094fe:	463b      	mov	r3, r7
 8009500:	4628      	mov	r0, r5
 8009502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009506:	f000 b817 	b.w	8009538 <_write_r>

0800950a <__sseek>:
 800950a:	b510      	push	{r4, lr}
 800950c:	460c      	mov	r4, r1
 800950e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009512:	f000 f855 	bl	80095c0 <_lseek_r>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	bf15      	itete	ne
 800951c:	6560      	strne	r0, [r4, #84]	; 0x54
 800951e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009526:	81a3      	strheq	r3, [r4, #12]
 8009528:	bf18      	it	ne
 800952a:	81a3      	strhne	r3, [r4, #12]
 800952c:	bd10      	pop	{r4, pc}

0800952e <__sclose>:
 800952e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009532:	f000 b813 	b.w	800955c <_close_r>
	...

08009538 <_write_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4d07      	ldr	r5, [pc, #28]	; (8009558 <_write_r+0x20>)
 800953c:	4604      	mov	r4, r0
 800953e:	4608      	mov	r0, r1
 8009540:	4611      	mov	r1, r2
 8009542:	2200      	movs	r2, #0
 8009544:	602a      	str	r2, [r5, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	f7f9 f809 	bl	800255e <_write>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_write_r+0x1e>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_write_r+0x1e>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	200005fc 	.word	0x200005fc

0800955c <_close_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	4d06      	ldr	r5, [pc, #24]	; (8009578 <_close_r+0x1c>)
 8009560:	2300      	movs	r3, #0
 8009562:	4604      	mov	r4, r0
 8009564:	4608      	mov	r0, r1
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	f7f9 f815 	bl	8002596 <_close>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_close_r+0x1a>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_close_r+0x1a>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	200005fc 	.word	0x200005fc

0800957c <_fstat_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	; (800959c <_fstat_r+0x20>)
 8009580:	2300      	movs	r3, #0
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	4611      	mov	r1, r2
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	f7f9 f810 	bl	80025ae <_fstat>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	d102      	bne.n	8009598 <_fstat_r+0x1c>
 8009592:	682b      	ldr	r3, [r5, #0]
 8009594:	b103      	cbz	r3, 8009598 <_fstat_r+0x1c>
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	bd38      	pop	{r3, r4, r5, pc}
 800959a:	bf00      	nop
 800959c:	200005fc 	.word	0x200005fc

080095a0 <_isatty_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d06      	ldr	r5, [pc, #24]	; (80095bc <_isatty_r+0x1c>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	f7f9 f80f 	bl	80025ce <_isatty>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_isatty_r+0x1a>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_isatty_r+0x1a>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	200005fc 	.word	0x200005fc

080095c0 <_lseek_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	; (80095e0 <_lseek_r+0x20>)
 80095c4:	4604      	mov	r4, r0
 80095c6:	4608      	mov	r0, r1
 80095c8:	4611      	mov	r1, r2
 80095ca:	2200      	movs	r2, #0
 80095cc:	602a      	str	r2, [r5, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f7f9 f808 	bl	80025e4 <_lseek>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_lseek_r+0x1e>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_lseek_r+0x1e>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	200005fc 	.word	0x200005fc

080095e4 <_read_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d07      	ldr	r5, [pc, #28]	; (8009604 <_read_r+0x20>)
 80095e8:	4604      	mov	r4, r0
 80095ea:	4608      	mov	r0, r1
 80095ec:	4611      	mov	r1, r2
 80095ee:	2200      	movs	r2, #0
 80095f0:	602a      	str	r2, [r5, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	f7f8 ff96 	bl	8002524 <_read>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_read_r+0x1e>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_read_r+0x1e>
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	200005fc 	.word	0x200005fc

08009608 <sin>:
 8009608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800960a:	eeb0 7b40 	vmov.f64	d7, d0
 800960e:	ee17 3a90 	vmov	r3, s15
 8009612:	4a1f      	ldr	r2, [pc, #124]	; (8009690 <sin+0x88>)
 8009614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009618:	4293      	cmp	r3, r2
 800961a:	dc05      	bgt.n	8009628 <sin+0x20>
 800961c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8009688 <sin+0x80>
 8009620:	2000      	movs	r0, #0
 8009622:	f000 fc65 	bl	8009ef0 <__kernel_sin>
 8009626:	e004      	b.n	8009632 <sin+0x2a>
 8009628:	4a1a      	ldr	r2, [pc, #104]	; (8009694 <sin+0x8c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	dd04      	ble.n	8009638 <sin+0x30>
 800962e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8009632:	b005      	add	sp, #20
 8009634:	f85d fb04 	ldr.w	pc, [sp], #4
 8009638:	4668      	mov	r0, sp
 800963a:	f000 f82d 	bl	8009698 <__ieee754_rem_pio2>
 800963e:	f000 0003 	and.w	r0, r0, #3
 8009642:	2801      	cmp	r0, #1
 8009644:	d008      	beq.n	8009658 <sin+0x50>
 8009646:	2802      	cmp	r0, #2
 8009648:	d00d      	beq.n	8009666 <sin+0x5e>
 800964a:	b9b0      	cbnz	r0, 800967a <sin+0x72>
 800964c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009650:	ed9d 0b00 	vldr	d0, [sp]
 8009654:	2001      	movs	r0, #1
 8009656:	e7e4      	b.n	8009622 <sin+0x1a>
 8009658:	ed9d 1b02 	vldr	d1, [sp, #8]
 800965c:	ed9d 0b00 	vldr	d0, [sp]
 8009660:	f000 f95a 	bl	8009918 <__kernel_cos>
 8009664:	e7e5      	b.n	8009632 <sin+0x2a>
 8009666:	ed9d 1b02 	vldr	d1, [sp, #8]
 800966a:	ed9d 0b00 	vldr	d0, [sp]
 800966e:	2001      	movs	r0, #1
 8009670:	f000 fc3e 	bl	8009ef0 <__kernel_sin>
 8009674:	eeb1 0b40 	vneg.f64	d0, d0
 8009678:	e7db      	b.n	8009632 <sin+0x2a>
 800967a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800967e:	ed9d 0b00 	vldr	d0, [sp]
 8009682:	f000 f949 	bl	8009918 <__kernel_cos>
 8009686:	e7f5      	b.n	8009674 <sin+0x6c>
	...
 8009690:	3fe921fb 	.word	0x3fe921fb
 8009694:	7fefffff 	.word	0x7fefffff

08009698 <__ieee754_rem_pio2>:
 8009698:	b570      	push	{r4, r5, r6, lr}
 800969a:	eeb0 7b40 	vmov.f64	d7, d0
 800969e:	ee17 5a90 	vmov	r5, s15
 80096a2:	4b97      	ldr	r3, [pc, #604]	; (8009900 <__ieee754_rem_pio2+0x268>)
 80096a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80096a8:	429e      	cmp	r6, r3
 80096aa:	b088      	sub	sp, #32
 80096ac:	4604      	mov	r4, r0
 80096ae:	dc07      	bgt.n	80096c0 <__ieee754_rem_pio2+0x28>
 80096b0:	2200      	movs	r2, #0
 80096b2:	2300      	movs	r3, #0
 80096b4:	ed84 0b00 	vstr	d0, [r4]
 80096b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80096bc:	2000      	movs	r0, #0
 80096be:	e01b      	b.n	80096f8 <__ieee754_rem_pio2+0x60>
 80096c0:	4b90      	ldr	r3, [pc, #576]	; (8009904 <__ieee754_rem_pio2+0x26c>)
 80096c2:	429e      	cmp	r6, r3
 80096c4:	dc3b      	bgt.n	800973e <__ieee754_rem_pio2+0xa6>
 80096c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80096ca:	2d00      	cmp	r5, #0
 80096cc:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80098c0 <__ieee754_rem_pio2+0x228>
 80096d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80096d4:	dd19      	ble.n	800970a <__ieee754_rem_pio2+0x72>
 80096d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80096da:	429e      	cmp	r6, r3
 80096dc:	d00e      	beq.n	80096fc <__ieee754_rem_pio2+0x64>
 80096de:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80098c8 <__ieee754_rem_pio2+0x230>
 80096e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80096e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80096ea:	ed84 5b00 	vstr	d5, [r4]
 80096ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80096f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80096f6:	2001      	movs	r0, #1
 80096f8:	b008      	add	sp, #32
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80098d0 <__ieee754_rem_pio2+0x238>
 8009700:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009704:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80098d8 <__ieee754_rem_pio2+0x240>
 8009708:	e7eb      	b.n	80096e2 <__ieee754_rem_pio2+0x4a>
 800970a:	429e      	cmp	r6, r3
 800970c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8009710:	d00e      	beq.n	8009730 <__ieee754_rem_pio2+0x98>
 8009712:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80098c8 <__ieee754_rem_pio2+0x230>
 8009716:	ee37 5b06 	vadd.f64	d5, d7, d6
 800971a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800971e:	ed84 5b00 	vstr	d5, [r4]
 8009722:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009726:	f04f 30ff 	mov.w	r0, #4294967295
 800972a:	ed84 7b02 	vstr	d7, [r4, #8]
 800972e:	e7e3      	b.n	80096f8 <__ieee754_rem_pio2+0x60>
 8009730:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80098d0 <__ieee754_rem_pio2+0x238>
 8009734:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009738:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80098d8 <__ieee754_rem_pio2+0x240>
 800973c:	e7eb      	b.n	8009716 <__ieee754_rem_pio2+0x7e>
 800973e:	4b72      	ldr	r3, [pc, #456]	; (8009908 <__ieee754_rem_pio2+0x270>)
 8009740:	429e      	cmp	r6, r3
 8009742:	dc6e      	bgt.n	8009822 <__ieee754_rem_pio2+0x18a>
 8009744:	f000 fc2c 	bl	8009fa0 <fabs>
 8009748:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800974c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80098e0 <__ieee754_rem_pio2+0x248>
 8009750:	eea0 7b06 	vfma.f64	d7, d0, d6
 8009754:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009758:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800975c:	ee17 0a90 	vmov	r0, s15
 8009760:	eeb1 4b45 	vneg.f64	d4, d5
 8009764:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80098c0 <__ieee754_rem_pio2+0x228>
 8009768:	eea5 0b47 	vfms.f64	d0, d5, d7
 800976c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80098c8 <__ieee754_rem_pio2+0x230>
 8009770:	281f      	cmp	r0, #31
 8009772:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009776:	ee30 6b47 	vsub.f64	d6, d0, d7
 800977a:	dc08      	bgt.n	800978e <__ieee754_rem_pio2+0xf6>
 800977c:	4b63      	ldr	r3, [pc, #396]	; (800990c <__ieee754_rem_pio2+0x274>)
 800977e:	1e42      	subs	r2, r0, #1
 8009780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009784:	42b3      	cmp	r3, r6
 8009786:	d002      	beq.n	800978e <__ieee754_rem_pio2+0xf6>
 8009788:	ed84 6b00 	vstr	d6, [r4]
 800978c:	e024      	b.n	80097d8 <__ieee754_rem_pio2+0x140>
 800978e:	ee16 3a90 	vmov	r3, s13
 8009792:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009796:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800979a:	2b10      	cmp	r3, #16
 800979c:	ea4f 5226 	mov.w	r2, r6, asr #20
 80097a0:	ddf2      	ble.n	8009788 <__ieee754_rem_pio2+0xf0>
 80097a2:	eeb0 6b40 	vmov.f64	d6, d0
 80097a6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80098d0 <__ieee754_rem_pio2+0x238>
 80097aa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80097ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 80097b2:	eea4 7b03 	vfma.f64	d7, d4, d3
 80097b6:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80098d8 <__ieee754_rem_pio2+0x240>
 80097ba:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80097be:	ee36 3b47 	vsub.f64	d3, d6, d7
 80097c2:	ee13 3a90 	vmov	r3, s7
 80097c6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	2b31      	cmp	r3, #49	; 0x31
 80097ce:	dc17      	bgt.n	8009800 <__ieee754_rem_pio2+0x168>
 80097d0:	eeb0 0b46 	vmov.f64	d0, d6
 80097d4:	ed84 3b00 	vstr	d3, [r4]
 80097d8:	ed94 6b00 	vldr	d6, [r4]
 80097dc:	2d00      	cmp	r5, #0
 80097de:	ee30 0b46 	vsub.f64	d0, d0, d6
 80097e2:	ee30 7b47 	vsub.f64	d7, d0, d7
 80097e6:	ed84 7b02 	vstr	d7, [r4, #8]
 80097ea:	da85      	bge.n	80096f8 <__ieee754_rem_pio2+0x60>
 80097ec:	eeb1 6b46 	vneg.f64	d6, d6
 80097f0:	ed84 6b00 	vstr	d6, [r4]
 80097f4:	eeb1 7b47 	vneg.f64	d7, d7
 80097f8:	4240      	negs	r0, r0
 80097fa:	ed84 7b02 	vstr	d7, [r4, #8]
 80097fe:	e77b      	b.n	80096f8 <__ieee754_rem_pio2+0x60>
 8009800:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80098e8 <__ieee754_rem_pio2+0x250>
 8009804:	eeb0 0b46 	vmov.f64	d0, d6
 8009808:	eea4 0b03 	vfma.f64	d0, d4, d3
 800980c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8009810:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80098f0 <__ieee754_rem_pio2+0x258>
 8009814:	eea4 7b03 	vfma.f64	d7, d4, d3
 8009818:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800981c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009820:	e7b2      	b.n	8009788 <__ieee754_rem_pio2+0xf0>
 8009822:	4b3b      	ldr	r3, [pc, #236]	; (8009910 <__ieee754_rem_pio2+0x278>)
 8009824:	429e      	cmp	r6, r3
 8009826:	dd06      	ble.n	8009836 <__ieee754_rem_pio2+0x19e>
 8009828:	ee30 7b40 	vsub.f64	d7, d0, d0
 800982c:	ed80 7b02 	vstr	d7, [r0, #8]
 8009830:	ed80 7b00 	vstr	d7, [r0]
 8009834:	e742      	b.n	80096bc <__ieee754_rem_pio2+0x24>
 8009836:	1532      	asrs	r2, r6, #20
 8009838:	ee10 0a10 	vmov	r0, s0
 800983c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8009840:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8009844:	ec41 0b17 	vmov	d7, r0, r1
 8009848:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800984c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80098f8 <__ieee754_rem_pio2+0x260>
 8009850:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8009854:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009858:	ed8d 6b02 	vstr	d6, [sp, #8]
 800985c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009860:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009864:	a902      	add	r1, sp, #8
 8009866:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800986a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800986e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8009872:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009876:	ed8d 7b06 	vstr	d7, [sp, #24]
 800987a:	2603      	movs	r6, #3
 800987c:	4608      	mov	r0, r1
 800987e:	ed91 7b04 	vldr	d7, [r1, #16]
 8009882:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988a:	4633      	mov	r3, r6
 800988c:	f1a1 0108 	sub.w	r1, r1, #8
 8009890:	f106 36ff 	add.w	r6, r6, #4294967295
 8009894:	d0f3      	beq.n	800987e <__ieee754_rem_pio2+0x1e6>
 8009896:	491f      	ldr	r1, [pc, #124]	; (8009914 <__ieee754_rem_pio2+0x27c>)
 8009898:	9101      	str	r1, [sp, #4]
 800989a:	2102      	movs	r1, #2
 800989c:	9100      	str	r1, [sp, #0]
 800989e:	4621      	mov	r1, r4
 80098a0:	f000 f8a6 	bl	80099f0 <__kernel_rem_pio2>
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	f6bf af27 	bge.w	80096f8 <__ieee754_rem_pio2+0x60>
 80098aa:	ed94 7b00 	vldr	d7, [r4]
 80098ae:	eeb1 7b47 	vneg.f64	d7, d7
 80098b2:	ed84 7b00 	vstr	d7, [r4]
 80098b6:	ed94 7b02 	vldr	d7, [r4, #8]
 80098ba:	e79b      	b.n	80097f4 <__ieee754_rem_pio2+0x15c>
 80098bc:	f3af 8000 	nop.w
 80098c0:	54400000 	.word	0x54400000
 80098c4:	3ff921fb 	.word	0x3ff921fb
 80098c8:	1a626331 	.word	0x1a626331
 80098cc:	3dd0b461 	.word	0x3dd0b461
 80098d0:	1a600000 	.word	0x1a600000
 80098d4:	3dd0b461 	.word	0x3dd0b461
 80098d8:	2e037073 	.word	0x2e037073
 80098dc:	3ba3198a 	.word	0x3ba3198a
 80098e0:	6dc9c883 	.word	0x6dc9c883
 80098e4:	3fe45f30 	.word	0x3fe45f30
 80098e8:	2e000000 	.word	0x2e000000
 80098ec:	3ba3198a 	.word	0x3ba3198a
 80098f0:	252049c1 	.word	0x252049c1
 80098f4:	397b839a 	.word	0x397b839a
 80098f8:	00000000 	.word	0x00000000
 80098fc:	41700000 	.word	0x41700000
 8009900:	3fe921fb 	.word	0x3fe921fb
 8009904:	4002d97b 	.word	0x4002d97b
 8009908:	413921fb 	.word	0x413921fb
 800990c:	0800b3d0 	.word	0x0800b3d0
 8009910:	7fefffff 	.word	0x7fefffff
 8009914:	0800b450 	.word	0x0800b450

08009918 <__kernel_cos>:
 8009918:	ee10 1a90 	vmov	r1, s1
 800991c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8009920:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009924:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8009928:	da05      	bge.n	8009936 <__kernel_cos+0x1e>
 800992a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800992e:	ee17 3a90 	vmov	r3, s15
 8009932:	2b00      	cmp	r3, #0
 8009934:	d03d      	beq.n	80099b2 <__kernel_cos+0x9a>
 8009936:	ee20 3b00 	vmul.f64	d3, d0, d0
 800993a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80099b8 <__kernel_cos+0xa0>
 800993e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80099c0 <__kernel_cos+0xa8>
 8009942:	eea3 6b07 	vfma.f64	d6, d3, d7
 8009946:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80099c8 <__kernel_cos+0xb0>
 800994a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800994e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80099d0 <__kernel_cos+0xb8>
 8009952:	eea7 6b03 	vfma.f64	d6, d7, d3
 8009956:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80099d8 <__kernel_cos+0xc0>
 800995a:	4b23      	ldr	r3, [pc, #140]	; (80099e8 <__kernel_cos+0xd0>)
 800995c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009960:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80099e0 <__kernel_cos+0xc8>
 8009964:	4299      	cmp	r1, r3
 8009966:	eea7 6b03 	vfma.f64	d6, d7, d3
 800996a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800996e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8009972:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009976:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800997a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800997e:	dc04      	bgt.n	800998a <__kernel_cos+0x72>
 8009980:	ee37 6b46 	vsub.f64	d6, d7, d6
 8009984:	ee34 0b46 	vsub.f64	d0, d4, d6
 8009988:	4770      	bx	lr
 800998a:	4b18      	ldr	r3, [pc, #96]	; (80099ec <__kernel_cos+0xd4>)
 800998c:	4299      	cmp	r1, r3
 800998e:	dc0d      	bgt.n	80099ac <__kernel_cos+0x94>
 8009990:	2200      	movs	r2, #0
 8009992:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8009996:	ec43 2b15 	vmov	d5, r2, r3
 800999a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800999e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80099a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80099a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80099aa:	4770      	bx	lr
 80099ac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80099b0:	e7f3      	b.n	800999a <__kernel_cos+0x82>
 80099b2:	eeb0 0b44 	vmov.f64	d0, d4
 80099b6:	4770      	bx	lr
 80099b8:	be8838d4 	.word	0xbe8838d4
 80099bc:	bda8fae9 	.word	0xbda8fae9
 80099c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80099c4:	3e21ee9e 	.word	0x3e21ee9e
 80099c8:	809c52ad 	.word	0x809c52ad
 80099cc:	be927e4f 	.word	0xbe927e4f
 80099d0:	19cb1590 	.word	0x19cb1590
 80099d4:	3efa01a0 	.word	0x3efa01a0
 80099d8:	16c15177 	.word	0x16c15177
 80099dc:	bf56c16c 	.word	0xbf56c16c
 80099e0:	5555554c 	.word	0x5555554c
 80099e4:	3fa55555 	.word	0x3fa55555
 80099e8:	3fd33332 	.word	0x3fd33332
 80099ec:	3fe90000 	.word	0x3fe90000

080099f0 <__kernel_rem_pio2>:
 80099f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	ed2d 8b06 	vpush	{d8-d10}
 80099f8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80099fc:	469b      	mov	fp, r3
 80099fe:	460f      	mov	r7, r1
 8009a00:	4bcf      	ldr	r3, [pc, #828]	; (8009d40 <__kernel_rem_pio2+0x350>)
 8009a02:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8009a04:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8009a08:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8009a0c:	9000      	str	r0, [sp, #0]
 8009a0e:	f112 0f14 	cmn.w	r2, #20
 8009a12:	bfa8      	it	ge
 8009a14:	2318      	movge	r3, #24
 8009a16:	f10b 31ff 	add.w	r1, fp, #4294967295
 8009a1a:	bfb8      	it	lt
 8009a1c:	2300      	movlt	r3, #0
 8009a1e:	f06f 0417 	mvn.w	r4, #23
 8009a22:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8009d28 <__kernel_rem_pio2+0x338>
 8009a26:	bfa4      	itt	ge
 8009a28:	f1a2 0a03 	subge.w	sl, r2, #3
 8009a2c:	fb9a f3f3 	sdivge	r3, sl, r3
 8009a30:	fb03 4404 	mla	r4, r3, r4, r4
 8009a34:	1a5d      	subs	r5, r3, r1
 8009a36:	4414      	add	r4, r2
 8009a38:	eb09 0601 	add.w	r6, r9, r1
 8009a3c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8009a40:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8009a44:	2200      	movs	r2, #0
 8009a46:	42b2      	cmp	r2, r6
 8009a48:	dd12      	ble.n	8009a70 <__kernel_rem_pio2+0x80>
 8009a4a:	aa18      	add	r2, sp, #96	; 0x60
 8009a4c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8009a50:	460e      	mov	r6, r1
 8009a52:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8009a56:	f1cb 0a01 	rsb	sl, fp, #1
 8009a5a:	eb0a 0006 	add.w	r0, sl, r6
 8009a5e:	4581      	cmp	r9, r0
 8009a60:	db25      	blt.n	8009aae <__kernel_rem_pio2+0xbe>
 8009a62:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8009d28 <__kernel_rem_pio2+0x338>
 8009a66:	f8dd e000 	ldr.w	lr, [sp]
 8009a6a:	4615      	mov	r5, r2
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e015      	b.n	8009a9c <__kernel_rem_pio2+0xac>
 8009a70:	42d5      	cmn	r5, r2
 8009a72:	d409      	bmi.n	8009a88 <__kernel_rem_pio2+0x98>
 8009a74:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8009a78:	ee07 0a90 	vmov	s15, r0
 8009a7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a80:	eca8 7b02 	vstmia	r8!, {d7}
 8009a84:	3201      	adds	r2, #1
 8009a86:	e7de      	b.n	8009a46 <__kernel_rem_pio2+0x56>
 8009a88:	eeb0 7b46 	vmov.f64	d7, d6
 8009a8c:	e7f8      	b.n	8009a80 <__kernel_rem_pio2+0x90>
 8009a8e:	ecbe 5b02 	vldmia	lr!, {d5}
 8009a92:	ed95 6b00 	vldr	d6, [r5]
 8009a96:	3001      	adds	r0, #1
 8009a98:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009a9c:	4288      	cmp	r0, r1
 8009a9e:	f1a5 0508 	sub.w	r5, r5, #8
 8009aa2:	ddf4      	ble.n	8009a8e <__kernel_rem_pio2+0x9e>
 8009aa4:	eca8 7b02 	vstmia	r8!, {d7}
 8009aa8:	3208      	adds	r2, #8
 8009aaa:	3601      	adds	r6, #1
 8009aac:	e7d5      	b.n	8009a5a <__kernel_rem_pio2+0x6a>
 8009aae:	aa04      	add	r2, sp, #16
 8009ab0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8009d30 <__kernel_rem_pio2+0x340>
 8009ab4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8009d38 <__kernel_rem_pio2+0x348>
 8009ab8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8009abc:	9201      	str	r2, [sp, #4]
 8009abe:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8009ac2:	464e      	mov	r6, r9
 8009ac4:	ab90      	add	r3, sp, #576	; 0x240
 8009ac6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009aca:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8009ace:	ab04      	add	r3, sp, #16
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	4632      	mov	r2, r6
 8009ad4:	2a00      	cmp	r2, #0
 8009ad6:	dc4e      	bgt.n	8009b76 <__kernel_rem_pio2+0x186>
 8009ad8:	4620      	mov	r0, r4
 8009ada:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8009ade:	f000 fadf 	bl	800a0a0 <scalbn>
 8009ae2:	eeb0 8b40 	vmov.f64	d8, d0
 8009ae6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8009aea:	ee28 0b00 	vmul.f64	d0, d8, d0
 8009aee:	f000 fa63 	bl	8009fb8 <floor>
 8009af2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8009af6:	eea0 8b47 	vfms.f64	d8, d0, d7
 8009afa:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8009afe:	2c00      	cmp	r4, #0
 8009b00:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8009b04:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8009b08:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009b0c:	ee17 8a90 	vmov	r8, s15
 8009b10:	dd46      	ble.n	8009ba0 <__kernel_rem_pio2+0x1b0>
 8009b12:	1e70      	subs	r0, r6, #1
 8009b14:	aa04      	add	r2, sp, #16
 8009b16:	f1c4 0c18 	rsb	ip, r4, #24
 8009b1a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8009b1e:	fa45 f20c 	asr.w	r2, r5, ip
 8009b22:	4490      	add	r8, r2
 8009b24:	fa02 f20c 	lsl.w	r2, r2, ip
 8009b28:	1aad      	subs	r5, r5, r2
 8009b2a:	aa04      	add	r2, sp, #16
 8009b2c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8009b30:	f1c4 0217 	rsb	r2, r4, #23
 8009b34:	4115      	asrs	r5, r2
 8009b36:	2d00      	cmp	r5, #0
 8009b38:	dd41      	ble.n	8009bbe <__kernel_rem_pio2+0x1ce>
 8009b3a:	f04f 0c00 	mov.w	ip, #0
 8009b3e:	f108 0801 	add.w	r8, r8, #1
 8009b42:	4660      	mov	r0, ip
 8009b44:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8009b48:	4566      	cmp	r6, ip
 8009b4a:	dc69      	bgt.n	8009c20 <__kernel_rem_pio2+0x230>
 8009b4c:	2c00      	cmp	r4, #0
 8009b4e:	dd03      	ble.n	8009b58 <__kernel_rem_pio2+0x168>
 8009b50:	2c01      	cmp	r4, #1
 8009b52:	d076      	beq.n	8009c42 <__kernel_rem_pio2+0x252>
 8009b54:	2c02      	cmp	r4, #2
 8009b56:	d07f      	beq.n	8009c58 <__kernel_rem_pio2+0x268>
 8009b58:	2d02      	cmp	r5, #2
 8009b5a:	d130      	bne.n	8009bbe <__kernel_rem_pio2+0x1ce>
 8009b5c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009b60:	ee30 8b48 	vsub.f64	d8, d0, d8
 8009b64:	b358      	cbz	r0, 8009bbe <__kernel_rem_pio2+0x1ce>
 8009b66:	4620      	mov	r0, r4
 8009b68:	9102      	str	r1, [sp, #8]
 8009b6a:	f000 fa99 	bl	800a0a0 <scalbn>
 8009b6e:	9902      	ldr	r1, [sp, #8]
 8009b70:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009b74:	e023      	b.n	8009bbe <__kernel_rem_pio2+0x1ce>
 8009b76:	ee20 7b09 	vmul.f64	d7, d0, d9
 8009b7a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009b7e:	3a01      	subs	r2, #1
 8009b80:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8009b84:	ad68      	add	r5, sp, #416	; 0x1a0
 8009b86:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009b8a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009b8e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8009b92:	eca0 0a01 	vstmia	r0!, {s0}
 8009b96:	ed95 0b00 	vldr	d0, [r5]
 8009b9a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009b9e:	e799      	b.n	8009ad4 <__kernel_rem_pio2+0xe4>
 8009ba0:	d105      	bne.n	8009bae <__kernel_rem_pio2+0x1be>
 8009ba2:	1e72      	subs	r2, r6, #1
 8009ba4:	a804      	add	r0, sp, #16
 8009ba6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8009baa:	15ed      	asrs	r5, r5, #23
 8009bac:	e7c3      	b.n	8009b36 <__kernel_rem_pio2+0x146>
 8009bae:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009bb2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bba:	da2f      	bge.n	8009c1c <__kernel_rem_pio2+0x22c>
 8009bbc:	2500      	movs	r5, #0
 8009bbe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc6:	f040 8087 	bne.w	8009cd8 <__kernel_rem_pio2+0x2e8>
 8009bca:	1e73      	subs	r3, r6, #1
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f04f 0c00 	mov.w	ip, #0
 8009bd2:	4548      	cmp	r0, r9
 8009bd4:	da47      	bge.n	8009c66 <__kernel_rem_pio2+0x276>
 8009bd6:	f1bc 0f00 	cmp.w	ip, #0
 8009bda:	d070      	beq.n	8009cbe <__kernel_rem_pio2+0x2ce>
 8009bdc:	aa04      	add	r2, sp, #16
 8009bde:	3c18      	subs	r4, #24
 8009be0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009be4:	2a00      	cmp	r2, #0
 8009be6:	d075      	beq.n	8009cd4 <__kernel_rem_pio2+0x2e4>
 8009be8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009bec:	4620      	mov	r0, r4
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	f000 fa56 	bl	800a0a0 <scalbn>
 8009bf4:	9b00      	ldr	r3, [sp, #0]
 8009bf6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8009d30 <__kernel_rem_pio2+0x340>
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	f280 80ac 	bge.w	8009d5a <__kernel_rem_pio2+0x36a>
 8009c02:	4619      	mov	r1, r3
 8009c04:	2000      	movs	r0, #0
 8009c06:	2900      	cmp	r1, #0
 8009c08:	f2c0 80cd 	blt.w	8009da6 <__kernel_rem_pio2+0x3b6>
 8009c0c:	aa68      	add	r2, sp, #416	; 0x1a0
 8009c0e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8009c12:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8009d28 <__kernel_rem_pio2+0x338>
 8009c16:	4e4b      	ldr	r6, [pc, #300]	; (8009d44 <__kernel_rem_pio2+0x354>)
 8009c18:	2200      	movs	r2, #0
 8009c1a:	e0b8      	b.n	8009d8e <__kernel_rem_pio2+0x39e>
 8009c1c:	2502      	movs	r5, #2
 8009c1e:	e78c      	b.n	8009b3a <__kernel_rem_pio2+0x14a>
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	b948      	cbnz	r0, 8009c38 <__kernel_rem_pio2+0x248>
 8009c24:	b11a      	cbz	r2, 8009c2e <__kernel_rem_pio2+0x23e>
 8009c26:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f10c 0c01 	add.w	ip, ip, #1
 8009c32:	3304      	adds	r3, #4
 8009c34:	4610      	mov	r0, r2
 8009c36:	e787      	b.n	8009b48 <__kernel_rem_pio2+0x158>
 8009c38:	ebae 0202 	sub.w	r2, lr, r2
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	4602      	mov	r2, r0
 8009c40:	e7f5      	b.n	8009c2e <__kernel_rem_pio2+0x23e>
 8009c42:	1e72      	subs	r2, r6, #1
 8009c44:	ab04      	add	r3, sp, #16
 8009c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009c4e:	f10d 0c10 	add.w	ip, sp, #16
 8009c52:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8009c56:	e77f      	b.n	8009b58 <__kernel_rem_pio2+0x168>
 8009c58:	1e72      	subs	r2, r6, #1
 8009c5a:	ab04      	add	r3, sp, #16
 8009c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009c64:	e7f3      	b.n	8009c4e <__kernel_rem_pio2+0x25e>
 8009c66:	aa04      	add	r2, sp, #16
 8009c68:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8009c6c:	3801      	subs	r0, #1
 8009c6e:	ea4c 0c02 	orr.w	ip, ip, r2
 8009c72:	e7ae      	b.n	8009bd2 <__kernel_rem_pio2+0x1e2>
 8009c74:	3001      	adds	r0, #1
 8009c76:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	d0fa      	beq.n	8009c74 <__kernel_rem_pio2+0x284>
 8009c7e:	eb06 020b 	add.w	r2, r6, fp
 8009c82:	ad18      	add	r5, sp, #96	; 0x60
 8009c84:	1c73      	adds	r3, r6, #1
 8009c86:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009c8a:	4406      	add	r6, r0
 8009c8c:	429e      	cmp	r6, r3
 8009c8e:	f6ff af19 	blt.w	8009ac4 <__kernel_rem_pio2+0xd4>
 8009c92:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8009c96:	9d00      	ldr	r5, [sp, #0]
 8009c98:	ee07 0a90 	vmov	s15, r0
 8009c9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	eca2 7b02 	vstmia	r2!, {d7}
 8009ca6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009d28 <__kernel_rem_pio2+0x338>
 8009caa:	4694      	mov	ip, r2
 8009cac:	4288      	cmp	r0, r1
 8009cae:	dd09      	ble.n	8009cc4 <__kernel_rem_pio2+0x2d4>
 8009cb0:	a868      	add	r0, sp, #416	; 0x1a0
 8009cb2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8009cb6:	ed80 7b00 	vstr	d7, [r0]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	e7e6      	b.n	8009c8c <__kernel_rem_pio2+0x29c>
 8009cbe:	9b01      	ldr	r3, [sp, #4]
 8009cc0:	2001      	movs	r0, #1
 8009cc2:	e7d8      	b.n	8009c76 <__kernel_rem_pio2+0x286>
 8009cc4:	ecb5 5b02 	vldmia	r5!, {d5}
 8009cc8:	ed3c 6b02 	vldmdb	ip!, {d6}
 8009ccc:	3001      	adds	r0, #1
 8009cce:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009cd2:	e7eb      	b.n	8009cac <__kernel_rem_pio2+0x2bc>
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	e781      	b.n	8009bdc <__kernel_rem_pio2+0x1ec>
 8009cd8:	4260      	negs	r0, r4
 8009cda:	eeb0 0b48 	vmov.f64	d0, d8
 8009cde:	f000 f9df 	bl	800a0a0 <scalbn>
 8009ce2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8009d38 <__kernel_rem_pio2+0x348>
 8009ce6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8009cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cee:	db2b      	blt.n	8009d48 <__kernel_rem_pio2+0x358>
 8009cf0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8009d30 <__kernel_rem_pio2+0x340>
 8009cf4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009cf8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009cfc:	aa04      	add	r2, sp, #16
 8009cfe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8009d02:	eea5 0b46 	vfms.f64	d0, d5, d6
 8009d06:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009d0a:	a904      	add	r1, sp, #16
 8009d0c:	ee10 3a10 	vmov	r3, s0
 8009d10:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009d14:	ee17 2a10 	vmov	r2, s14
 8009d18:	1c73      	adds	r3, r6, #1
 8009d1a:	3418      	adds	r4, #24
 8009d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009d20:	e762      	b.n	8009be8 <__kernel_rem_pio2+0x1f8>
 8009d22:	bf00      	nop
 8009d24:	f3af 8000 	nop.w
	...
 8009d34:	3e700000 	.word	0x3e700000
 8009d38:	00000000 	.word	0x00000000
 8009d3c:	41700000 	.word	0x41700000
 8009d40:	0800b598 	.word	0x0800b598
 8009d44:	0800b558 	.word	0x0800b558
 8009d48:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009d4c:	aa04      	add	r2, sp, #16
 8009d4e:	ee10 3a10 	vmov	r3, s0
 8009d52:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009d56:	4633      	mov	r3, r6
 8009d58:	e746      	b.n	8009be8 <__kernel_rem_pio2+0x1f8>
 8009d5a:	a804      	add	r0, sp, #16
 8009d5c:	a968      	add	r1, sp, #416	; 0x1a0
 8009d5e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009d62:	9000      	str	r0, [sp, #0]
 8009d64:	ee07 0a90 	vmov	s15, r0
 8009d68:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009d6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009d70:	3a01      	subs	r2, #1
 8009d72:	ee27 7b00 	vmul.f64	d7, d7, d0
 8009d76:	ee20 0b06 	vmul.f64	d0, d0, d6
 8009d7a:	ed81 7b00 	vstr	d7, [r1]
 8009d7e:	e73d      	b.n	8009bfc <__kernel_rem_pio2+0x20c>
 8009d80:	ecb6 5b02 	vldmia	r6!, {d5}
 8009d84:	ecb4 6b02 	vldmia	r4!, {d6}
 8009d88:	3201      	adds	r2, #1
 8009d8a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009d8e:	454a      	cmp	r2, r9
 8009d90:	dc01      	bgt.n	8009d96 <__kernel_rem_pio2+0x3a6>
 8009d92:	4290      	cmp	r0, r2
 8009d94:	daf4      	bge.n	8009d80 <__kernel_rem_pio2+0x390>
 8009d96:	aa40      	add	r2, sp, #256	; 0x100
 8009d98:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009d9c:	ed82 7b00 	vstr	d7, [r2]
 8009da0:	3901      	subs	r1, #1
 8009da2:	3001      	adds	r0, #1
 8009da4:	e72f      	b.n	8009c06 <__kernel_rem_pio2+0x216>
 8009da6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8009da8:	2a02      	cmp	r2, #2
 8009daa:	dc0a      	bgt.n	8009dc2 <__kernel_rem_pio2+0x3d2>
 8009dac:	2a00      	cmp	r2, #0
 8009dae:	dc5a      	bgt.n	8009e66 <__kernel_rem_pio2+0x476>
 8009db0:	d039      	beq.n	8009e26 <__kernel_rem_pio2+0x436>
 8009db2:	f008 0007 	and.w	r0, r8, #7
 8009db6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8009dba:	ecbd 8b06 	vpop	{d8-d10}
 8009dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8009dc4:	2a03      	cmp	r2, #3
 8009dc6:	d1f4      	bne.n	8009db2 <__kernel_rem_pio2+0x3c2>
 8009dc8:	aa40      	add	r2, sp, #256	; 0x100
 8009dca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009dce:	4611      	mov	r1, r2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	f1a1 0108 	sub.w	r1, r1, #8
 8009dd8:	dc52      	bgt.n	8009e80 <__kernel_rem_pio2+0x490>
 8009dda:	4619      	mov	r1, r3
 8009ddc:	2901      	cmp	r1, #1
 8009dde:	f1a2 0208 	sub.w	r2, r2, #8
 8009de2:	dc5d      	bgt.n	8009ea0 <__kernel_rem_pio2+0x4b0>
 8009de4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8009ee8 <__kernel_rem_pio2+0x4f8>
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	dc69      	bgt.n	8009ec0 <__kernel_rem_pio2+0x4d0>
 8009dec:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8009df0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8009df4:	2d00      	cmp	r5, #0
 8009df6:	d16c      	bne.n	8009ed2 <__kernel_rem_pio2+0x4e2>
 8009df8:	ed87 5b00 	vstr	d5, [r7]
 8009dfc:	ed87 6b02 	vstr	d6, [r7, #8]
 8009e00:	ed87 7b04 	vstr	d7, [r7, #16]
 8009e04:	e7d5      	b.n	8009db2 <__kernel_rem_pio2+0x3c2>
 8009e06:	aa40      	add	r2, sp, #256	; 0x100
 8009e08:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009e0c:	ed92 6b00 	vldr	d6, [r2]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	daf5      	bge.n	8009e06 <__kernel_rem_pio2+0x416>
 8009e1a:	b10d      	cbz	r5, 8009e20 <__kernel_rem_pio2+0x430>
 8009e1c:	eeb1 7b47 	vneg.f64	d7, d7
 8009e20:	ed87 7b00 	vstr	d7, [r7]
 8009e24:	e7c5      	b.n	8009db2 <__kernel_rem_pio2+0x3c2>
 8009e26:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009ee8 <__kernel_rem_pio2+0x4f8>
 8009e2a:	e7f4      	b.n	8009e16 <__kernel_rem_pio2+0x426>
 8009e2c:	a940      	add	r1, sp, #256	; 0x100
 8009e2e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009e32:	ed91 7b00 	vldr	d7, [r1]
 8009e36:	3a01      	subs	r2, #1
 8009e38:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009e3c:	2a00      	cmp	r2, #0
 8009e3e:	daf5      	bge.n	8009e2c <__kernel_rem_pio2+0x43c>
 8009e40:	b1ad      	cbz	r5, 8009e6e <__kernel_rem_pio2+0x47e>
 8009e42:	eeb1 7b46 	vneg.f64	d7, d6
 8009e46:	ed87 7b00 	vstr	d7, [r7]
 8009e4a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8009e4e:	a942      	add	r1, sp, #264	; 0x108
 8009e50:	2201      	movs	r2, #1
 8009e52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009e56:	4293      	cmp	r3, r2
 8009e58:	da0c      	bge.n	8009e74 <__kernel_rem_pio2+0x484>
 8009e5a:	b10d      	cbz	r5, 8009e60 <__kernel_rem_pio2+0x470>
 8009e5c:	eeb1 7b47 	vneg.f64	d7, d7
 8009e60:	ed87 7b02 	vstr	d7, [r7, #8]
 8009e64:	e7a5      	b.n	8009db2 <__kernel_rem_pio2+0x3c2>
 8009e66:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009ee8 <__kernel_rem_pio2+0x4f8>
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	e7e6      	b.n	8009e3c <__kernel_rem_pio2+0x44c>
 8009e6e:	eeb0 7b46 	vmov.f64	d7, d6
 8009e72:	e7e8      	b.n	8009e46 <__kernel_rem_pio2+0x456>
 8009e74:	ecb1 6b02 	vldmia	r1!, {d6}
 8009e78:	3201      	adds	r2, #1
 8009e7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009e7e:	e7ea      	b.n	8009e56 <__kernel_rem_pio2+0x466>
 8009e80:	ed91 7b00 	vldr	d7, [r1]
 8009e84:	ed91 5b02 	vldr	d5, [r1, #8]
 8009e88:	3801      	subs	r0, #1
 8009e8a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009e8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009e92:	ed81 6b00 	vstr	d6, [r1]
 8009e96:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009e9a:	ed81 7b02 	vstr	d7, [r1, #8]
 8009e9e:	e798      	b.n	8009dd2 <__kernel_rem_pio2+0x3e2>
 8009ea0:	ed92 7b00 	vldr	d7, [r2]
 8009ea4:	ed92 5b02 	vldr	d5, [r2, #8]
 8009ea8:	3901      	subs	r1, #1
 8009eaa:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009eae:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009eb2:	ed82 6b00 	vstr	d6, [r2]
 8009eb6:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009eba:	ed82 7b02 	vstr	d7, [r2, #8]
 8009ebe:	e78d      	b.n	8009ddc <__kernel_rem_pio2+0x3ec>
 8009ec0:	aa40      	add	r2, sp, #256	; 0x100
 8009ec2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009ec6:	ed92 6b00 	vldr	d6, [r2]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009ed0:	e78a      	b.n	8009de8 <__kernel_rem_pio2+0x3f8>
 8009ed2:	eeb1 5b45 	vneg.f64	d5, d5
 8009ed6:	eeb1 6b46 	vneg.f64	d6, d6
 8009eda:	ed87 5b00 	vstr	d5, [r7]
 8009ede:	eeb1 7b47 	vneg.f64	d7, d7
 8009ee2:	ed87 6b02 	vstr	d6, [r7, #8]
 8009ee6:	e78b      	b.n	8009e00 <__kernel_rem_pio2+0x410>
	...

08009ef0 <__kernel_sin>:
 8009ef0:	ee10 3a90 	vmov	r3, s1
 8009ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ef8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009efc:	da04      	bge.n	8009f08 <__kernel_sin+0x18>
 8009efe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8009f02:	ee17 3a90 	vmov	r3, s15
 8009f06:	b35b      	cbz	r3, 8009f60 <__kernel_sin+0x70>
 8009f08:	ee20 6b00 	vmul.f64	d6, d0, d0
 8009f0c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8009f10:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009f68 <__kernel_sin+0x78>
 8009f14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009f70 <__kernel_sin+0x80>
 8009f18:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009f1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009f78 <__kernel_sin+0x88>
 8009f20:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009f24:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009f80 <__kernel_sin+0x90>
 8009f28:	eea7 4b06 	vfma.f64	d4, d7, d6
 8009f2c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009f88 <__kernel_sin+0x98>
 8009f30:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009f34:	b930      	cbnz	r0, 8009f44 <__kernel_sin+0x54>
 8009f36:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009f90 <__kernel_sin+0xa0>
 8009f3a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009f3e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8009f42:	4770      	bx	lr
 8009f44:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8009f48:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009f4c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8009f50:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8009f54:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009f98 <__kernel_sin+0xa8>
 8009f58:	eea5 1b07 	vfma.f64	d1, d5, d7
 8009f5c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	f3af 8000 	nop.w
 8009f68:	5acfd57c 	.word	0x5acfd57c
 8009f6c:	3de5d93a 	.word	0x3de5d93a
 8009f70:	8a2b9ceb 	.word	0x8a2b9ceb
 8009f74:	be5ae5e6 	.word	0xbe5ae5e6
 8009f78:	57b1fe7d 	.word	0x57b1fe7d
 8009f7c:	3ec71de3 	.word	0x3ec71de3
 8009f80:	19c161d5 	.word	0x19c161d5
 8009f84:	bf2a01a0 	.word	0xbf2a01a0
 8009f88:	1110f8a6 	.word	0x1110f8a6
 8009f8c:	3f811111 	.word	0x3f811111
 8009f90:	55555549 	.word	0x55555549
 8009f94:	bfc55555 	.word	0xbfc55555
 8009f98:	55555549 	.word	0x55555549
 8009f9c:	3fc55555 	.word	0x3fc55555

08009fa0 <fabs>:
 8009fa0:	ec51 0b10 	vmov	r0, r1, d0
 8009fa4:	ee10 2a10 	vmov	r2, s0
 8009fa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fac:	ec43 2b10 	vmov	d0, r2, r3
 8009fb0:	4770      	bx	lr
 8009fb2:	0000      	movs	r0, r0
 8009fb4:	0000      	movs	r0, r0
	...

08009fb8 <floor>:
 8009fb8:	ee10 1a90 	vmov	r1, s1
 8009fbc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009fc0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8009fc4:	2b13      	cmp	r3, #19
 8009fc6:	b530      	push	{r4, r5, lr}
 8009fc8:	ee10 0a10 	vmov	r0, s0
 8009fcc:	ee10 5a10 	vmov	r5, s0
 8009fd0:	dc31      	bgt.n	800a036 <floor+0x7e>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	da15      	bge.n	800a002 <floor+0x4a>
 8009fd6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a090 <floor+0xd8>
 8009fda:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009fde:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe6:	dd07      	ble.n	8009ff8 <floor+0x40>
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	da4e      	bge.n	800a08a <floor+0xd2>
 8009fec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ff0:	4318      	orrs	r0, r3
 8009ff2:	d001      	beq.n	8009ff8 <floor+0x40>
 8009ff4:	4928      	ldr	r1, [pc, #160]	; (800a098 <floor+0xe0>)
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	ec43 2b10 	vmov	d0, r2, r3
 800a000:	e020      	b.n	800a044 <floor+0x8c>
 800a002:	4a26      	ldr	r2, [pc, #152]	; (800a09c <floor+0xe4>)
 800a004:	411a      	asrs	r2, r3
 800a006:	ea01 0402 	and.w	r4, r1, r2
 800a00a:	4304      	orrs	r4, r0
 800a00c:	d01a      	beq.n	800a044 <floor+0x8c>
 800a00e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a090 <floor+0xd8>
 800a012:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a016:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01e:	ddeb      	ble.n	8009ff8 <floor+0x40>
 800a020:	2900      	cmp	r1, #0
 800a022:	bfbe      	ittt	lt
 800a024:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800a028:	fa40 f303 	asrlt.w	r3, r0, r3
 800a02c:	18c9      	addlt	r1, r1, r3
 800a02e:	ea21 0102 	bic.w	r1, r1, r2
 800a032:	2000      	movs	r0, #0
 800a034:	e7e0      	b.n	8009ff8 <floor+0x40>
 800a036:	2b33      	cmp	r3, #51	; 0x33
 800a038:	dd05      	ble.n	800a046 <floor+0x8e>
 800a03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a03e:	d101      	bne.n	800a044 <floor+0x8c>
 800a040:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a044:	bd30      	pop	{r4, r5, pc}
 800a046:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800a04a:	f04f 32ff 	mov.w	r2, #4294967295
 800a04e:	40e2      	lsrs	r2, r4
 800a050:	4202      	tst	r2, r0
 800a052:	d0f7      	beq.n	800a044 <floor+0x8c>
 800a054:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800a090 <floor+0xd8>
 800a058:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a05c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a064:	ddc8      	ble.n	8009ff8 <floor+0x40>
 800a066:	2900      	cmp	r1, #0
 800a068:	da02      	bge.n	800a070 <floor+0xb8>
 800a06a:	2b14      	cmp	r3, #20
 800a06c:	d103      	bne.n	800a076 <floor+0xbe>
 800a06e:	3101      	adds	r1, #1
 800a070:	ea20 0002 	bic.w	r0, r0, r2
 800a074:	e7c0      	b.n	8009ff8 <floor+0x40>
 800a076:	2401      	movs	r4, #1
 800a078:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a07c:	fa04 f303 	lsl.w	r3, r4, r3
 800a080:	4418      	add	r0, r3
 800a082:	42a8      	cmp	r0, r5
 800a084:	bf38      	it	cc
 800a086:	1909      	addcc	r1, r1, r4
 800a088:	e7f2      	b.n	800a070 <floor+0xb8>
 800a08a:	2000      	movs	r0, #0
 800a08c:	4601      	mov	r1, r0
 800a08e:	e7b3      	b.n	8009ff8 <floor+0x40>
 800a090:	8800759c 	.word	0x8800759c
 800a094:	7e37e43c 	.word	0x7e37e43c
 800a098:	bff00000 	.word	0xbff00000
 800a09c:	000fffff 	.word	0x000fffff

0800a0a0 <scalbn>:
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	ed8d 0b00 	vstr	d0, [sp]
 800a0a6:	9b01      	ldr	r3, [sp, #4]
 800a0a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a0ac:	b9a2      	cbnz	r2, 800a0d8 <scalbn+0x38>
 800a0ae:	9a00      	ldr	r2, [sp, #0]
 800a0b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	d03a      	beq.n	800a12e <scalbn+0x8e>
 800a0b8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800a190 <scalbn+0xf0>
 800a0bc:	4b40      	ldr	r3, [pc, #256]	; (800a1c0 <scalbn+0x120>)
 800a0be:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a0c2:	4298      	cmp	r0, r3
 800a0c4:	ed8d 7b00 	vstr	d7, [sp]
 800a0c8:	da11      	bge.n	800a0ee <scalbn+0x4e>
 800a0ca:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800a198 <scalbn+0xf8>
 800a0ce:	ed9d 6b00 	vldr	d6, [sp]
 800a0d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a0d6:	e007      	b.n	800a0e8 <scalbn+0x48>
 800a0d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a0dc:	428a      	cmp	r2, r1
 800a0de:	d10a      	bne.n	800a0f6 <scalbn+0x56>
 800a0e0:	ed9d 7b00 	vldr	d7, [sp]
 800a0e4:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a0e8:	ed8d 7b00 	vstr	d7, [sp]
 800a0ec:	e01f      	b.n	800a12e <scalbn+0x8e>
 800a0ee:	9b01      	ldr	r3, [sp, #4]
 800a0f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a0f4:	3a36      	subs	r2, #54	; 0x36
 800a0f6:	4402      	add	r2, r0
 800a0f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a0fc:	428a      	cmp	r2, r1
 800a0fe:	dd0a      	ble.n	800a116 <scalbn+0x76>
 800a100:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800a1a0 <scalbn+0x100>
 800a104:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800a1a8 <scalbn+0x108>
 800a108:	eeb0 6b47 	vmov.f64	d6, d7
 800a10c:	9b01      	ldr	r3, [sp, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	fe27 7b05 	vselge.f64	d7, d7, d5
 800a114:	e7dd      	b.n	800a0d2 <scalbn+0x32>
 800a116:	2a00      	cmp	r2, #0
 800a118:	dd0d      	ble.n	800a136 <scalbn+0x96>
 800a11a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a11e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a122:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a126:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a12a:	e9cd 0100 	strd	r0, r1, [sp]
 800a12e:	ed9d 0b00 	vldr	d0, [sp]
 800a132:	b002      	add	sp, #8
 800a134:	4770      	bx	lr
 800a136:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a13a:	da18      	bge.n	800a16e <scalbn+0xce>
 800a13c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a140:	4298      	cmp	r0, r3
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a148:	dd09      	ble.n	800a15e <scalbn+0xbe>
 800a14a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a1a0 <scalbn+0x100>
 800a14e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800a1a8 <scalbn+0x108>
 800a152:	eeb0 6b47 	vmov.f64	d6, d7
 800a156:	2b00      	cmp	r3, #0
 800a158:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800a15c:	e7b9      	b.n	800a0d2 <scalbn+0x32>
 800a15e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800a198 <scalbn+0xf8>
 800a162:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800a1b0 <scalbn+0x110>
 800a166:	eeb0 6b47 	vmov.f64	d6, d7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	e7f4      	b.n	800a158 <scalbn+0xb8>
 800a16e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a172:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a176:	3236      	adds	r2, #54	; 0x36
 800a178:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a17c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a180:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800a1b8 <scalbn+0x118>
 800a184:	ec41 0b17 	vmov	d7, r0, r1
 800a188:	e7a3      	b.n	800a0d2 <scalbn+0x32>
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w
 800a190:	00000000 	.word	0x00000000
 800a194:	43500000 	.word	0x43500000
 800a198:	c2f8f359 	.word	0xc2f8f359
 800a19c:	01a56e1f 	.word	0x01a56e1f
 800a1a0:	8800759c 	.word	0x8800759c
 800a1a4:	7e37e43c 	.word	0x7e37e43c
 800a1a8:	8800759c 	.word	0x8800759c
 800a1ac:	fe37e43c 	.word	0xfe37e43c
 800a1b0:	c2f8f359 	.word	0xc2f8f359
 800a1b4:	81a56e1f 	.word	0x81a56e1f
 800a1b8:	00000000 	.word	0x00000000
 800a1bc:	3c900000 	.word	0x3c900000
 800a1c0:	ffff3cb0 	.word	0xffff3cb0

0800a1c4 <_init>:
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c6:	bf00      	nop
 800a1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ca:	bc08      	pop	{r3}
 800a1cc:	469e      	mov	lr, r3
 800a1ce:	4770      	bx	lr

0800a1d0 <_fini>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr
