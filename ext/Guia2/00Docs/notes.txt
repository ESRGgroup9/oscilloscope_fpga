x valor lido do ADC
y valor de saída do filtro

N valores anteriores de y
M valores anteriores de x

x_ant[0 - M] e b0 - bM
y_ant[1 - N] e a1 - aN


********************************************************
Filtro Digital
********************************************************
y[n] = a1y[n−1] +...+ aNy[n−N] + b0x[n]+b1x[n−1] +...+ bMx[n−M]


********************************************************
Filtro IIR (5) - Objetivo 1
********************************************************

y[n] = ay[n−1] + (1−a)x[n−1]

Isto é,
	y[n] = a1y[n-1] + b0x[n] + b1x[n-1]

a1 = a
b0 = 0
b1 = (1-a)

Logo,
	M = 1
	N = 1


********************************************************
Filtro FIR - Objetivo 2
********************************************************

y[n] = a1y[n−1] +...+ aNy[n−N] + b0x[n]+b1x[n−1] +...+ bMx[n−M]

ak = 0
N = 0?? ou 1??

(Obter M) <- [M,Wn,beta,FILTYPE] = kaiserord(F,amp,A,h)
bk = fir1(M,Wn,ftype,kaiser(M+1,beta),'noscale')

Logo,
	y[n] = b0x[n]+b1x[n−1] +...+ bMx[n−M].


********************************************************
Objetivo 3
********************************************************
N = 10
M = 10

ak != 0
bk != 0


---------------------------//--------------------------

ADC_ISR
x = ADCGetValue

if filter_flag == 1
	calc_y()
	output(y)

else
	output(x)

---------------------
output(.) - registo dos valores adquiridos nos buffers (buffer de dados circular)
	 buffer_ValAdquiridos
	 buffer_N_trama

output(x) - enviar x para o buffer de dados
output(y)
	- enviar y para um DAC (comporta-se como um Filtro Digital Online)
	- enviar y para o buffer de dados (adquirir dados numa forma já filtrada)

----------------------
Pag.13
Quando output(.)escreve na última posição disponíveldo buffer, aponta a próxima escrita para oinício. Isto implica destru-ir os valores registados nas posições em que se escreverá –estesdeverão ter sido envia-dos pela interface série,entretanto

Pag.14
A função do bufferé impedir que os valores adquiridos se percam no caso de o tempo de  envio  de  uma  trama  pela  interface  série  ser  superior  ao  período  de  amostragem:  a variável  com  o  valor  adquirido  seria  atualizada  para  o  instante nantes  queo  valor  do instante n–1  tivesse  sido  transmitido  e  este  seria  perdido.  Com  o buffer,  não  existirão perdas seo número de valores a enviar,K,for inferior ou igual à capacidade do mesmo. Se Kfor maiorou a sequência de aquisição for ilimitada, não existirão perdas se a fre-quência média de transmissão de valores no canal série for igual ou superior à frequên-cia de amostragem.

print message
	print \b*N - apaga a linha
	print (Ex.) "n20 v500\n\r"
	print '>' + RxBuffer

	|-----> print("\bn20 v500\n\r>") // caso a linha esteja vazia

-------------------
TIM4 - APB1 108MHz

-> 1us = 1MHz

/108
PSC = 108


-> 1ms = 1kHz

/108*1k
CKD = 2
PSC = 54000


-> 1 s = 1Hz

/108*1M
CKD = 4
PSC = 65535
CounterPeriod = 65535 - 412



