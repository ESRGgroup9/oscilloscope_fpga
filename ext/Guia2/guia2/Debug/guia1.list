
guia1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001158  0800a0b8  0800a0b8  0001a0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b210  0800b210  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b210  0800b210  0001b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b218  0800b218  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b218  0800b218  0001b218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b21c  0800b21c  0001b21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000080  0800b2a0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  0800b2a0  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002255e  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004795  00000000  00000000  0004260c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00046da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  000481b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cac2  00000000  00000000  000493e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3a0  00000000  00000000  00075ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001050e5  00000000  00000000  00092242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00197327  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e54  00000000  00000000  0019737c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a09c 	.word	0x0800a09c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800a09c 	.word	0x0800a09c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <MX_ADC1_Init+0xa0>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800064c:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_ADC1_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800066e:	f002 fb4b 	bl	8002d08 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000678:	f001 f9e2 	bl	8001a40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800068e:	f002 fdc7 	bl	8003220 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000698:	f001 f9d2 	bl	8001a40 <Error_Handler>
  }

}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000027c 	.word	0x2000027c
 80006a8:	40012000 	.word	0x40012000

080006ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a25      	ldr	r2, [pc, #148]	; (8000760 <HAL_ADC_MspInit+0xb4>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d143      	bne.n	8000756 <HAL_ADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	4a24      	ldr	r2, [pc, #144]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d8:	6453      	str	r3, [r2, #68]	; 0x44
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fe:	2301      	movs	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000702:	2303      	movs	r3, #3
 8000704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4815      	ldr	r0, [pc, #84]	; (8000768 <HAL_ADC_MspInit+0xbc>)
 8000712:	f003 ffc9 	bl	80046a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2012      	movs	r0, #18
 800071c:	f003 f8b5 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000720:	2012      	movs	r0, #18
 8000722:	f003 f8ce 	bl	80038c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */
	
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_ADC_MspInit+0xb8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
		
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	; 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40012000 	.word	0x40012000
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000

0800076c <ADC_Config_Channel>:
}

/* USER CODE BEGIN 1 */

char ADC_Config_Channel(ADC_HandleTypeDef* hadc, uint8_t addr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	ADC_ChannelConfTypeDef channel_config = {0};
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]

	/**** ADC1 CHANNELS ****/
	// IN0  - IN7  in pins PA0 - PA7
	// IN8  - IN9  in pins PB0 - PB1
	// IN10 - IN15 in pins PC0 - PC5
	pin = addr;
 8000786:	4a2d      	ldr	r2, [pc, #180]	; (800083c <ADC_Config_Channel+0xd0>)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	7013      	strb	r3, [r2, #0]
	port = 2; // GPIO Port C
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <ADC_Config_Channel+0xd4>)
 800078e:	2202      	movs	r2, #2
 8000790:	701a      	strb	r2, [r3, #0]
	
	if(addr < 8) 				// Channels IN0 - IN7
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	2b07      	cmp	r3, #7
 8000796:	d803      	bhi.n	80007a0 <ADC_Config_Channel+0x34>
		port = 0;		 			// GPIO Port A
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <ADC_Config_Channel+0xd4>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e012      	b.n	80007c6 <ADC_Config_Channel+0x5a>
	else if(addr < 10)  // Channels IN8 - IN9
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b09      	cmp	r3, #9
 80007a4:	d809      	bhi.n	80007ba <ADC_Config_Channel+0x4e>
	{
		port = 1;					// GPIO Port B
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <ADC_Config_Channel+0xd4>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
		pin -= 8;					// Pins 0 - 1
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <ADC_Config_Channel+0xd0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3b08      	subs	r3, #8
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <ADC_Config_Channel+0xd0>)
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e005      	b.n	80007c6 <ADC_Config_Channel+0x5a>
	}
	else								// Channels IN10 - IN15
		pin -= 10;				// Pins 0 - 5
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <ADC_Config_Channel+0xd0>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	3b0a      	subs	r3, #10
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <ADC_Config_Channel+0xd0>)
 80007c4:	701a      	strb	r2, [r3, #0]
	
	pin_mode = GPIO_PIN_MODE(port, pin); // Save pin mode
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <ADC_Config_Channel+0xd4>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <ADC_Config_Channel+0xd8>)
 80007ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <ADC_Config_Channel+0xd0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	fa22 f303 	lsr.w	r3, r2, r3
 80007de:	f003 0303 	and.w	r3, r3, #3
 80007e2:	4a19      	ldr	r2, [pc, #100]	; (8000848 <ADC_Config_Channel+0xdc>)
 80007e4:	6013      	str	r3, [r2, #0]
	if((pin_mode != GPIO_MODE_INPUT) && (pin_mode != GPIO_MODE_ANALOG)) // PinMode as output push-pull?
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <ADC_Config_Channel+0xdc>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <ADC_Config_Channel+0x8e>
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <ADC_Config_Channel+0xdc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d001      	beq.n	80007fa <ADC_Config_Channel+0x8e>
		return (char)(-1);
 80007f6:	23ff      	movs	r3, #255	; 0xff
 80007f8:	e01b      	b.n	8000832 <ADC_Config_Channel+0xc6>
	
	GPIO_config_pins(port, (1<<pin), GPIO_MODE_ANALOG);
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <ADC_Config_Channel+0xd4>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <ADC_Config_Channel+0xd0>)
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	4611      	mov	r1, r2
 8000804:	2201      	movs	r2, #1
 8000806:	408a      	lsls	r2, r1
 8000808:	4611      	mov	r1, r2
 800080a:	2203      	movs	r2, #3
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fbd3 	bl	8000fb8 <GPIO_config_pins>
	
	channel_config.Channel = ADC_Channels[addr];
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <ADC_Config_Channel+0xe0>)
 8000816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081a:	60bb      	str	r3, [r7, #8]
	channel_config.Rank = ADC_REGULAR_RANK_1;
 800081c:	2301      	movs	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
  channel_config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
	
	HAL_ADC_ConfigChannel(hadc, &channel_config);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4619      	mov	r1, r3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f002 fcf8 	bl	8003220 <HAL_ADC_ConfigChannel>
	
	return 0;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200002c4 	.word	0x200002c4
 8000840:	200002cc 	.word	0x200002cc
 8000844:	0800a98c 	.word	0x0800a98c
 8000848:	20000350 	.word	0x20000350
 800084c:	0800a880 	.word	0x0800a880

08000850 <ADC_DeConfig_Channel>:

void ADC_DeConfig_Channel(ADC_HandleTypeDef* hadc, uint8_t addr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
		GPIO_config_pins(port, (1<<pin), pin_mode);
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <ADC_DeConfig_Channel+0x30>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <ADC_DeConfig_Channel+0x34>)
 8000862:	7812      	ldrb	r2, [r2, #0]
 8000864:	4611      	mov	r1, r2
 8000866:	2201      	movs	r2, #1
 8000868:	408a      	lsls	r2, r1
 800086a:	4611      	mov	r1, r2
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <ADC_DeConfig_Channel+0x38>)
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fba1 	bl	8000fb8 <GPIO_config_pins>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200002cc 	.word	0x200002cc
 8000884:	200002c4 	.word	0x200002c4
 8000888:	20000350 	.word	0x20000350

0800088c <ADC_Polling_Conv>:

uint32_t ADC_Polling_Conv(ADC_HandleTypeDef* hadc)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	uint32_t dig_val = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
//	while(hadc->State == HAL_BUSY)
//		;
//	dig_val = HAL_ADC_GetValue(hadc);
//	HAL_ADC_Stop(hadc);
	
	return dig_val;
 8000898:	68fb      	ldr	r3, [r7, #12]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	static float y;
	
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState) 1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	4827      	ldr	r0, [pc, #156]	; (8000954 <HAL_ADC_ConvCpltCallback+0xac>)
 80008b6:	f004 f8bb 	bl	8004a30 <HAL_GPIO_WritePin>
	
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0); //#debug
	if(hadc->Instance == ADC1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a26      	ldr	r2, [pc, #152]	; (8000958 <HAL_ADC_ConvCpltCallback+0xb0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d142      	bne.n	800094a <HAL_ADC_ConvCpltCallback+0xa2>
	{
		adcValue = HAL_ADC_GetValue(&hadc1);
 80008c4:	4825      	ldr	r0, [pc, #148]	; (800095c <HAL_ADC_ConvCpltCallback+0xb4>)
 80008c6:	f002 fc89 	bl	80031dc <HAL_ADC_GetValue>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a24      	ldr	r2, [pc, #144]	; (8000960 <HAL_ADC_ConvCpltCallback+0xb8>)
 80008ce:	6013      	str	r3, [r2, #0]
		smps_left--;
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <HAL_ADC_ConvCpltCallback+0xbc>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	3b01      	subs	r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <HAL_ADC_ConvCpltCallback+0xbc>)
 80008dc:	701a      	strb	r2, [r3, #0]
		
		// apply selected filter
		y = filter_calc(&f, adcValue);
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <HAL_ADC_ConvCpltCallback+0xb8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4820      	ldr	r0, [pc, #128]	; (8000968 <HAL_ADC_ConvCpltCallback+0xc0>)
 80008e6:	f000 fa83 	bl	8000df0 <filter_calc>
 80008ea:	eef0 7a40 	vmov.f32	s15, s0
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 80008f0:	edc3 7a00 	vstr	s15, [r3]

		if(y == -1) // is filter disabled?
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 80008f6:	edd3 7a00 	vldr	s15, [r3]
 80008fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80008fe:	eef4 7a47 	vcmp.f32	s15, s14
 8000902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000906:	d105      	bne.n	8000914 <HAL_ADC_ConvCpltCallback+0x6c>
			// Add new value to buffer
			output(adcValue);
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_ADC_ConvCpltCallback+0xb8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f833 	bl	8000978 <output>
 8000912:	e015      	b.n	8000940 <HAL_ADC_ConvCpltCallback+0x98>
		else
		{
				if(y > 4095)  // larger than max digital DAC value?
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000970 <HAL_ADC_ConvCpltCallback+0xc8>
 800091e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000926:	dd02      	ble.n	800092e <HAL_ADC_ConvCpltCallback+0x86>
					// send max value
					y = 4095;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <HAL_ADC_ConvCpltCallback+0xcc>)
 800092c:	601a      	str	r2, [r3, #0]
			
			// Add filtered value to buffer
			output(y);
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000930:	edd3 7a00 	vldr	s15, [r3]
 8000934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000938:	ee17 0a90 	vmov	r0, s15
 800093c:	f000 f81c 	bl	8000978 <output>
		}
		
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState) 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <HAL_ADC_ConvCpltCallback+0xac>)
 8000946:	f004 f873 	bl	8004a30 <HAL_GPIO_WritePin>
		//adcFlag = 1;
	}
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400
 8000958:	40012000 	.word	0x40012000
 800095c:	2000027c 	.word	0x2000027c
 8000960:	200002c8 	.word	0x200002c8
 8000964:	20000278 	.word	0x20000278
 8000968:	200000b8 	.word	0x200000b8
 800096c:	200000a0 	.word	0x200000a0
 8000970:	457ff000 	.word	0x457ff000
 8000974:	457ff000 	.word	0x457ff000

08000978 <output>:

static void output(uint32_t value)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
//	char str[16];
	ADC_Values[ADC_Val_index & (ADC_VALUES_LEN - 1)] = value;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <output+0x6c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	4917      	ldr	r1, [pc, #92]	; (80009e8 <output+0x70>)
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	ADC_Val_index++;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <output+0x6c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	3301      	adds	r3, #1
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <output+0x6c>)
 800099e:	701a      	strb	r2, [r3, #0]
	
//	sprintf(str, "n%d v%d\n\r", ADC_smp_num, value);
//	UART_puts(str);

	ADC_smp_num++;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <output+0x74>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	3301      	adds	r3, #1
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <output+0x74>)
 80009ac:	801a      	strh	r2, [r3, #0]

	// Send to DAC
	// DAC ready to send?
	if(HAL_DAC_GetState(&hdac) != HAL_DAC_STATE_READY)
 80009ae:	4810      	ldr	r0, [pc, #64]	; (80009f0 <output+0x78>)
 80009b0:	f003 f9d8 	bl	8003d64 <HAL_DAC_GetState>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d003      	beq.n	80009c2 <output+0x4a>
		HAL_DAC_Stop(&hdac,DAC1_CHANNEL_1);
 80009ba:	2100      	movs	r1, #0
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <output+0x78>)
 80009be:	f003 f80e 	bl	80039de <HAL_DAC_Stop>
	// Start DAC and send value
	if(HAL_DAC_Start(&hdac,DAC1_CHANNEL_1) == HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <output+0x78>)
 80009c6:	f002 ffb8 	bl	800393a <HAL_DAC_Start>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d105      	bne.n	80009dc <output+0x64>
		HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, value);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <output+0x78>)
 80009d8:	f003 f932 	bl	8003c40 <HAL_DAC_SetValue>

}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000009c 	.word	0x2000009c
 80009e8:	200002d0 	.word	0x200002d0
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000354 	.word	0x20000354

080009f4 <print_adcValues>:

void print_adcValues(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af02      	add	r7, sp, #8
	char str[16];
	uint8_t arr_index = (ADC_Val_index - (ADC_smp_num - 1)), i;
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <print_adcValues+0x6c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <print_adcValues+0x70>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	75fb      	strb	r3, [r7, #23]
	
	for(i = 1; i < ADC_smp_num; i++)
 8000a10:	2301      	movs	r3, #1
 8000a12:	75bb      	strb	r3, [r7, #22]
 8000a14:	e017      	b.n	8000a46 <print_adcValues+0x52>
	{
		snprintf(str, sizeof(str), "n%d v%ld\n\r", i, ADC_Values[arr_index & (ADC_VALUES_LEN - 1)]);
 8000a16:	7dba      	ldrb	r2, [r7, #22]
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	f003 031f 	and.w	r3, r3, #31
 8000a1e:	4912      	ldr	r1, [pc, #72]	; (8000a68 <print_adcValues+0x74>)
 8000a20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a24:	1d38      	adds	r0, r7, #4
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <print_adcValues+0x78>)
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	f007 fb5d 	bl	80080ec <sniprintf>
		UART_puts(str);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 f87d 	bl	8002b34 <UART_puts>
		arr_index++;
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	75fb      	strb	r3, [r7, #23]
	for(i = 1; i < ADC_smp_num; i++)
 8000a40:	7dbb      	ldrb	r3, [r7, #22]
 8000a42:	3301      	adds	r3, #1
 8000a44:	75bb      	strb	r3, [r7, #22]
 8000a46:	7dbb      	ldrb	r3, [r7, #22]
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <print_adcValues+0x70>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d3e0      	bcc.n	8000a16 <print_adcValues+0x22>
	}	
}	
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000009c 	.word	0x2000009c
 8000a64:	20000000 	.word	0x20000000
 8000a68:	200002d0 	.word	0x200002d0
 8000a6c:	0800a0b8 	.word	0x0800a0b8

08000a70 <exec_cmd>:
		0
	},
};

char exec_cmd(const char *str)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	char err;
	
	err = parse_cmd(cmd_list, str);
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	4818      	ldr	r0, [pc, #96]	; (8000adc <exec_cmd+0x6c>)
 8000a7c:	f000 ffe6 	bl	8001a4c <parse_cmd>
 8000a80:	4603      	mov	r3, r0
 8000a82:	73fb      	strb	r3, [r7, #15]
	
	switch(err)
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	3bf9      	subs	r3, #249	; 0xf9
 8000a88:	2b05      	cmp	r3, #5
 8000a8a:	d821      	bhi.n	8000ad0 <exec_cmd+0x60>
 8000a8c:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <exec_cmd+0x24>)
 8000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a92:	bf00      	nop
 8000a94:	08000ac9 	.word	0x08000ac9
 8000a98:	08000ac1 	.word	0x08000ac1
 8000a9c:	08000aad 	.word	0x08000aad
 8000aa0:	08000ad1 	.word	0x08000ad1
 8000aa4:	08000ad1 	.word	0x08000ad1
 8000aa8:	08000ad1 	.word	0x08000ad1
	{
		case (char)(-ECMDNF):
			// No command found
			UART_puts("Command [");
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <exec_cmd+0x70>)
 8000aae:	f002 f841 	bl	8002b34 <UART_puts>
			UART_puts(Rx_Buffer);
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <exec_cmd+0x74>)
 8000ab4:	f002 f83e 	bl	8002b34 <UART_puts>
			UART_puts("] not found.\n\r");
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <exec_cmd+0x78>)
 8000aba:	f002 f83b 	bl	8002b34 <UART_puts>
			break;
 8000abe:	e007      	b.n	8000ad0 <exec_cmd+0x60>
		
		case (char)(-EINVARG):
			// Invalid Arguments
			UART_puts("Invalid arguments.\n\r");
 8000ac0:	480a      	ldr	r0, [pc, #40]	; (8000aec <exec_cmd+0x7c>)
 8000ac2:	f002 f837 	bl	8002b34 <UART_puts>
			break;
 8000ac6:	e003      	b.n	8000ad0 <exec_cmd+0x60>
			// Command list is empty
		//case (char)(-ENOLIST):
			// No memory available or bad allocation of memory
			break;
		case (char)(-EPERM):
			UART_puts("No permission.\n\r");
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <exec_cmd+0x80>)
 8000aca:	f002 f833 	bl	8002b34 <UART_puts>
			break;
 8000ace:	bf00      	nop
	}
	
	return err;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	0800a8c0 	.word	0x0800a8c0
 8000ae0:	0800a35c 	.word	0x0800a35c
 8000ae4:	20000568 	.word	0x20000568
 8000ae8:	0800a368 	.word	0x0800a368
 8000aec:	0800a378 	.word	0x0800a378
 8000af0:	0800a390 	.word	0x0800a390

08000af4 <help_cb>:
@usage		 ?

@brief	 	 Print a list of the valid commands
******************************************************************************/
char help_cb(uint8_t argc, char** argv)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0a6      	sub	sp, #152	; 0x98
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
	const Command_t *p = cmd_list;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <help_cb+0x68>)
 8000b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	char str[128]; // Output message. Max message len is the same as buffer used in UART_puts
	
	if(argc != 1) // number of arguments invalid?
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d001      	beq.n	8000b10 <help_cb+0x1c>
		return (char)(-EINVARG);
 8000b0c:	23fa      	movs	r3, #250	; 0xfa
 8000b0e:	e021      	b.n	8000b54 <help_cb+0x60>
	
	UART_puts("List of valid commands:\n\n\r");
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <help_cb+0x6c>)
 8000b12:	f002 f80f 	bl	8002b34 <UART_puts>
	while(p->cmd)			
 8000b16:	e017      	b.n	8000b48 <help_cb+0x54>
	{
		snprintf(str, sizeof(str), "%4s - %s\n\n\r", p->cmd, p->help);		// send the formated string to 'str' limiting the size to the size alocated for the string 'str'
 8000b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f107 000c 	add.w	r0, r7, #12
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <help_cb+0x70>)
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	f007 fadc 	bl	80080ec <sniprintf>
		UART_puts(str);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fffb 	bl	8002b34 <UART_puts>
		p++;
 8000b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b42:	330c      	adds	r3, #12
 8000b44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	while(p->cmd)			
 8000b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1e2      	bne.n	8000b18 <help_cb+0x24>
	}
	
	return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3790      	adds	r7, #144	; 0x90
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	0800a8c0 	.word	0x0800a8c0
 8000b60:	0800a3a4 	.word	0x0800a3a4
 8000b64:	0800a3c0 	.word	0x0800a3c0

08000b68 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_DAC_Init+0x64>)
 8000b78:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <MX_DAC_Init+0x68>)
 8000b7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b7c:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MX_DAC_Init+0x64>)
 8000b7e:	f002 feba 	bl	80038f6 <HAL_DAC_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b88:	f000 ff5a 	bl	8001a40 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <MX_DAC_Init+0x64>)
 8000b9c:	f003 f893 	bl	8003cc6 <HAL_DAC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ba6:	f000 ff4b 	bl	8001a40 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000baa:	2324      	movs	r3, #36	; 0x24
 8000bac:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_DAC_Init+0x64>)
 8000bb6:	f003 f886 	bl	8003cc6 <HAL_DAC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8000bc0:	f000 ff3e 	bl	8001a40 <Error_Handler>
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000354 	.word	0x20000354
 8000bd0:	40007400 	.word	0x40007400

08000bd4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a2e      	ldr	r2, [pc, #184]	; (8000cac <HAL_DAC_MspInit+0xd8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d155      	bne.n	8000ca2 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <HAL_DAC_MspInit+0xdc>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a2d      	ldr	r2, [pc, #180]	; (8000cb0 <HAL_DAC_MspInit+0xdc>)
 8000bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <HAL_DAC_MspInit+0xdc>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <HAL_DAC_MspInit+0xdc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a27      	ldr	r2, [pc, #156]	; (8000cb0 <HAL_DAC_MspInit+0xdc>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <HAL_DAC_MspInit+0xdc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c26:	2330      	movs	r3, #48	; 0x30
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	481e      	ldr	r0, [pc, #120]	; (8000cb4 <HAL_DAC_MspInit+0xe0>)
 8000c3a:	f003 fd35 	bl	80046a8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c40:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <HAL_DAC_MspInit+0xe8>)
 8000c42:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c46:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000c4a:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c4e:	2240      	movs	r2, #64	; 0x40
 8000c50:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5e:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c66:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c6e:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c76:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c7a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c7e:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c88:	f003 f904 	bl	8003e94 <HAL_DMA_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8000c92:	f000 fed5 	bl	8001a40 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_DAC_MspInit+0xe4>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40007400 	.word	0x40007400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	20000368 	.word	0x20000368
 8000cbc:	400260a0 	.word	0x400260a0

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_DMA_Init+0x38>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <MX_DMA_Init+0x38>)
 8000ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_DMA_Init+0x38>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2011      	movs	r0, #17
 8000ce4:	f002 fdd1 	bl	800388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ce8:	2011      	movs	r0, #17
 8000cea:	f002 fdea 	bl	80038c2 <HAL_NVIC_EnableIRQ>

}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <filter_init>:
@param		 none
@brief	 	 Enables filter
@retval 	 Filter state
******************************************************************************/
char filter_init(filter_t *ft)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	if(!ft || ft->status)	// filter enabled?
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <filter_init+0x16>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7f1b      	ldrb	r3, [r3, #28]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <filter_init+0x1a>
		// Filter already initialized
		return (char)(-1);
 8000d12:	23ff      	movs	r3, #255	; 0xff
 8000d14:	e037      	b.n	8000d86 <filter_init+0x8a>
	
	ft->x_ant = (float*)malloc(ft->M + 1);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f007 f90b 	bl	8007f38 <malloc>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	609a      	str	r2, [r3, #8]
	if(!ft->x_ant)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <filter_init+0x3a>
		return (char)(-1);
 8000d32:	23ff      	movs	r3, #255	; 0xff
 8000d34:	e027      	b.n	8000d86 <filter_init+0x8a>

	ft->y_ant = (float*)malloc(ft->N + 1);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f007 f8fb 	bl	8007f38 <malloc>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60da      	str	r2, [r3, #12]
	if(!ft->y_ant)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <filter_init+0x5a>
		return (char)(-1);
 8000d52:	23ff      	movs	r3, #255	; 0xff
 8000d54:	e017      	b.n	8000d86 <filter_init+0x8a>

	memset(ft->x_ant, 0, (ft->M + 1)*sizeof(ft->x_ant[0])); 	// clear the x_ant buff
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6898      	ldr	r0, [r3, #8]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	461a      	mov	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f007 f8f7 	bl	8007f58 <memset>
	memset(ft->y_ant, 0, (ft->N + 1)*sizeof(ft->y_ant[0]));	// clear the y_ant buff
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68d8      	ldr	r0, [r3, #12]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	3301      	adds	r3, #1
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	461a      	mov	r2, r3
 8000d78:	2100      	movs	r1, #0
 8000d7a:	f007 f8ed 	bl	8007f58 <memset>
	ft->status = 1; // enabled
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	771a      	strb	r2, [r3, #28]
	// Exit success
	return 0; 
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <filter_kill>:
@brief	 	 Disables filter
@retval 	 Filter state
******************************************************************************/

char filter_kill(filter_t *ft)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
	if(!ft || ft->status == 0) // filter disabled?
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <filter_kill+0x16>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7f1b      	ldrb	r3, [r3, #28]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <filter_kill+0x1a>
		// Filter already disabled
		return (char)(-1);
 8000da4:	23ff      	movs	r3, #255	; 0xff
 8000da6:	e01f      	b.n	8000de8 <filter_kill+0x5a>

	ft->status = 0; // disabled
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	771a      	strb	r2, [r3, #28]

	free(ft->x_ant);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f007 f8c8 	bl	8007f48 <free>
	ft->x_ant = NULL;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]

	free(ft->y_ant);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f007 f8c0 	bl	8007f48 <free>
	ft->y_ant = NULL;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]

	ft->M = 0;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
	ft->N = 0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
	ft->x_coefs = NULL;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
	ft->y_coefs = NULL;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]

	// Exit success
	return 0;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <filter_calc>:
#define __CASE_A__

#ifdef __CASE_A__

float filter_calc(filter_t *ft, uint32_t x)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
	if(!ft || ft->status == 0)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <filter_calc+0x18>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7f1b      	ldrb	r3, [r3, #28]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <filter_calc+0x1c>
		// Filter is disabled. Return error
		return -1;
 8000e08:	4b58      	ldr	r3, [pc, #352]	; (8000f6c <filter_calc+0x17c>)
 8000e0a:	e0a6      	b.n	8000f5a <filter_calc+0x16a>
	
	float y = 0;
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
	int i = ft->M;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60bb      	str	r3, [r7, #8]

	while(i != 0)
 8000e18:	e027      	b.n	8000e6a <filter_calc+0x7a>
	{
		// Update x_ant values
		ft->x_ant[i] = ft->x_ant[i-1];
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000e24:	440b      	add	r3, r1
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	441a      	add	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6899      	ldr	r1, [r3, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	440b      	add	r3, r1
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	601a      	str	r2, [r3, #0]
		// Add to y only the x_ant values
		y += ft->x_coefs[i] * ft->x_ant[i];
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695a      	ldr	r2, [r3, #20]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	ed93 7a00 	vldr	s14, [r3]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	edd3 7a00 	vldr	s15, [r3]
 8000e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e58:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e60:	edc7 7a03 	vstr	s15, [r7, #12]
		i--;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
	while(i != 0)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1d4      	bne.n	8000e1a <filter_calc+0x2a>
	}
	// Update last received X value
	ft->x_ant[0] = x;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	ee07 2a90 	vmov	s15, r2
 8000e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e7e:	edc3 7a00 	vstr	s15, [r3]
	// Add it to y	
	y += ft->x_coefs[i] * ft->x_ant[i];
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695a      	ldr	r2, [r3, #20]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	ed93 7a00 	vldr	s14, [r3]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eaa:	edc7 7a03 	vstr	s15, [r7, #12]
	
	i = ft->N;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	60bb      	str	r3, [r7, #8]
	while (i != 0)
 8000eb4:	e027      	b.n	8000f06 <filter_calc+0x116>
	{
		// Update y_ant values
		ft->y_ant[i] = ft->y_ant[i-1];
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	68b9      	ldr	r1, [r7, #8]
 8000ebc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000ec0:	440b      	add	r3, r1
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	441a      	add	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68d9      	ldr	r1, [r3, #12]
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	6812      	ldr	r2, [r2, #0]
 8000ed2:	601a      	str	r2, [r3, #0]
		// Add to y only the y_ant values
		y += ft->y_coefs[i] * ft->y_ant[i];
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	ed93 7a00 	vldr	s14, [r3]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efc:	edc7 7a03 	vstr	s15, [r7, #12]
		i--;
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
	while (i != 0)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1d4      	bne.n	8000eb6 <filter_calc+0xc6>
	}
	// Update last Y value = x
	ft->y_ant[0] = y;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	601a      	str	r2, [r3, #0]
	// Add it to y
	y += ft->y_coefs[i] * ft->y_ant[i];
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	ed93 7a00 	vldr	s14, [r3]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
 8000f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f34:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f3c:	edc7 7a03 	vstr	s15, [r7, #12]
	
	// add dc component
	y += ft->dc;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f54:	edc7 7a03 	vstr	s15, [r7, #12]

	// Return filtered (x) value
	return y;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	ee07 3a90 	vmov	s15, r3
}
 8000f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	bf800000 	.word	0xbf800000

08000f70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_GPIO_Init+0x44>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <MX_GPIO_Init+0x44>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_GPIO_Init+0x44>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_GPIO_Init+0x44>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <MX_GPIO_Init+0x44>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_GPIO_Init+0x44>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <GPIO_config_pins>:

/* USER CODE BEGIN 2 */

void GPIO_config_pins(uint8_t port, uint32_t pin_setting, uint32_t GPIO_Mode)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	73fb      	strb	r3, [r7, #15]
	GPIO_InitTypeDef GPIO_Struct = {0};
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
	GPIO_Struct.Pin = pin_setting;
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	617b      	str	r3, [r7, #20]
	GPIO_Struct.Mode = GPIO_Mode;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	61bb      	str	r3, [r7, #24]
	GPIO_Struct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIO_Ports[port], &GPIO_Struct);
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <GPIO_config_pins+0x48>)
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	f107 0214 	add.w	r2, r7, #20
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fb59 	bl	80046a8 <HAL_GPIO_Init>
}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	0800a98c 	.word	0x0800a98c

08001004 <GPIO_check_res_pins>:

char GPIO_check_res_pins(uint16_t port_addr, uint32_t *pin_setting)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	80fb      	strh	r3, [r7, #6]
	if(port_addr == 0)	//Port A
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d129      	bne.n	800106a <GPIO_check_res_pins+0x66>
	{
		if(IS_BIT_SET(*pin_setting, 13) || IS_BIT_SET(*pin_setting, 14))		//PA13, PA14 - DEBUG
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0b5b      	lsrs	r3, r3, #13
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d106      	bne.n	8001032 <GPIO_check_res_pins+0x2e>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	0b9b      	lsrs	r3, r3, #14
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00d      	beq.n	800104e <GPIO_check_res_pins+0x4a>
		{
			CLEARBIT(*pin_setting, 13);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	601a      	str	r2, [r3, #0]
			CLEARBIT(*pin_setting, 14);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	601a      	str	r2, [r3, #0]
			return (char)(-1);
 800104a:	23ff      	movs	r3, #255	; 0xff
 800104c:	e02d      	b.n	80010aa <GPIO_check_res_pins+0xa6>
		}
		if(IS_BIT_SET(*pin_setting, 0)) // PA0 - ADC1 IN0
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <GPIO_check_res_pins+0x66>
		{
			CLEARBIT(*pin_setting, 0);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f023 0201 	bic.w	r2, r3, #1
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	601a      	str	r2, [r3, #0]
			return (char)(-1);
 8001066:	23ff      	movs	r3, #255	; 0xff
 8001068:	e01f      	b.n	80010aa <GPIO_check_res_pins+0xa6>
		}			
	}
	if(port_addr == 3) 	//Port D
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d11b      	bne.n	80010a8 <GPIO_check_res_pins+0xa4>
	{
		if(IS_BIT_SET(*pin_setting, 8) || IS_BIT_SET(*pin_setting, 9))	//PD8, PD9 - UART
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <GPIO_check_res_pins+0x88>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	0a5b      	lsrs	r3, r3, #9
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00d      	beq.n	80010a8 <GPIO_check_res_pins+0xa4>
		{
			CLEARBIT(*pin_setting, 8);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	601a      	str	r2, [r3, #0]
			CLEARBIT(*pin_setting, 9);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	601a      	str	r2, [r3, #0]
			return (char)(-1);
 80010a4:	23ff      	movs	r3, #255	; 0xff
 80010a6:	e000      	b.n	80010aa <GPIO_check_res_pins+0xa6>
		}
	}
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <ver_cb>:
@usage		 VER

@brief	 	 Prints the version and colaborators info 
******************************************************************************/
char ver_cb(uint8_t argc, char** argv)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
	if(argc != 1) // number of arguments invalid?
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d001      	beq.n	80010ce <ver_cb+0x16>
		return (char)(-EINVARG);
 80010ca:	23fa      	movs	r3, #250	; 0xfa
 80010cc:	e006      	b.n	80010dc <ver_cb+0x24>
	
	UART_puts("Current version: 1.0\n\rUsing STM32F767ZI-NUCLEO.\n\n\r");
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <ver_cb+0x2c>)
 80010d0:	f001 fd30 	bl	8002b34 <UART_puts>
	UART_puts("Developers:\n\r- Diogo Fernandes\n\r- Tomas Abreu\n\r@LPI-II, T3G9\n\r");
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <ver_cb+0x30>)
 80010d6:	f001 fd2d 	bl	8002b34 <UART_puts>
	return 0;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	0800a3cc 	.word	0x0800a3cc
 80010e8:	0800a400 	.word	0x0800a400

080010ec <mr_cb>:
@usage		 MR <addr16> <length8>

@brief	 	 Read <length> memory positions, starting on <addr>
******************************************************************************/
char mr_cb(uint8_t argc, char** argv)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
	uint32_t addr;
	uint16_t len;
	
	if(argc != 3) // number of arguments invalid?
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d001      	beq.n	8001102 <mr_cb+0x16>
		return (char)(-EINVARG);
 80010fe:	23fa      	movs	r3, #250	; 0xfa
 8001100:	e026      	b.n	8001150 <mr_cb+0x64>
	
	addr = my_atoi(argv[1]);		// converts argument to int 
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	3304      	adds	r3, #4
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fd41 	bl	8002b90 <my_atoi>
 800110e:	4603      	mov	r3, r0
 8001110:	60fb      	str	r3, [r7, #12]
	if(!IS_ADDR16(addr))
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d301      	bcc.n	800111e <mr_cb+0x32>
		return (char)(-EINVARG);
 800111a:	23fa      	movs	r3, #250	; 0xfa
 800111c:	e018      	b.n	8001150 <mr_cb+0x64>
	
	len = my_atoi(argv[2]);			// converts argument to int 
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3308      	adds	r3, #8
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fd33 	bl	8002b90 <my_atoi>
 800112a:	4603      	mov	r3, r0
 800112c:	817b      	strh	r3, [r7, #10]
	if((len == 0) || (!IS_ADDR8(len)))
 800112e:	897b      	ldrh	r3, [r7, #10]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <mr_cb+0x4e>
 8001134:	897b      	ldrh	r3, [r7, #10]
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d901      	bls.n	800113e <mr_cb+0x52>
		return (char)(-EINVARG);
 800113a:	23fa      	movs	r3, #250	; 0xfa
 800113c:	e008      	b.n	8001150 <mr_cb+0x64>
	
	return memory_read(addr, len);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	b29b      	uxth	r3, r3
 8001142:	897a      	ldrh	r2, [r7, #10]
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fadf 	bl	800170c <memory_read>
 800114e:	4603      	mov	r3, r0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <mw_cb>:
@usage		 MW <addr16> <length8> <byte8>

@brief	 	 Write <byte>, starting on memory address <addr> for <lenght> positions
******************************************************************************/
char mw_cb(uint8_t argc, char** argv)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
	uint32_t addr;
	uint16_t len;
	uint16_t byte;
	
	if(argc != 4) 	// number of arguments invalid?
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b04      	cmp	r3, #4
 8001168:	d001      	beq.n	800116e <mw_cb+0x16>
		return (char)(-EINVARG);
 800116a:	23fa      	movs	r3, #250	; 0xfa
 800116c:	e036      	b.n	80011dc <mw_cb+0x84>
	
	addr = my_atoi(argv[1]);	// converts argument to int 
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3304      	adds	r3, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fd0b 	bl	8002b90 <my_atoi>
 800117a:	4603      	mov	r3, r0
 800117c:	60fb      	str	r3, [r7, #12]
	if(!IS_ADDR16(addr))
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001184:	d301      	bcc.n	800118a <mw_cb+0x32>
		return (char)(-EINVARG);
 8001186:	23fa      	movs	r3, #250	; 0xfa
 8001188:	e028      	b.n	80011dc <mw_cb+0x84>
	
	len = (char) my_atoi(argv[2]);	// converts argument to int 
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3308      	adds	r3, #8
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f001 fcfd 	bl	8002b90 <my_atoi>
 8001196:	4603      	mov	r3, r0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	817b      	strh	r3, [r7, #10]
	if((len == 0) || (!IS_ADDR8(len)))
 800119c:	897b      	ldrh	r3, [r7, #10]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <mw_cb+0x50>
 80011a2:	897b      	ldrh	r3, [r7, #10]
 80011a4:	2bff      	cmp	r3, #255	; 0xff
 80011a6:	d901      	bls.n	80011ac <mw_cb+0x54>
		return (char)(-EINVARG);
 80011a8:	23fa      	movs	r3, #250	; 0xfa
 80011aa:	e017      	b.n	80011dc <mw_cb+0x84>
		
	byte = (char) my_atoi(argv[3]);	// converts argument to int 
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	330c      	adds	r3, #12
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fcec 	bl	8002b90 <my_atoi>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	813b      	strh	r3, [r7, #8]
	if(!IS_ADDR8(byte))
 80011be:	893b      	ldrh	r3, [r7, #8]
 80011c0:	2bff      	cmp	r3, #255	; 0xff
 80011c2:	d901      	bls.n	80011c8 <mw_cb+0x70>
		return (char)(-EINVARG);
 80011c4:	23fa      	movs	r3, #250	; 0xfa
 80011c6:	e009      	b.n	80011dc <mw_cb+0x84>

	return memory_write(addr, len, byte);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	897a      	ldrh	r2, [r7, #10]
 80011ce:	b2d1      	uxtb	r1, r2
 80011d0:	893a      	ldrh	r2, [r7, #8]
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 faf3 	bl	80017c0 <memory_write>
 80011da:	4603      	mov	r3, r0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <mi_cb>:
@usage		 MI <port_addr8> <pin_setting8>

@brief	 	 
******************************************************************************/
char mi_cb(uint8_t argc, char** argv)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	; 0x30
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	char str[32];	// Output message
	
	if(argc != 3) // number of arguments invalid?
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d001      	beq.n	80011fa <mi_cb+0x16>
		return (char)(-EINVARG);
 80011f6:	23fa      	movs	r3, #250	; 0xfa
 80011f8:	e062      	b.n	80012c0 <mi_cb+0xdc>
	
	port_addr = my_atoi(argv[1]);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3304      	adds	r3, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fcc5 	bl	8002b90 <my_atoi>
 8001206:	4603      	mov	r3, r0
 8001208:	85bb      	strh	r3, [r7, #44]	; 0x2c
	if(!IS_PORT_ADDR(port_addr))
 800120a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800120c:	2b0a      	cmp	r3, #10
 800120e:	d901      	bls.n	8001214 <mi_cb+0x30>
		return (char)(-EINVARG);
 8001210:	23fa      	movs	r3, #250	; 0xfa
 8001212:	e055      	b.n	80012c0 <mi_cb+0xdc>
	
	pin_setting = my_atoi(argv[2]);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	3308      	adds	r3, #8
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fcb8 	bl	8002b90 <my_atoi>
 8001220:	4603      	mov	r3, r0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
	if(!IS_PIN_SETTING(pin_setting))
 8001224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <mi_cb+0x4e>
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d301      	bcc.n	8001236 <mi_cb+0x52>
		return (char)(-EINVARG);
 8001232:	23fa      	movs	r3, #250	; 0xfa
 8001234:	e044      	b.n	80012c0 <mi_cb+0xdc>
	
	if(GPIO_check_res_pins(port_addr, &pin_setting))
 8001236:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800123a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fee0 	bl	8001004 <GPIO_check_res_pins>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <mi_cb+0x6c>
		UART_puts("Reserved pins cannot be configured.\n\r");
 800124a:	481f      	ldr	r0, [pc, #124]	; (80012c8 <mi_cb+0xe4>)
 800124c:	f001 fc72 	bl	8002b34 <UART_puts>
	
	GPIO_config_pins(port_addr, pin_setting, GPIO_MODE_INPUT);
 8001250:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001252:	b2db      	uxtb	r3, r3
 8001254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001256:	2200      	movs	r2, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fead 	bl	8000fb8 <GPIO_config_pins>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 800125e:	2300      	movs	r3, #0
 8001260:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001264:	e027      	b.n	80012b6 <mi_cb+0xd2>
	{
		if(((pin_setting & 0x01) == 1) && (GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_INPUT)) // checks if LSB is 1
 8001266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	d01a      	beq.n	80012a6 <mi_cb+0xc2>
 8001270:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001272:	4a16      	ldr	r2, [pc, #88]	; (80012cc <mi_cb+0xe8>)
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10c      	bne.n	80012a6 <mi_cb+0xc2>
		{
			sprintf(str, "Pin %2d configured as input.\n\r", i);
 800128c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	490e      	ldr	r1, [pc, #56]	; (80012d0 <mi_cb+0xec>)
 8001296:	4618      	mov	r0, r3
 8001298:	f006 ff5c 	bl	8008154 <siprintf>
			UART_puts(str);
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fc47 	bl	8002b34 <UART_puts>
		}
		pin_setting >>= 1;
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	085b      	lsrs	r3, r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 80012ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012b0:	3301      	adds	r3, #1
 80012b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80012b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	d9d3      	bls.n	8001266 <mi_cb+0x82>
	}
	return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3730      	adds	r7, #48	; 0x30
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	0800a440 	.word	0x0800a440
 80012cc:	0800a98c 	.word	0x0800a98c
 80012d0:	0800a468 	.word	0x0800a468

080012d4 <mo_cb>:
@usage		 MO <port_addr8> <pin_setting8>

@brief	 	 
******************************************************************************/
char mo_cb(uint8_t argc, char** argv)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	char str[32];	// Output message
	
	if(argc != 3) // number of arguments invalid?
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d001      	beq.n	80012ea <mo_cb+0x16>
		return (char)(-EINVARG);
 80012e6:	23fa      	movs	r3, #250	; 0xfa
 80012e8:	e062      	b.n	80013b0 <mo_cb+0xdc>
	
	port_addr = my_atoi(argv[1]);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	3304      	adds	r3, #4
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fc4d 	bl	8002b90 <my_atoi>
 80012f6:	4603      	mov	r3, r0
 80012f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	if(!IS_PORT_ADDR(port_addr))
 80012fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012fc:	2b0a      	cmp	r3, #10
 80012fe:	d901      	bls.n	8001304 <mo_cb+0x30>
		return (char)(-EINVARG);
 8001300:	23fa      	movs	r3, #250	; 0xfa
 8001302:	e055      	b.n	80013b0 <mo_cb+0xdc>
	
	pin_setting = my_atoi(argv[2]);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	3308      	adds	r3, #8
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f001 fc40 	bl	8002b90 <my_atoi>
 8001310:	4603      	mov	r3, r0
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
	if(!IS_PIN_SETTING(pin_setting))
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <mo_cb+0x4e>
 800131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001320:	d301      	bcc.n	8001326 <mo_cb+0x52>
		return (char)(-EINVARG);
 8001322:	23fa      	movs	r3, #250	; 0xfa
 8001324:	e044      	b.n	80013b0 <mo_cb+0xdc>
		
	if(GPIO_check_res_pins(port_addr, &pin_setting))
 8001326:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800132a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe68 	bl	8001004 <GPIO_check_res_pins>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <mo_cb+0x6c>
		UART_puts("Reserved pins cannot be configured.\n\r");
 800133a:	481f      	ldr	r0, [pc, #124]	; (80013b8 <mo_cb+0xe4>)
 800133c:	f001 fbfa 	bl	8002b34 <UART_puts>
	
	GPIO_config_pins(port_addr, pin_setting, GPIO_MODE_OUTPUT_PP);
 8001340:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001342:	b2db      	uxtb	r3, r3
 8001344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001346:	2201      	movs	r2, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fe35 	bl	8000fb8 <GPIO_config_pins>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 800134e:	2300      	movs	r3, #0
 8001350:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001354:	e027      	b.n	80013a6 <mo_cb+0xd2>
	{
		if(((pin_setting & 0x01) == 1) && (GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_OUTPUT_PP)) // checks if LSB is 1
 8001356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01a      	beq.n	8001396 <mo_cb+0xc2>
 8001360:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <mo_cb+0xe8>)
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d10c      	bne.n	8001396 <mo_cb+0xc2>
		{
			sprintf(str, "Pin %2d configured as output.\n\r", i);		
 800137c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	490e      	ldr	r1, [pc, #56]	; (80013c0 <mo_cb+0xec>)
 8001386:	4618      	mov	r0, r3
 8001388:	f006 fee4 	bl	8008154 <siprintf>
			UART_puts(str);
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fbcf 	bl	8002b34 <UART_puts>
		}
		pin_setting >>= 1;
 8001396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 800139c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013a0:	3301      	adds	r3, #1
 80013a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	d9d3      	bls.n	8001356 <mo_cb+0x82>
	}
	return 0;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3730      	adds	r7, #48	; 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	0800a440 	.word	0x0800a440
 80013bc:	0800a98c 	.word	0x0800a98c
 80013c0:	0800a488 	.word	0x0800a488

080013c4 <rd_cb>:
@usage		 RD <port_addr8> <pin_setting8>

@brief	 	 
******************************************************************************/
char rd_cb(uint8_t argc, char** argv)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b090      	sub	sp, #64	; 0x40
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	char str[42];	// Output message
	
	if(argc != 3) // number of arguments invalid?
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d001      	beq.n	80013da <rd_cb+0x16>
		return (char)(-EINVARG);
 80013d6:	23fa      	movs	r3, #250	; 0xfa
 80013d8:	e07c      	b.n	80014d4 <rd_cb+0x110>
	
	port_addr = my_atoi(argv[1]);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3304      	adds	r3, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fbd5 	bl	8002b90 <my_atoi>
 80013e6:	4603      	mov	r3, r0
 80013e8:	873b      	strh	r3, [r7, #56]	; 0x38
	if(!IS_PORT_ADDR(port_addr))
 80013ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80013ec:	2b0a      	cmp	r3, #10
 80013ee:	d901      	bls.n	80013f4 <rd_cb+0x30>
		return (char)(-EINVARG);
 80013f0:	23fa      	movs	r3, #250	; 0xfa
 80013f2:	e06f      	b.n	80014d4 <rd_cb+0x110>
	
	pin_setting = my_atoi(argv[2]);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	3308      	adds	r3, #8
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fbc8 	bl	8002b90 <my_atoi>
 8001400:	4603      	mov	r3, r0
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(!IS_PIN_SETTING(pin_setting))
 8001404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <rd_cb+0x4e>
 800140a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d301      	bcc.n	8001416 <rd_cb+0x52>
		return (char)(-EINVARG);
 8001412:	23fa      	movs	r3, #250	; 0xfa
 8001414:	e05e      	b.n	80014d4 <rd_cb+0x110>
	
	sprintf(str, "GPIO Port %c\n\r", (char)(port_addr + 'A'));
 8001416:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001418:	b2db      	uxtb	r3, r3
 800141a:	3341      	adds	r3, #65	; 0x41
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	492d      	ldr	r1, [pc, #180]	; (80014dc <rd_cb+0x118>)
 8001426:	4618      	mov	r0, r3
 8001428:	f006 fe94 	bl	8008154 <siprintf>
	UART_puts(str);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fb7f 	bl	8002b34 <UART_puts>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 8001436:	2300      	movs	r3, #0
 8001438:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800143c:	e045      	b.n	80014ca <rd_cb+0x106>
	{
		if((pin_setting & 0x01) == 1) // checks if LSB is 1
 800143e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d035      	beq.n	80014b4 <rd_cb+0xf0>
		{
			if(GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_INPUT) // PinMode as input?
 8001448:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800144a:	4a25      	ldr	r2, [pc, #148]	; (80014e0 <rd_cb+0x11c>)
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d119      	bne.n	8001498 <rd_cb+0xd4>
			{
				uint8_t val;
				val = HAL_GPIO_ReadPin(GPIO_Ports[port_addr], GPIO_Pins[i]);
 8001464:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <rd_cb+0x11c>)
 8001468:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800146c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001470:	491c      	ldr	r1, [pc, #112]	; (80014e4 <rd_cb+0x120>)
 8001472:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001476:	4619      	mov	r1, r3
 8001478:	4610      	mov	r0, r2
 800147a:	f003 fac1 	bl	8004a00 <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				sprintf(str, "Pin %2d - '%d'\n\r", i, val);
 8001484:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001488:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800148c:	f107 000c 	add.w	r0, r7, #12
 8001490:	4915      	ldr	r1, [pc, #84]	; (80014e8 <rd_cb+0x124>)
 8001492:	f006 fe5f 	bl	8008154 <siprintf>
 8001496:	e007      	b.n	80014a8 <rd_cb+0xe4>
			}
			else
				sprintf(str, "Pin %2d not configured as input mode.\n\r", i);	// not able to read pin value
 8001498:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	4912      	ldr	r1, [pc, #72]	; (80014ec <rd_cb+0x128>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f006 fe56 	bl	8008154 <siprintf>
			
			UART_puts(str);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fb41 	bl	8002b34 <UART_puts>
 80014b2:	e002      	b.n	80014ba <rd_cb+0xf6>
		}
		else
			UART_puts("0\n\r");
 80014b4:	480e      	ldr	r0, [pc, #56]	; (80014f0 <rd_cb+0x12c>)
 80014b6:	f001 fb3d 	bl	8002b34 <UART_puts>
		
		pin_setting >>= 1;
 80014ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 80014c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014c4:	3301      	adds	r3, #1
 80014c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80014ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	d9b5      	bls.n	800143e <rd_cb+0x7a>
	}
	return 0;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3740      	adds	r7, #64	; 0x40
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	0800a4a8 	.word	0x0800a4a8
 80014e0:	0800a98c 	.word	0x0800a98c
 80014e4:	0800a9b8 	.word	0x0800a9b8
 80014e8:	0800a4b8 	.word	0x0800a4b8
 80014ec:	0800a4cc 	.word	0x0800a4cc
 80014f0:	0800a4f4 	.word	0x0800a4f4

080014f4 <wd_cb>:
@usage		 WD <port_addr8> <pin_setting8> <pin_values8>

@brief	 	 
******************************************************************************/
char wd_cb(uint8_t argc, char** argv)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b090      	sub	sp, #64	; 0x40
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
	uint16_t port_addr;
	uint32_t pin_setting;
	uint16_t pin_values;
	char str[42];	// Output message
	
	if(argc != 4) // number of arguments invalid?
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b04      	cmp	r3, #4
 8001504:	d001      	beq.n	800150a <wd_cb+0x16>
		return (char)(-EINVARG);
 8001506:	23fa      	movs	r3, #250	; 0xfa
 8001508:	e08c      	b.n	8001624 <wd_cb+0x130>
	
	port_addr = my_atoi(argv[1]);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	3304      	adds	r3, #4
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f001 fb3d 	bl	8002b90 <my_atoi>
 8001516:	4603      	mov	r3, r0
 8001518:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(!IS_PORT_ADDR(port_addr))
 800151a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800151c:	2b0a      	cmp	r3, #10
 800151e:	d901      	bls.n	8001524 <wd_cb+0x30>
		return (char)(-EINVARG);
 8001520:	23fa      	movs	r3, #250	; 0xfa
 8001522:	e07f      	b.n	8001624 <wd_cb+0x130>
	
	pin_setting = my_atoi(argv[2]);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3308      	adds	r3, #8
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f001 fb30 	bl	8002b90 <my_atoi>
 8001530:	4603      	mov	r3, r0
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(!IS_PIN_SETTING(pin_setting))
 8001534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <wd_cb+0x4e>
 800153a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800153c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001540:	d301      	bcc.n	8001546 <wd_cb+0x52>
		return (char)(-EINVARG);
 8001542:	23fa      	movs	r3, #250	; 0xfa
 8001544:	e06e      	b.n	8001624 <wd_cb+0x130>
	
	pin_values = my_atoi(argv[3]);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	330c      	adds	r3, #12
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f001 fb1f 	bl	8002b90 <my_atoi>
 8001552:	4603      	mov	r3, r0
 8001554:	877b      	strh	r3, [r7, #58]	; 0x3a
	if(!IS_ADDR8(pin_values))
 8001556:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001558:	2bff      	cmp	r3, #255	; 0xff
 800155a:	d901      	bls.n	8001560 <wd_cb+0x6c>
		return (char)(-EINVARG);
 800155c:	23fa      	movs	r3, #250	; 0xfa
 800155e:	e061      	b.n	8001624 <wd_cb+0x130>

	sprintf(str, "GPIO Port %c\n\r", (char)(port_addr + 'A'));
 8001560:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3341      	adds	r3, #65	; 0x41
 8001566:	b2db      	uxtb	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	492f      	ldr	r1, [pc, #188]	; (800162c <wd_cb+0x138>)
 8001570:	4618      	mov	r0, r3
 8001572:	f006 fdef 	bl	8008154 <siprintf>
	UART_puts(str);
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fada 	bl	8002b34 <UART_puts>
	
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001586:	e048      	b.n	800161a <wd_cb+0x126>
	{
		if((pin_setting & 0x01) == 1) // checks if LSB is 1
 8001588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d038      	beq.n	8001604 <wd_cb+0x110>
		{
			if(GPIO_PIN_MODE(port_addr, i) == GPIO_MODE_OUTPUT_PP) // PinMode as output push-pull?
 8001592:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001594:	4a26      	ldr	r2, [pc, #152]	; (8001630 <wd_cb+0x13c>)
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa22 f303 	lsr.w	r3, r2, r3
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d11d      	bne.n	80015ea <wd_cb+0xf6>
			{
				uint8_t pin_val = (pin_values & 0x01);
 80015ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				HAL_GPIO_WritePin(GPIO_Ports[port_addr], GPIO_Pins[i], (GPIO_PinState)pin_val);
 80015ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <wd_cb+0x13c>)
 80015be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80015c6:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <wd_cb+0x140>)
 80015c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015cc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80015d0:	4619      	mov	r1, r3
 80015d2:	f003 fa2d 	bl	8004a30 <HAL_GPIO_WritePin>
				sprintf(str, "Pin %2d - '%d'\n\r", i, pin_val);
 80015d6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80015da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80015de:	f107 0008 	add.w	r0, r7, #8
 80015e2:	4915      	ldr	r1, [pc, #84]	; (8001638 <wd_cb+0x144>)
 80015e4:	f006 fdb6 	bl	8008154 <siprintf>
 80015e8:	e007      	b.n	80015fa <wd_cb+0x106>
			}
			else
				sprintf(str, "Pin %2d not configured as output mode.\n\r", i);	// not able to read pin value
 80015ea:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	4912      	ldr	r1, [pc, #72]	; (800163c <wd_cb+0x148>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f006 fdad 	bl	8008154 <siprintf>
			
			UART_puts(str);
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 fa98 	bl	8002b34 <UART_puts>
		}
		pin_setting >>= 1;
 8001604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	63fb      	str	r3, [r7, #60]	; 0x3c
		pin_values >>= 1;
 800160a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	877b      	strh	r3, [r7, #58]	; 0x3a
	for(uint8_t i = 0; i < 16; i++) // check entire byte for bits at level high
 8001610:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001614:	3301      	adds	r3, #1
 8001616:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800161a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800161e:	2b0f      	cmp	r3, #15
 8001620:	d9b2      	bls.n	8001588 <wd_cb+0x94>
	}
	
	return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3740      	adds	r7, #64	; 0x40
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0800a4a8 	.word	0x0800a4a8
 8001630:	0800a98c 	.word	0x0800a98c
 8001634:	0800a9b8 	.word	0x0800a9b8
 8001638:	0800a4b8 	.word	0x0800a4b8
 800163c:	0800a4f8 	.word	0x0800a4f8

08001640 <ra_cb>:
@usage		 RA <addr2>

@brief	 	 
******************************************************************************/
char ra_cb(uint8_t argc, char** argv)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b090      	sub	sp, #64	; 0x40
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr;
	uint32_t adcValue;
	uint32_t volt;
	char str[40];	// Output message
	
	if(argc != 2) // number of arguments invalid?
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d001      	beq.n	8001656 <ra_cb+0x16>
		return (char)(-EINVARG);
 8001652:	23fa      	movs	r3, #250	; 0xfa
 8001654:	e046      	b.n	80016e4 <ra_cb+0xa4>
	
	addr = my_atoi(argv[1]);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3304      	adds	r3, #4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fa97 	bl	8002b90 <my_atoi>
 8001662:	4603      	mov	r3, r0
 8001664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(!IS_ADDR4(addr))
 8001668:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d901      	bls.n	8001674 <ra_cb+0x34>
		return (char)(-EINVARG);
 8001670:	23fa      	movs	r3, #250	; 0xfa
 8001672:	e037      	b.n	80016e4 <ra_cb+0xa4>

	if(ADC_Config_Channel(&hadc1, addr)) // PinMode as output push-pull?
 8001674:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001678:	4619      	mov	r1, r3
 800167a:	4821      	ldr	r0, [pc, #132]	; (8001700 <ra_cb+0xc0>)
 800167c:	f7ff f876 	bl	800076c <ADC_Config_Channel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d004      	beq.n	8001690 <ra_cb+0x50>
	{
		UART_puts("Pin not configured as input mode.\n\r");	// not able to read pin value
 8001686:	481f      	ldr	r0, [pc, #124]	; (8001704 <ra_cb+0xc4>)
 8001688:	f001 fa54 	bl	8002b34 <UART_puts>
		return (char)(-EPERM);
 800168c:	23f9      	movs	r3, #249	; 0xf9
 800168e:	e029      	b.n	80016e4 <ra_cb+0xa4>
	}
	
	adcValue = ADC_Polling_Conv(&hadc1);
 8001690:	481b      	ldr	r0, [pc, #108]	; (8001700 <ra_cb+0xc0>)
 8001692:	f7ff f8fb 	bl	800088c <ADC_Polling_Conv>
 8001696:	63b8      	str	r0, [r7, #56]	; 0x38
	volt = ((double)adcValue * 3300 / 4095);
 8001698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016a2:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80016f0 <ra_cb+0xb0>
 80016a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016aa:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80016f8 <ra_cb+0xb8>
 80016ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016b6:	ee17 3a90 	vmov	r3, s15
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(str, "ADC Channel %2d value: %d mV.\n\r", addr, volt);
 80016bc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80016c0:	f107 000c 	add.w	r0, r7, #12
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	4910      	ldr	r1, [pc, #64]	; (8001708 <ra_cb+0xc8>)
 80016c8:	f006 fd44 	bl	8008154 <siprintf>
	UART_puts(str);
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 fa2f 	bl	8002b34 <UART_puts>
	
	ADC_DeConfig_Channel(&hadc1, addr); // Restores initial pin mode
 80016d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016da:	4619      	mov	r1, r3
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <ra_cb+0xc0>)
 80016de:	f7ff f8b7 	bl	8000850 <ADC_DeConfig_Channel>
	
	return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3740      	adds	r7, #64	; 0x40
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	f3af 8000 	nop.w
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40a9c800 	.word	0x40a9c800
 80016f8:	00000000 	.word	0x00000000
 80016fc:	40affe00 	.word	0x40affe00
 8001700:	2000027c 	.word	0x2000027c
 8001704:	0800a524 	.word	0x0800a524
 8001708:	0800a548 	.word	0x0800a548

0800170c <memory_read>:
@param  	 Number of addresses to be read

@brief	 	 Read <length> memory positions, starting on <addr>
******************************************************************************/
static char memory_read(uint16_t addr, uint8_t len)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b092      	sub	sp, #72	; 0x48
 8001710:	af02      	add	r7, sp, #8
 8001712:	4603      	mov	r3, r0
 8001714:	460a      	mov	r2, r1
 8001716:	80fb      	strh	r3, [r7, #6]
 8001718:	4613      	mov	r3, r2
 800171a:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t* memory_ptr = (SRAM_BASE + addr); // Start reading memory from SRAM_BASE. addr is used as offset
 800171c:	88fa      	ldrh	r2, [r7, #6]
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <memory_read+0xa4>)
 8001720:	4413      	add	r3, r2
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
	char str[42];	// Output message
	
	if((memory_ptr + (len - 1)) > SRAM_TOP) // Check if memory_ptr won't go over memory top
 8001724:	797b      	ldrb	r3, [r7, #5]
 8001726:	3b01      	subs	r3, #1
 8001728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800172a:	4413      	add	r3, r2
 800172c:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <memory_read+0xa8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <memory_read+0x2a>
		return (char)(-EINVARG);
 8001732:	23fa      	movs	r3, #250	; 0xfa
 8001734:	e037      	b.n	80017a6 <memory_read+0x9a>

	for (i = 0; i < len; i++, addr++, memory_ptr++)
 8001736:	2300      	movs	r3, #0
 8001738:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800173c:	e02d      	b.n	800179a <memory_read+0x8e>
	{
		if(!IS_PRINTABLE(*memory_ptr)) // checks if (*memory_ptr) is a printable character
 800173e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b1f      	cmp	r3, #31
 8001744:	d903      	bls.n	800174e <memory_read+0x42>
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b7e      	cmp	r3, #126	; 0x7e
 800174c:	d908      	bls.n	8001760 <memory_read+0x54>
			sprintf(str, "Memory [0x%04X]:     (0x%02X)\n\r", addr, (*memory_ptr));
 800174e:	88fa      	ldrh	r2, [r7, #6]
 8001750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	f107 000c 	add.w	r0, r7, #12
 8001758:	4917      	ldr	r1, [pc, #92]	; (80017b8 <memory_read+0xac>)
 800175a:	f006 fcfb 	bl	8008154 <siprintf>
 800175e:	e00c      	b.n	800177a <memory_read+0x6e>
		else // Character is printable
			sprintf(str, "Memory [0x%04X]: '%c' (0x%02X)\n\r", addr, (*memory_ptr), (*memory_ptr));
 8001760:	88fa      	ldrh	r2, [r7, #6]
 8001762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	f107 000c 	add.w	r0, r7, #12
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	460b      	mov	r3, r1
 8001774:	4911      	ldr	r1, [pc, #68]	; (80017bc <memory_read+0xb0>)
 8001776:	f006 fced 	bl	8008154 <siprintf>
		
		UART_puts(str); // Print string
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4618      	mov	r0, r3
 8001780:	f001 f9d8 	bl	8002b34 <UART_puts>
	for (i = 0; i < len; i++, addr++, memory_ptr++)
 8001784:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001788:	3301      	adds	r3, #1
 800178a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	3301      	adds	r3, #1
 8001792:	80fb      	strh	r3, [r7, #6]
 8001794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001796:	3301      	adds	r3, #1
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
 800179a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800179e:	797b      	ldrb	r3, [r7, #5]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3cc      	bcc.n	800173e <memory_read+0x32>
	}
	
	return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3740      	adds	r7, #64	; 0x40
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20060000 	.word	0x20060000
 80017b4:	2006ffff 	.word	0x2006ffff
 80017b8:	0800a568 	.word	0x0800a568
 80017bc:	0800a588 	.word	0x0800a588

080017c0 <memory_write>:
@param  	 Byte to be written 

@brief	 	 Write <byte>, starting on memory address <addr> for <lenght> positions
******************************************************************************/
static char memory_write(uint16_t addr, uint8_t len, char byte)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b090      	sub	sp, #64	; 0x40
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
 80017ca:	460b      	mov	r3, r1
 80017cc:	717b      	strb	r3, [r7, #5]
 80017ce:	4613      	mov	r3, r2
 80017d0:	713b      	strb	r3, [r7, #4]
	uint8_t i;
	uint8_t* memory_ptr = (SRAM_BASE + addr); // Start reading memory from SRAM_BASE. addr is used as offset
 80017d2:	88fa      	ldrh	r2, [r7, #6]
 80017d4:	4b26      	ldr	r3, [pc, #152]	; (8001870 <memory_write+0xb0>)
 80017d6:	4413      	add	r3, r2
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
	char str[42];	// Output message
	
	if((memory_ptr + (len - 1)) > SRAM_TOP) // Check if memory_ptr won't go over memory top
 80017da:	797b      	ldrb	r3, [r7, #5]
 80017dc:	3b01      	subs	r3, #1
 80017de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017e0:	4413      	add	r3, r2
 80017e2:	4a24      	ldr	r2, [pc, #144]	; (8001874 <memory_write+0xb4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <memory_write+0x2c>
		return (char)(-EINVARG);
 80017e8:	23fa      	movs	r3, #250	; 0xfa
 80017ea:	e03d      	b.n	8001868 <memory_write+0xa8>

	if(!IS_PRINTABLE(byte)) // checks if (byte) is a printable character
 80017ec:	793b      	ldrb	r3, [r7, #4]
 80017ee:	2b1f      	cmp	r3, #31
 80017f0:	d902      	bls.n	80017f8 <memory_write+0x38>
 80017f2:	793b      	ldrb	r3, [r7, #4]
 80017f4:	2b7e      	cmp	r3, #126	; 0x7e
 80017f6:	d907      	bls.n	8001808 <memory_write+0x48>
		sprintf(str, "Byte 0x%02X:\n\r", byte);
 80017f8:	793a      	ldrb	r2, [r7, #4]
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	491e      	ldr	r1, [pc, #120]	; (8001878 <memory_write+0xb8>)
 8001800:	4618      	mov	r0, r3
 8001802:	f006 fca7 	bl	8008154 <siprintf>
 8001806:	e006      	b.n	8001816 <memory_write+0x56>
	else // Character is printable
		sprintf(str, "Byte '%c' [0x%02X]:\n\r", byte, byte);
 8001808:	793a      	ldrb	r2, [r7, #4]
 800180a:	793b      	ldrb	r3, [r7, #4]
 800180c:	f107 000c 	add.w	r0, r7, #12
 8001810:	491a      	ldr	r1, [pc, #104]	; (800187c <memory_write+0xbc>)
 8001812:	f006 fc9f 	bl	8008154 <siprintf>
	
	UART_puts(str);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4618      	mov	r0, r3
 800181c:	f001 f98a 	bl	8002b34 <UART_puts>
	for (i = 0; i < len; i++, addr++, memory_ptr++)
 8001820:	2300      	movs	r3, #0
 8001822:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001826:	e019      	b.n	800185c <memory_write+0x9c>
	{
		(*memory_ptr) = byte;	// write memory pointed by memory_ptr
 8001828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182a:	793a      	ldrb	r2, [r7, #4]
 800182c:	701a      	strb	r2, [r3, #0]
		sprintf(str, "\tMemory [0x%04X] successfuly written.\n\r", addr); // format the string we want to send
 800182e:	88fa      	ldrh	r2, [r7, #6]
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4912      	ldr	r1, [pc, #72]	; (8001880 <memory_write+0xc0>)
 8001836:	4618      	mov	r0, r3
 8001838:	f006 fc8c 	bl	8008154 <siprintf>
		UART_puts(str); // Print string
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	4618      	mov	r0, r3
 8001842:	f001 f977 	bl	8002b34 <UART_puts>
	for (i = 0; i < len; i++, addr++, memory_ptr++)
 8001846:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800184a:	3301      	adds	r3, #1
 800184c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	3301      	adds	r3, #1
 8001854:	80fb      	strh	r3, [r7, #6]
 8001856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001858:	3301      	adds	r3, #1
 800185a:	63bb      	str	r3, [r7, #56]	; 0x38
 800185c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001860:	797b      	ldrb	r3, [r7, #5]
 8001862:	429a      	cmp	r2, r3
 8001864:	d3e0      	bcc.n	8001828 <memory_write+0x68>
	}
	
	return 0;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3740      	adds	r7, #64	; 0x40
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20060000 	.word	0x20060000
 8001874:	2006ffff 	.word	0x2006ffff
 8001878:	0800a5ac 	.word	0x0800a5ac
 800187c:	0800a5bc 	.word	0x0800a5bc
 8001880:	0800a5d4 	.word	0x0800a5d4

08001884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188a:	f001 f9e0 	bl	8002c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188e:	f000 f847 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001892:	f7ff fb6d 	bl	8000f70 <MX_GPIO_Init>
  MX_DMA_Init();
 8001896:	f7ff fa13 	bl	8000cc0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800189a:	f000 ff91 	bl	80027c0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800189e:	f7fe feb3 	bl	8000608 <MX_ADC1_Init>
  MX_DAC_Init();
 80018a2:	f7ff f961 	bl	8000b68 <MX_DAC_Init>
  MX_TIM2_Init();
 80018a6:	f000 fe63 	bl	8002570 <MX_TIM2_Init>
  MX_TIM6_Init();
 80018aa:	f000 feaf 	bl	800260c <MX_TIM6_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	 
	UART_putchar('>'); // print prompt
 80018ae:	203e      	movs	r0, #62	; 0x3e
 80018b0:	f001 f926 	bl	8002b00 <UART_putchar>
	Rx_UART_init(); // set USART3 interrupt
 80018b4:	f001 f900 	bl	8002ab8 <Rx_UART_init>
  
	while (1)
  {
		if(Rx_flag)
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <main+0x8c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00d      	beq.n	80018de <main+0x5a>
		{
			c = UART_Receive(); // Returns received char
 80018c2:	f000 fff9 	bl	80028b8 <UART_Receive>
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
			if(c != (char)(-1))
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2bff      	cmp	r3, #255	; 0xff
 80018ce:	d003      	beq.n	80018d8 <main+0x54>
				// Its not a special character
				UART_putchar(c); // Received char is echoed
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 f914 	bl	8002b00 <UART_putchar>

			Rx_flag = 0;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <main+0x8c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
		}
		
		if(cmd_received)
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <main+0x90>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0e7      	beq.n	80018b8 <main+0x34>
		{
			if(exec_cmd(Rx_Buffer) == 0)// Is there an error?
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <main+0x94>)
 80018ea:	f7ff f8c1 	bl	8000a70 <exec_cmd>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d103      	bne.n	80018fc <main+0x78>
				// No error. Command is valid
				strcpy(last_valid_cmd, Rx_Buffer); // Save this as last valid command
 80018f4:	4908      	ldr	r1, [pc, #32]	; (8001918 <main+0x94>)
 80018f6:	4809      	ldr	r0, [pc, #36]	; (800191c <main+0x98>)
 80018f8:	f006 fc4c 	bl	8008194 <strcpy>
			
			UART_putchar('>');// print prompt
 80018fc:	203e      	movs	r0, #62	; 0x3e
 80018fe:	f001 f8ff 	bl	8002b00 <UART_putchar>
			cmd_received = 0;
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <main+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
			Rx_UART_init(); // ready to begin reception
 8001908:	f001 f8d6 	bl	8002ab8 <Rx_UART_init>
		if(Rx_flag)
 800190c:	e7d4      	b.n	80018b8 <main+0x34>
 800190e:	bf00      	nop
 8001910:	2000026d 	.word	0x2000026d
 8001914:	2000026e 	.word	0x2000026e
 8001918:	20000568 	.word	0x20000568
 800191c:	200000a4 	.word	0x200000a4

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0b8      	sub	sp, #224	; 0xe0
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800192a:	2234      	movs	r2, #52	; 0x34
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f006 fb12 	bl	8007f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	2290      	movs	r2, #144	; 0x90
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f006 fb03 	bl	8007f58 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <SystemClock_Config+0x118>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a38      	ldr	r2, [pc, #224]	; (8001a38 <SystemClock_Config+0x118>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <SystemClock_Config+0x118>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <SystemClock_Config+0x11c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a33      	ldr	r2, [pc, #204]	; (8001a3c <SystemClock_Config+0x11c>)
 8001970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <SystemClock_Config+0x11c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001982:	2302      	movs	r3, #2
 8001984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001988:	2301      	movs	r3, #1
 800198a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800198e:	2310      	movs	r3, #16
 8001990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001994:	2302      	movs	r3, #2
 8001996:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019a0:	2308      	movs	r3, #8
 80019a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80019a6:	23d8      	movs	r3, #216	; 0xd8
 80019a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ac:	2302      	movs	r3, #2
 80019ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 f8a1 	bl	8004b04 <HAL_RCC_OscConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80019c8:	f000 f83a 	bl	8001a40 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019cc:	f003 f84a 	bl	8004a64 <HAL_PWREx_EnableOverDrive>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80019d6:	f000 f833 	bl	8001a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019da:	230f      	movs	r3, #15
 80019dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e0:	2302      	movs	r3, #2
 80019e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80019fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a00:	2107      	movs	r1, #7
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fb2c 	bl	8005060 <HAL_RCC_ClockConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001a0e:	f000 f817 	bl	8001a40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a16:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fd1d 	bl	8005460 <HAL_RCCEx_PeriphCLKConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001a2c:	f000 f808 	bl	8001a40 <Error_Handler>
  }
}
 8001a30:	bf00      	nop
 8001a32:	37e0      	adds	r7, #224	; 0xe0
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a44:	b672      	cpsid	i
}
 8001a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <Error_Handler+0x8>
	...

08001a4c <parse_cmd>:

/*
	Analyses the command sent in str_in and execute its callback
*/
char parse_cmd(const Command_t cmd_list[], const char *str_in)
{		
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	char **argv = NULL; // List of arguments
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
	char *arg; // aux variable. Holds latest found argument
	char *s; // copy of received command. Necessary to use strtok
	
	uint8_t len;
	uint8_t argc = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75fb      	strb	r3, [r7, #23]
	char retval = (char)(-ECMDNF);
 8001a5e:	23fb      	movs	r3, #251	; 0xfb
 8001a60:	75bb      	strb	r3, [r7, #22]
	
	if ((str_in == NULL) || (strlen(str_in) == 0)) // empty command
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <parse_cmd+0x24>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <parse_cmd+0x28>
		return (char)(-ENOCMD);
 8001a70:	23fe      	movs	r3, #254	; 0xfe
 8001a72:	e06f      	b.n	8001b54 <parse_cmd+0x108>
	//if (cmd_list == NULL) // no list
		//return (-ENOLIST);   

	len = strlen(str_in) + 1;
 8001a74:	6838      	ldr	r0, [r7, #0]
 8001a76:	f7fe fbed 	bl	8000254 <strlen>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
	s = malloc(len);                 // just in case str_in is const
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f006 fa57 	bl	8007f38 <malloc>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	60bb      	str	r3, [r7, #8]
	
	if(s == NULL)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <parse_cmd+0x4c>
		return (char)(-ENOMEM);
 8001a94:	23fc      	movs	r3, #252	; 0xfc
 8001a96:	e05d      	b.n	8001b54 <parse_cmd+0x108>
	
	strcpy(s, str_in);
 8001a98:	6839      	ldr	r1, [r7, #0]
 8001a9a:	68b8      	ldr	r0, [r7, #8]
 8001a9c:	f006 fb7a 	bl	8008194 <strcpy>
	arg = strtok(s, DELIMETER);
 8001aa0:	492e      	ldr	r1, [pc, #184]	; (8001b5c <parse_cmd+0x110>)
 8001aa2:	68b8      	ldr	r0, [r7, #8]
 8001aa4:	f006 fb7e 	bl	80081a4 <strtok>
 8001aa8:	61b8      	str	r0, [r7, #24]
	while (arg)
 8001aaa:	e025      	b.n	8001af8 <parse_cmd+0xac>
	{
		argc++;
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
		len = sizeof (argv);
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	73fb      	strb	r3, [r7, #15]
		if(argc == 1)
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d106      	bne.n	8001aca <parse_cmd+0x7e>
				argv = malloc(len);
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f006 fa3a 	bl	8007f38 <malloc>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	e008      	b.n	8001adc <parse_cmd+0x90>
		else
				argv = realloc(argv, argc * len);
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	69f8      	ldr	r0, [r7, #28]
 8001ad6:	f006 faf1 	bl	80080bc <realloc>
 8001ada:	61f8      	str	r0, [r7, #28]

		argv[argc-1] = arg;
 8001adc:	7dfa      	ldrb	r2, [r7, #23]
 8001ade:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	4413      	add	r3, r2
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	601a      	str	r2, [r3, #0]
		arg = strtok(NULL, DELIMETER);
 8001aee:	491b      	ldr	r1, [pc, #108]	; (8001b5c <parse_cmd+0x110>)
 8001af0:	2000      	movs	r0, #0
 8001af2:	f006 fb57 	bl	80081a4 <strtok>
 8001af6:	61b8      	str	r0, [r7, #24]
	while (arg)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1d6      	bne.n	8001aac <parse_cmd+0x60>
	}

	if (argc)
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01d      	beq.n	8001b40 <parse_cmd+0xf4>
	{
		const Command_t *p;

		for(p = cmd_list; p->cmd; p++)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	e016      	b.n	8001b38 <parse_cmd+0xec>
		{
			if(strcmp(p->cmd, argv[0]) == 0)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4619      	mov	r1, r3
 8001b14:	4610      	mov	r0, r2
 8001b16:	f7fe fb93 	bl	8000240 <strcmp>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d108      	bne.n	8001b32 <parse_cmd+0xe6>
			{
				retval = (p->fn(argc, argv)); // Execute func
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	7dfa      	ldrb	r2, [r7, #23]
 8001b26:	69f9      	ldr	r1, [r7, #28]
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4798      	blx	r3
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	75bb      	strb	r3, [r7, #22]
				break;
 8001b30:	e006      	b.n	8001b40 <parse_cmd+0xf4>
		for(p = cmd_list; p->cmd; p++)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	330c      	adds	r3, #12
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e4      	bne.n	8001b0a <parse_cmd+0xbe>
			}
		}
	}

	// command not found
	if(argv)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <parse_cmd+0x100>
		free(argv);
 8001b46:	69f8      	ldr	r0, [r7, #28]
 8001b48:	f006 f9fe 	bl	8007f48 <free>

	free(s);
 8001b4c:	68b8      	ldr	r0, [r7, #8]
 8001b4e:	f006 f9fb 	bl	8007f48 <free>

	return retval;
 8001b52:	7dbb      	ldrb	r3, [r7, #22]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	0800a5fc 	.word	0x0800a5fc

08001b60 <sp_cb>:
	// (Period-1) = 1800
	{60000, 1800}
};

char sp_cb(uint8_t argc, char** argv)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b092      	sub	sp, #72	; 0x48
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
	uint32_t units;
	uint8_t i;
	uint8_t timeunits_arr_len;
	uint8_t retval = (char)(-EINVARG);
 8001b6c:	23fa      	movs	r3, #250	; 0xfa
 8001b6e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	char str[40];
	
	if(argc != 3) // number of arguments invalid?
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d001      	beq.n	8001b7c <sp_cb+0x1c>
		return (char)(-EINVARG);
 8001b78:	23fa      	movs	r3, #250	; 0xfa
 8001b7a:	e05f      	b.n	8001c3c <sp_cb+0xdc>
	
	units = my_atoi(argv[2]);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 f804 	bl	8002b90 <my_atoi>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if((units == 0) || (!IS_ADDR16(units)))
 8001b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <sp_cb+0x3a>
 8001b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d301      	bcc.n	8001b9e <sp_cb+0x3e>
		return (char)(-EINVARG);
 8001b9a:	23fa      	movs	r3, #250	; 0xfa
 8001b9c:	e04e      	b.n	8001c3c <sp_cb+0xdc>
	
	// get number of valid <timeunits>
	timeunits_arr_len = (sizeof(timeunits_arr) / sizeof(timeunits_arr[0]));
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	// Check if <timeunit> is valid
	for(i = 0; i < timeunits_arr_len; i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001baa:	e03f      	b.n	8001c2c <sp_cb+0xcc>
	{
		if(strcmp(argv[1], timeunits_arr[i]) == 0)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bb6:	4923      	ldr	r1, [pc, #140]	; (8001c44 <sp_cb+0xe4>)
 8001bb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	f7fe fb3e 	bl	8000240 <strcmp>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d12b      	bne.n	8001c22 <sp_cb+0xc2>
		{
			SP_cb_done = 1; // Mark that Sampling Period has been defined
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <sp_cb+0xe8>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
			// Update Timer reload values
			TIMER_6_Update(timer_reloads[i][0], (timer_reloads[i][1] * (uint16_t)(units)));
 8001bd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <sp_cb+0xec>)
 8001bd6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001be0:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <sp_cb+0xec>)
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	885b      	ldrh	r3, [r3, #2]
 8001be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bea:	b292      	uxth	r2, r2
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f000 fdc9 	bl	8002788 <TIMER_6_Update>
			snprintf(str, sizeof(str), "Sampling period defined as %ld %s\n\r", units, timeunits_arr[i]);
 8001bf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <sp_cb+0xe4>)
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	f107 000c 	add.w	r0, r7, #12
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c08:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <sp_cb+0xf0>)
 8001c0a:	2128      	movs	r1, #40	; 0x28
 8001c0c:	f006 fa6e 	bl	80080ec <sniprintf>
			UART_puts(str);
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 ff8d 	bl	8002b34 <UART_puts>
			// Exit success
			retval = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			break;
 8001c20:	e00a      	b.n	8001c38 <sp_cb+0xd8>
	for(i = 0; i < timeunits_arr_len; i++)
 8001c22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c26:	3301      	adds	r3, #1
 8001c28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c2c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001c30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d3b9      	bcc.n	8001bac <sp_cb+0x4c>
		}
	}
	
	// If <timeunit> was not found, retval equals (-EINVARG)
	return retval;
 8001c38:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3740      	adds	r7, #64	; 0x40
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000004 	.word	0x20000004
 8001c48:	200000b5 	.word	0x200000b5
 8001c4c:	0800ad70 	.word	0x0800ad70
 8001c50:	0800a610 	.word	0x0800a610

08001c54 <ac_cb>:

@brief	 	 Sets ADC channel to be used for sampling
******************************************************************************/

char ac_cb(uint8_t argc, char** argv)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b092      	sub	sp, #72	; 0x48
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
	uint8_t addr;
	char str[62];
	
	if(argc != 2) // number of arguments invalid?
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d001      	beq.n	8001c6a <ac_cb+0x16>
		return (char)(-EINVARG);
 8001c66:	23fa      	movs	r3, #250	; 0xfa
 8001c68:	e02a      	b.n	8001cc0 <ac_cb+0x6c>
	
	addr = my_atoi(argv[1]);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 ff8d 	bl	8002b90 <my_atoi>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(!IS_ADDR4(addr))
 8001c7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d901      	bls.n	8001c88 <ac_cb+0x34>
		return (char)(-EINVARG);
 8001c84:	23fa      	movs	r3, #250	; 0xfa
 8001c86:	e01b      	b.n	8001cc0 <ac_cb+0x6c>

	if(ADC_Config_Channel(&hadc1, addr)) // Config selected channel
 8001c88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <ac_cb+0x74>)
 8001c90:	f7fe fd6c 	bl	800076c <ADC_Config_Channel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <ac_cb+0x50>
	{
		// Config function has returned an error code
		UART_puts("Pin not configured as input mode.\n\r");	// not able to read pin value
 8001c9a:	480c      	ldr	r0, [pc, #48]	; (8001ccc <ac_cb+0x78>)
 8001c9c:	f000 ff4a 	bl	8002b34 <UART_puts>
		return (char)(-EPERM);
 8001ca0:	23f9      	movs	r3, #249	; 0xf9
 8001ca2:	e00d      	b.n	8001cc0 <ac_cb+0x6c>
	}
	
	snprintf(str, sizeof(str), "ADC Channel %d selected for sampling.\n\r", addr);
 8001ca4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ca8:	f107 0008 	add.w	r0, r7, #8
 8001cac:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <ac_cb+0x7c>)
 8001cae:	213e      	movs	r1, #62	; 0x3e
 8001cb0:	f006 fa1c 	bl	80080ec <sniprintf>
	UART_puts(str);
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 ff3b 	bl	8002b34 <UART_puts>
	
	return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3748      	adds	r7, #72	; 0x48
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	2000027c 	.word	0x2000027c
 8001ccc:	0800a634 	.word	0x0800a634
 8001cd0:	0800a658 	.word	0x0800a658

08001cd4 <fn_cb>:

@brief	 	 Enable digital filter
******************************************************************************/

char fn_cb(uint8_t argc, char** argv)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
	if(argc != 2) // number of arguments invalid?
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d001      	beq.n	8001cea <fn_cb+0x16>
		return (char)(-EINVARG);
 8001ce6:	23fa      	movs	r3, #250	; 0xfa
 8001ce8:	e075      	b.n	8001dd6 <fn_cb+0x102>
	
	if(f.status == 1)
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <fn_cb+0x10c>)
 8001cec:	7f1b      	ldrb	r3, [r3, #28]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d104      	bne.n	8001cfc <fn_cb+0x28>
	{
		UART_puts("Filter already enabled.\n\r");
 8001cf2:	483c      	ldr	r0, [pc, #240]	; (8001de4 <fn_cb+0x110>)
 8001cf4:	f000 ff1e 	bl	8002b34 <UART_puts>
		return 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e06c      	b.n	8001dd6 <fn_cb+0x102>
	}

	// select filter
	if(strcmp(argv[1], "LP") == 0)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4939      	ldr	r1, [pc, #228]	; (8001de8 <fn_cb+0x114>)
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fa9b 	bl	8000240 <strcmp>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d112      	bne.n	8001d36 <fn_cb+0x62>
	{
		// set Low Pass filter
		f.M = FIR_LP_M_;
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <fn_cb+0x10c>)
 8001d12:	225a      	movs	r2, #90	; 0x5a
 8001d14:	601a      	str	r2, [r3, #0]
		f.N = 0;
 8001d16:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <fn_cb+0x10c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
		f.dc = 0;
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <fn_cb+0x10c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
		f.x_coefs = FIR_LP_x_coefs;
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <fn_cb+0x10c>)
 8001d24:	4a31      	ldr	r2, [pc, #196]	; (8001dec <fn_cb+0x118>)
 8001d26:	615a      	str	r2, [r3, #20]
		f.y_coefs = FIR_y_coefs;
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <fn_cb+0x10c>)
 8001d2a:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <fn_cb+0x11c>)
 8001d2c:	611a      	str	r2, [r3, #16]
		UART_puts("Selected Low-Pass Filter.\n\r");
 8001d2e:	4831      	ldr	r0, [pc, #196]	; (8001df4 <fn_cb+0x120>)
 8001d30:	f000 ff00 	bl	8002b34 <UART_puts>
 8001d34:	e040      	b.n	8001db8 <fn_cb+0xe4>
	}
	else if(strcmp(argv[1], "HP") == 0)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	492e      	ldr	r1, [pc, #184]	; (8001df8 <fn_cb+0x124>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fa7e 	bl	8000240 <strcmp>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d113      	bne.n	8001d72 <fn_cb+0x9e>
	{
		// set High Pass filter
		f.M = FIR_HP_M_;
 8001d4a:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <fn_cb+0x10c>)
 8001d4c:	225a      	movs	r2, #90	; 0x5a
 8001d4e:	601a      	str	r2, [r3, #0]
		f.N = 0;
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <fn_cb+0x10c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
		f.dc = 4095/2;
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <fn_cb+0x10c>)
 8001d58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d5c:	619a      	str	r2, [r3, #24]
		f.x_coefs = FIR_HP_x_coefs;
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <fn_cb+0x10c>)
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <fn_cb+0x128>)
 8001d62:	615a      	str	r2, [r3, #20]
		f.y_coefs = FIR_y_coefs;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <fn_cb+0x10c>)
 8001d66:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <fn_cb+0x11c>)
 8001d68:	611a      	str	r2, [r3, #16]
		UART_puts("Selected High-Pass Filter.\n\r");
 8001d6a:	4825      	ldr	r0, [pc, #148]	; (8001e00 <fn_cb+0x12c>)
 8001d6c:	f000 fee2 	bl	8002b34 <UART_puts>
 8001d70:	e022      	b.n	8001db8 <fn_cb+0xe4>
	}
	else if(strcmp(argv[1], "BP") == 0)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	3304      	adds	r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4922      	ldr	r1, [pc, #136]	; (8001e04 <fn_cb+0x130>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fa60 	bl	8000240 <strcmp>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d113      	bne.n	8001dae <fn_cb+0xda>
	{
		// set Band Pass filter
		f.M = FIR_BP_M_;
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <fn_cb+0x10c>)
 8001d88:	222e      	movs	r2, #46	; 0x2e
 8001d8a:	601a      	str	r2, [r3, #0]
		f.N = 0;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <fn_cb+0x10c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	605a      	str	r2, [r3, #4]
		f.dc = 4095/2;
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <fn_cb+0x10c>)
 8001d94:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d98:	619a      	str	r2, [r3, #24]
		f.x_coefs = FIR_BP_x_coefs;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <fn_cb+0x10c>)
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <fn_cb+0x134>)
 8001d9e:	615a      	str	r2, [r3, #20]
		f.y_coefs = FIR_y_coefs;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <fn_cb+0x10c>)
 8001da2:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <fn_cb+0x11c>)
 8001da4:	611a      	str	r2, [r3, #16]
		UART_puts("Selected Band-Pass Filter.\n\r");
 8001da6:	4819      	ldr	r0, [pc, #100]	; (8001e0c <fn_cb+0x138>)
 8001da8:	f000 fec4 	bl	8002b34 <UART_puts>
 8001dac:	e004      	b.n	8001db8 <fn_cb+0xe4>
	}
	else
	{
		UART_puts("Filter not recognized.\n\r");
 8001dae:	4818      	ldr	r0, [pc, #96]	; (8001e10 <fn_cb+0x13c>)
 8001db0:	f000 fec0 	bl	8002b34 <UART_puts>
		return 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e00e      	b.n	8001dd6 <fn_cb+0x102>
	}

	// init filter
	if(filter_init(&f) == (char)(-1)) // Filter has already been initialized?
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <fn_cb+0x10c>)
 8001dba:	f7fe ff9f 	bl	8000cfc <filter_init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2bff      	cmp	r3, #255	; 0xff
 8001dc2:	d104      	bne.n	8001dce <fn_cb+0xfa>
	{
		UART_puts("Error initializing filter.\n\r");
 8001dc4:	4813      	ldr	r0, [pc, #76]	; (8001e14 <fn_cb+0x140>)
 8001dc6:	f000 feb5 	bl	8002b34 <UART_puts>
		return 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e003      	b.n	8001dd6 <fn_cb+0x102>
	}
	
	// Filter enabled
	UART_puts("Filter ON.\n\r");
 8001dce:	4812      	ldr	r0, [pc, #72]	; (8001e18 <fn_cb+0x144>)
 8001dd0:	f000 feb0 	bl	8002b34 <UART_puts>
	return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200000b8 	.word	0x200000b8
 8001de4:	0800a680 	.word	0x0800a680
 8001de8:	0800a69c 	.word	0x0800a69c
 8001dec:	0800a9dc 	.word	0x0800a9dc
 8001df0:	0800a9d8 	.word	0x0800a9d8
 8001df4:	0800a6a0 	.word	0x0800a6a0
 8001df8:	0800a6bc 	.word	0x0800a6bc
 8001dfc:	0800ab48 	.word	0x0800ab48
 8001e00:	0800a6c0 	.word	0x0800a6c0
 8001e04:	0800a6e0 	.word	0x0800a6e0
 8001e08:	0800acb4 	.word	0x0800acb4
 8001e0c:	0800a6e4 	.word	0x0800a6e4
 8001e10:	0800a704 	.word	0x0800a704
 8001e14:	0800a720 	.word	0x0800a720
 8001e18:	0800a740 	.word	0x0800a740

08001e1c <ff_cb>:

@brief	 	 Disable digital filter
******************************************************************************/

char ff_cb(uint8_t argc, char** argv)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
	if(argc != 1) // number of arguments invalid?
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d001      	beq.n	8001e32 <ff_cb+0x16>
		return (char)(-EINVARG);
 8001e2e:	23fa      	movs	r3, #250	; 0xfa
 8001e30:	e00e      	b.n	8001e50 <ff_cb+0x34>
		
	if(filter_kill(&f) == (char)(-1)) // Filter has already been disabled?
 8001e32:	4809      	ldr	r0, [pc, #36]	; (8001e58 <ff_cb+0x3c>)
 8001e34:	f7fe ffab 	bl	8000d8e <filter_kill>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2bff      	cmp	r3, #255	; 0xff
 8001e3c:	d104      	bne.n	8001e48 <ff_cb+0x2c>
	{
		UART_puts("Filter already disabled.\n\r");
 8001e3e:	4807      	ldr	r0, [pc, #28]	; (8001e5c <ff_cb+0x40>)
 8001e40:	f000 fe78 	bl	8002b34 <UART_puts>
		return 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e003      	b.n	8001e50 <ff_cb+0x34>
	}
	
	// Filter disabled
	UART_puts("Filter OFF.\n\r");
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <ff_cb+0x44>)
 8001e4a:	f000 fe73 	bl	8002b34 <UART_puts>
	return 0;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200000b8 	.word	0x200000b8
 8001e5c:	0800a750 	.word	0x0800a750
 8001e60:	0800a76c 	.word	0x0800a76c

08001e64 <start_sampling>:
@brief	 	 Begin sampling. Number of samples to be taken is optional. It can 
					 be defined by <dig>
******************************************************************************/

static void start_sampling(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	// Reset sample number
	ADC_smp_num = 1;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <start_sampling+0x1c>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	801a      	strh	r2, [r3, #0]
	// Enable ADC conversions
	HAL_ADC_Start_IT(&hadc1);
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <start_sampling+0x20>)
 8001e70:	f000 ff8e 	bl	8002d90 <HAL_ADC_Start_IT>
	// Start generating ADC conversions
	HAL_TIM_Base_Start_IT(&htim6);
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <start_sampling+0x24>)
 8001e76:	f003 ffe3 	bl	8005e40 <HAL_TIM_Base_Start_IT>
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000
 8001e84:	2000027c 	.word	0x2000027c
 8001e88:	200003c8 	.word	0x200003c8

08001e8c <stop_sampling>:

static void stop_sampling(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	// Disable ADC conversions
	HAL_ADC_Stop_IT(&hadc1);
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <stop_sampling+0x14>)
 8001e92:	f001 f855 	bl	8002f40 <HAL_ADC_Stop_IT>
	// Stop generating ADC conversions
	HAL_TIM_Base_Stop_IT(&htim6);
 8001e96:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <stop_sampling+0x18>)
 8001e98:	f004 f84a 	bl	8005f30 <HAL_TIM_Base_Stop_IT>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	2000027c 	.word	0x2000027c
 8001ea4:	200003c8 	.word	0x200003c8

08001ea8 <s_cb>:

char s_cb(uint8_t argc, char** argv)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
	char str[32];
	
	if(argc > 2) // number of arguments invalid?
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <s_cb+0x16>
		return (char)(-EINVARG);
 8001eba:	23fa      	movs	r3, #250	; 0xfa
 8001ebc:	e053      	b.n	8001f66 <s_cb+0xbe>
	
	if(Sampling_flag == 1) // sampling in progress?
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <s_cb+0xc8>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d104      	bne.n	8001ed0 <s_cb+0x28>
	{
		UART_puts("Sampling already in progress.\n\r");
 8001ec6:	482b      	ldr	r0, [pc, #172]	; (8001f74 <s_cb+0xcc>)
 8001ec8:	f000 fe34 	bl	8002b34 <UART_puts>
		return 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e04a      	b.n	8001f66 <s_cb+0xbe>
	}
	
	if(SP_cb_done == 0) // sampling period defined?
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <s_cb+0xd0>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <s_cb+0x3a>
	{
		UART_puts("Sampling period not defined.\n\r");
 8001ed8:	4828      	ldr	r0, [pc, #160]	; (8001f7c <s_cb+0xd4>)
 8001eda:	f000 fe2b 	bl	8002b34 <UART_puts>
		return (char) (-EPERM);
 8001ede:	23f9      	movs	r3, #249	; 0xf9
 8001ee0:	e041      	b.n	8001f66 <s_cb+0xbe>
	}
	
	if(argc == 1)
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d109      	bne.n	8001efc <s_cb+0x54>
	{
		// Begin infinite sampling
		UART_puts("Starting sampling...\n\r");
 8001ee8:	4825      	ldr	r0, [pc, #148]	; (8001f80 <s_cb+0xd8>)
 8001eea:	f000 fe23 	bl	8002b34 <UART_puts>

		// Start taking samples
		start_sampling();
 8001eee:	f7ff ffb9 	bl	8001e64 <start_sampling>
		// Mark that sampling is in progress
		Sampling_flag = 1;
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <s_cb+0xc8>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
		return 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e034      	b.n	8001f66 <s_cb+0xbe>
	}
	
	// Else, argument 1 defines number of samples to be taken
	smps_left = my_atoi(argv[1]);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	3304      	adds	r3, #4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fe44 	bl	8002b90 <my_atoi>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <s_cb+0xdc>)
 8001f0e:	701a      	strb	r2, [r3, #0]
	if(!IS_DIG(smps_left))
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <s_cb+0xdc>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <s_cb+0x7c>
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <s_cb+0xdc>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	d901      	bls.n	8001f28 <s_cb+0x80>
		return (char)(-EINVARG);
 8001f24:	23fa      	movs	r3, #250	; 0xfa
 8001f26:	e01e      	b.n	8001f66 <s_cb+0xbe>
	
	// Begin sampling K values
	sprintf(str, "Sampling %d values...\n\r", smps_left);
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <s_cb+0xdc>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	4914      	ldr	r1, [pc, #80]	; (8001f88 <s_cb+0xe0>)
 8001f36:	4618      	mov	r0, r3
 8001f38:	f006 f90c 	bl	8008154 <siprintf>
	UART_puts(str);
 8001f3c:	f107 0308 	add.w	r3, r7, #8
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fdf7 	bl	8002b34 <UART_puts>
	
	start_sampling(); // Start taking samples
 8001f46:	f7ff ff8d 	bl	8001e64 <start_sampling>
	while (smps_left) // Taking samples
 8001f4a:	bf00      	nop
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <s_cb+0xdc>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1fa      	bne.n	8001f4c <s_cb+0xa4>
		;
	stop_sampling(); 	// Stop taking samples
 8001f56:	f7ff ff99 	bl	8001e8c <stop_sampling>
	
	UART_puts("Sampled values:\n\r");
 8001f5a:	480c      	ldr	r0, [pc, #48]	; (8001f8c <s_cb+0xe4>)
 8001f5c:	f000 fdea 	bl	8002b34 <UART_puts>
	print_adcValues();
 8001f60:	f7fe fd48 	bl	80009f4 <print_adcValues>
	
	return 0;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3728      	adds	r7, #40	; 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200000b4 	.word	0x200000b4
 8001f74:	0800a77c 	.word	0x0800a77c
 8001f78:	200000b5 	.word	0x200000b5
 8001f7c:	0800a79c 	.word	0x0800a79c
 8001f80:	0800a7bc 	.word	0x0800a7bc
 8001f84:	20000278 	.word	0x20000278
 8001f88:	0800a7d4 	.word	0x0800a7d4
 8001f8c:	0800a7ec 	.word	0x0800a7ec

08001f90 <st_cb>:

@brief	 	 Stops sampling
******************************************************************************/

char st_cb(uint8_t argc, char** argv)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
	if(argc != 1) // number of arguments invalid?
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d001      	beq.n	8001fa6 <st_cb+0x16>
		return (char)(-EINVARG);
 8001fa2:	23fa      	movs	r3, #250	; 0xfa
 8001fa4:	e011      	b.n	8001fca <st_cb+0x3a>
	
	if(Sampling_flag == 0)// There was no sampling in progress to be terminated
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <st_cb+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d104      	bne.n	8001fb8 <st_cb+0x28>
	{
		UART_puts("No sampling in progress.\n\r");
 8001fae:	480a      	ldr	r0, [pc, #40]	; (8001fd8 <st_cb+0x48>)
 8001fb0:	f000 fdc0 	bl	8002b34 <UART_puts>
		return 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e008      	b.n	8001fca <st_cb+0x3a>
	}	
	// Stop taking samples
	stop_sampling();
 8001fb8:	f7ff ff68 	bl	8001e8c <stop_sampling>
	Sampling_flag = 0;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <st_cb+0x44>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
	
	UART_puts("Sampling stopped.\n\r");
 8001fc2:	4806      	ldr	r0, [pc, #24]	; (8001fdc <st_cb+0x4c>)
 8001fc4:	f000 fdb6 	bl	8002b34 <UART_puts>
//	UART_puts("Sampled values:\n\r");
	return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200000b4 	.word	0x200000b4
 8001fd8:	0800a800 	.word	0x0800a800
 8001fdc:	0800a81c 	.word	0x0800a81c

08001fe0 <wg_cb>:
	{"stw", wavegen_stw},
	{0,0}
};

char wg_cb(uint8_t argc, char** argv)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b092      	sub	sp, #72	; 0x48
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
	uint32_t freq;
	uint8_t retval = (char)(-EINVARG);
 8001fec:	23fa      	movs	r3, #250	; 0xfa
 8001fee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	const Signal_t *signal_ptr = signal_list;
 8001ff2:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <wg_cb+0xe0>)
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
	char str[40];
	
	if(argc > 3) // number of arguments invalid?
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d901      	bls.n	8002000 <wg_cb+0x20>
		return (char)(-EINVARG);
 8001ffc:	23fa      	movs	r3, #250	; 0xfa
 8001ffe:	e05b      	b.n	80020b8 <wg_cb+0xd8>
	
	if(argc == 2)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d114      	bne.n	8002030 <wg_cb+0x50>
	{
		// With 2 arguments, the only valid command is "WG OFF"
		if(strcmp(argv[1], "OFF") == 0)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	3304      	adds	r3, #4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	492d      	ldr	r1, [pc, #180]	; (80020c4 <wg_cb+0xe4>)
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe f916 	bl	8000240 <strcmp>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d107      	bne.n	800202a <wg_cb+0x4a>
		{
			// Stop signal output
			wavegen_stop();
 800201a:	f000 f87b 	bl	8002114 <wavegen_stop>
			UART_puts("Wave Generator OFF.\n\r");
 800201e:	482a      	ldr	r0, [pc, #168]	; (80020c8 <wg_cb+0xe8>)
 8002020:	f000 fd88 	bl	8002b34 <UART_puts>
			retval = 0; // Exit success
 8002024:	2300      	movs	r3, #0
 8002026:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		// Else, invalid argument
		return retval;
 800202a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800202e:	e043      	b.n	80020b8 <wg_cb+0xd8>
	}
	
	freq = my_atoi(argv[2]);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3308      	adds	r3, #8
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fdaa 	bl	8002b90 <my_atoi>
 800203c:	4603      	mov	r3, r0
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
	if((freq == 0) || (freq > 100))
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <wg_cb+0x6c>
 8002046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002048:	2b64      	cmp	r3, #100	; 0x64
 800204a:	d92f      	bls.n	80020ac <wg_cb+0xcc>
		return (char)(-EINVARG);
 800204c:	23fa      	movs	r3, #250	; 0xfa
 800204e:	e033      	b.n	80020b8 <wg_cb+0xd8>
	
	// check if given <signal> is valid
	while(signal_ptr->name)
	{
		if(strcmp(argv[1], signal_ptr->name) == 0)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	3304      	adds	r3, #4
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f7fe f8ef 	bl	8000240 <strcmp>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11e      	bne.n	80020a6 <wg_cb+0xc6>
		{
			wavegen_init(); // Init WaveGen peripherals
 8002068:	f000 f832 	bl	80020d0 <wavegen_init>
			signal_ptr->fn();// Generate signal
 800206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4798      	blx	r3
			wavegen_freq_update(freq); // Update signal frequency
 8002072:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002074:	f000 f85a 	bl	800212c <wavegen_freq_update>
			wavegen_start(); // Start signal output
 8002078:	f000 f838 	bl	80020ec <wavegen_start>
			snprintf(str, sizeof(str), "Generating %s wave at %ld Hz.\n\r", argv[1], freq);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	3304      	adds	r3, #4
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f107 000c 	add.w	r0, r7, #12
 8002086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <wg_cb+0xec>)
 800208e:	2128      	movs	r1, #40	; 0x28
 8002090:	f006 f82c 	bl	80080ec <sniprintf>
			UART_puts(str);
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fd4b 	bl	8002b34 <UART_puts>
			retval = 0;	// Exit success
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 80020a4:	e006      	b.n	80020b4 <wg_cb+0xd4>
		}
		signal_ptr++;
 80020a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a8:	3308      	adds	r3, #8
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
	while(signal_ptr->name)
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1cd      	bne.n	8002050 <wg_cb+0x70>
	}

	// If <signal> was not found, retval equals (-EINVARG)
	return retval;
 80020b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3740      	adds	r7, #64	; 0x40
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	0800ad7c 	.word	0x0800ad7c
 80020c4:	0800a840 	.word	0x0800a840
 80020c8:	0800a844 	.word	0x0800a844
 80020cc:	0800a85c 	.word	0x0800a85c

080020d0 <wavegen_init>:
/**
  * @brief  Inits Timer and DAC Peripherals
  * @param	none
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_init(void){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0

	MX_DAC_Init();
 80020d4:	f7fe fd48 	bl	8000b68 <MX_DAC_Init>
	MX_TIM2_Init();
 80020d8:	f000 fa4a 	bl	8002570 <MX_TIM2_Init>
	HAL_TIM_Base_Start(&htim2);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <wavegen_init+0x18>)
 80020de:	f003 fe3f 	bl	8005d60 <HAL_TIM_Base_Start>

	return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000414 	.word	0x20000414

080020ec <wavegen_start>:
  * @brief  Starts DAC CHANNEL 2 with DMA
  * The DAC update is triggered by Timer 2 overflow
  * @param	none
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_start(void){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af02      	add	r7, sp, #8

	return HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal_buff, 100, DAC_ALIGN_12B_R);
 80020f2:	2300      	movs	r3, #0
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <wavegen_start+0x20>)
 80020fa:	2110      	movs	r1, #16
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <wavegen_start+0x24>)
 80020fe:	f001 fc8b 	bl	8003a18 <HAL_DAC_Start_DMA>
 8002102:	4603      	mov	r3, r0

}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200000d8 	.word	0x200000d8
 8002110:	20000354 	.word	0x20000354

08002114 <wavegen_stop>:
  * @brief  Stops DAC CHANNEL 2
  * Timer 2 is still running...
  * @param	none
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_stop(void){
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0

	return HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 8002118:	2110      	movs	r1, #16
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <wavegen_stop+0x14>)
 800211c:	f001 fd48 	bl	8003bb0 <HAL_DAC_Stop_DMA>
 8002120:	4603      	mov	r3, r0

}
 8002122:	4618      	mov	r0, r3
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000354 	.word	0x20000354

0800212c <wavegen_freq_update>:
  * Timer 2 period, used to update one sample of the DAC output
  * Don't forget that we have n = 100 samples
  * @param	frequency in MHz (suggested values are between 1 and 100 MHz)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef wavegen_freq_update(uint32_t freq){
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

	TIMER_2_Update(1080000/freq);
 8002134:	4a05      	ldr	r2, [pc, #20]	; (800214c <wavegen_freq_update+0x20>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fad3 	bl	80026e8 <TIMER_2_Update>

	return HAL_OK;
 8002142:	2300      	movs	r3, #0

}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	00107ac0 	.word	0x00107ac0

08002150 <wavegen_sin>:
  * @brief  Calculates and generates the sample values for a sin wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_sin(void){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0

	for (int i = 0; i < 100; i++)
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	e026      	b.n	80021aa <wavegen_sin+0x5a>
		signal_buff[i] = ((sin(i*2*PI/100) + 1) * ((0xFFF)/2));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002168:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80021c0 <wavegen_sin+0x70>
 800216c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002170:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80021c8 <wavegen_sin+0x78>
 8002174:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002178:	eeb0 0b46 	vmov.f64	d0, d6
 800217c:	f007 f9b0 	bl	80094e0 <sin>
 8002180:	eeb0 7b40 	vmov.f64	d7, d0
 8002184:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002188:	ee37 7b06 	vadd.f64	d7, d7, d6
 800218c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80021d0 <wavegen_sin+0x80>
 8002190:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002194:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002198:	ee17 1a90 	vmov	r1, s15
 800219c:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <wavegen_sin+0x88>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 100; i++)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3301      	adds	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b63      	cmp	r3, #99	; 0x63
 80021ae:	ddd5      	ble.n	800215c <wavegen_sin+0xc>
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	f3af 8000 	nop.w
 80021c0:	4d12d84a 	.word	0x4d12d84a
 80021c4:	400921fb 	.word	0x400921fb
 80021c8:	00000000 	.word	0x00000000
 80021cc:	40590000 	.word	0x40590000
 80021d0:	00000000 	.word	0x00000000
 80021d4:	409ffc00 	.word	0x409ffc00
 80021d8:	200000d8 	.word	0x200000d8

080021dc <wavegen_tri>:
  * @brief  Calculates and generates the sample values for a triangle wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_tri(void){
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0

	for (int i = 0; i < 50; i++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	e00d      	b.n	8002204 <wavegen_tri+0x28>
		signal_buff[i] = i * ((0xFFF)/50);
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	00da      	lsls	r2, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	4a13      	ldr	r2, [pc, #76]	; (8002244 <wavegen_tri+0x68>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 50; i++)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3301      	adds	r3, #1
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b31      	cmp	r3, #49	; 0x31
 8002208:	ddee      	ble.n	80021e8 <wavegen_tri+0xc>

	for (int i = 50; i > 0; i--)
 800220a:	2332      	movs	r3, #50	; 0x32
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	e00f      	b.n	8002230 <wavegen_tri+0x54>
		signal_buff[100 - i] = i * ((0xFFF)/50);
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	00da      	lsls	r2, r3, #3
 800221a:	441a      	add	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002222:	4611      	mov	r1, r2
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <wavegen_tri+0x68>)
 8002226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 50; i > 0; i--)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	3b01      	subs	r3, #1
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	dcec      	bgt.n	8002210 <wavegen_tri+0x34>
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	200000d8 	.word	0x200000d8

08002248 <wavegen_sqr>:
  * @brief  Calculates and generates the sample values for a square wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_sqr(void){
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0

	for (int i = 0; i < 50; i++){
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	e00e      	b.n	8002272 <wavegen_sqr+0x2a>
		signal_buff[i] = (0xFFF);
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <wavegen_sqr+0x40>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f640 71ff 	movw	r1, #4095	; 0xfff
 800225c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		signal_buff[i + 50] = 0;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3332      	adds	r3, #50	; 0x32
 8002264:	4a08      	ldr	r2, [pc, #32]	; (8002288 <wavegen_sqr+0x40>)
 8002266:	2100      	movs	r1, #0
 8002268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 50; i++){
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3301      	adds	r3, #1
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b31      	cmp	r3, #49	; 0x31
 8002276:	dded      	ble.n	8002254 <wavegen_sqr+0xc>
	}
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	200000d8 	.word	0x200000d8

0800228c <wavegen_stw>:
  * @brief  Calculates and generates the sample values for a saw tooth wave
  * with A between 0 and VRef 0000 - FFF (0V to 3.3V)
  * @param	none
  * @retval none
  */
void wavegen_stw(void){
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0

	for (int i = 0; i < 100; i++)
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	e00c      	b.n	80022b2 <wavegen_stw+0x26>
		signal_buff[i] = i * ((0xFFF)/100);
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4619      	mov	r1, r3
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <wavegen_stw+0x3c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 100; i++)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3301      	adds	r3, #1
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b63      	cmp	r3, #99	; 0x63
 80022b6:	ddef      	ble.n	8002298 <wavegen_stw+0xc>
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	200000d8 	.word	0x200000d8

080022cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_MspInit+0x44>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_MspInit+0x44>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_MspInit+0x44>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_MspInit+0x44>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_MspInit+0x44>)
 80022f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_MspInit+0x44>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800

08002314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <NMI_Handler+0x4>

0800231a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <HardFault_Handler+0x4>

08002320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <MemManage_Handler+0x4>

08002326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <BusFault_Handler+0x4>

0800232c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <UsageFault_Handler+0x4>

08002332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002360:	f000 fcb2 	bl	8002cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <DMA1_Stream6_IRQHandler+0x10>)
 800236e:	f001 ff31 	bl	80041d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000368 	.word	0x20000368

0800237c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <ADC_IRQHandler+0x10>)
 8002382:	f000 fe1b 	bl	8002fbc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000027c 	.word	0x2000027c

08002390 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <TIM2_IRQHandler+0x10>)
 8002396:	f003 fdfa 	bl	8005f8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000414 	.word	0x20000414

080023a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <USART3_IRQHandler+0x10>)
 80023aa:	f004 fafb 	bl	80069a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000460 	.word	0x20000460

080023b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
	return 1;
 80023bc:	2301      	movs	r3, #1
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_kill>:

int _kill(int pid, int sig)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023d2:	f005 fd87 	bl	8007ee4 <__errno>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2216      	movs	r2, #22
 80023da:	601a      	str	r2, [r3, #0]
	return -1;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_exit>:

void _exit (int status)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ffe7 	bl	80023c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023fa:	e7fe      	b.n	80023fa <_exit+0x12>

080023fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e00a      	b.n	8002424 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800240e:	f3af 8000 	nop.w
 8002412:	4601      	mov	r1, r0
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	b2ca      	uxtb	r2, r1
 800241c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	dbf0      	blt.n	800240e <_read+0x12>
	}

return len;
 800242c:	687b      	ldr	r3, [r7, #4]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e009      	b.n	800245c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	60ba      	str	r2, [r7, #8]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3301      	adds	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	dbf1      	blt.n	8002448 <_write+0x12>
	}
	return len;
 8002464:	687b      	ldr	r3, [r7, #4]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <_close>:

int _close(int file)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
	return -1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002496:	605a      	str	r2, [r3, #4]
	return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_isatty>:

int _isatty(int file)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
	return 1;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
	return 0;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <_sbrk+0x5c>)
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <_sbrk+0x60>)
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024ec:	4b13      	ldr	r3, [pc, #76]	; (800253c <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <_sbrk+0x64>)
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <_sbrk+0x68>)
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	429a      	cmp	r2, r3
 8002506:	d207      	bcs.n	8002518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002508:	f005 fcec 	bl	8007ee4 <__errno>
 800250c:	4603      	mov	r3, r0
 800250e:	220c      	movs	r2, #12
 8002510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	e009      	b.n	800252c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <_sbrk+0x64>)
 8002528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800252a:	68fb      	ldr	r3, [r7, #12]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20080000 	.word	0x20080000
 8002538:	00000400 	.word	0x00000400
 800253c:	20000268 	.word	0x20000268
 8002540:	20000590 	.word	0x20000590

08002544 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <SystemInit+0x28>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	4a07      	ldr	r2, [pc, #28]	; (800256c <SystemInit+0x28>)
 8002550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <SystemInit+0x28>)
 800255a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800255e:	609a      	str	r2, [r3, #8]
#endif
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <MX_TIM2_Init+0x98>)
 8002590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002594:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <MX_TIM2_Init+0x98>)
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <MX_TIM2_Init+0x98>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000-1;
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <MX_TIM2_Init+0x98>)
 80025a4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80025a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <MX_TIM2_Init+0x98>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <MX_TIM2_Init+0x98>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025b6:	4814      	ldr	r0, [pc, #80]	; (8002608 <MX_TIM2_Init+0x98>)
 80025b8:	f003 fb7a 	bl	8005cb0 <HAL_TIM_Base_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80025c2:	f7ff fa3d 	bl	8001a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	4619      	mov	r1, r3
 80025d2:	480d      	ldr	r0, [pc, #52]	; (8002608 <MX_TIM2_Init+0x98>)
 80025d4:	f003 fdfa 	bl	80061cc <HAL_TIM_ConfigClockSource>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025de:	f7ff fa2f 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025e2:	2320      	movs	r3, #32
 80025e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	4619      	mov	r1, r3
 80025ee:	4806      	ldr	r0, [pc, #24]	; (8002608 <MX_TIM2_Init+0x98>)
 80025f0:	f004 f822 	bl	8006638 <HAL_TIMEx_MasterConfigSynchronization>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025fa:	f7ff fa21 	bl	8001a40 <Error_Handler>
  }

}
 80025fe:	bf00      	nop
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000414 	.word	0x20000414

0800260c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <MX_TIM6_Init+0x64>)
 800261e:	4a15      	ldr	r2, [pc, #84]	; (8002674 <MX_TIM6_Init+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <MX_TIM6_Init+0x64>)
 8002624:	2200      	movs	r2, #0
 8002626:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_TIM6_Init+0x64>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <MX_TIM6_Init+0x64>)
 8002630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002634:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <MX_TIM6_Init+0x64>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800263c:	480c      	ldr	r0, [pc, #48]	; (8002670 <MX_TIM6_Init+0x64>)
 800263e:	f003 fb37 	bl	8005cb0 <HAL_TIM_Base_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002648:	f7ff f9fa 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800264c:	2320      	movs	r3, #32
 800264e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	4619      	mov	r1, r3
 8002658:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_TIM6_Init+0x64>)
 800265a:	f003 ffed 	bl	8006638 <HAL_TIMEx_MasterConfigSynchronization>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002664:	f7ff f9ec 	bl	8001a40 <Error_Handler>
  }

}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200003c8 	.word	0x200003c8
 8002674:	40001000 	.word	0x40001000

08002678 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002688:	d114      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	201c      	movs	r0, #28
 80026a8:	f001 f8ef 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026ac:	201c      	movs	r0, #28
 80026ae:	f001 f908 	bl	80038c2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80026b2:	e010      	b.n	80026d6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <HAL_TIM_Base_MspInit+0x6c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10b      	bne.n	80026d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 80026c4:	f043 0310 	orr.w	r3, r3, #16
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40001000 	.word	0x40001000

080026e8 <TIMER_2_Update>:
//    	// toggle LED for heart beat
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
//    }
//}

void TIMER_2_Update(uint32_t reload){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f0:	f107 0318 	add.w	r3, r7, #24
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fe:	f107 030c 	add.w	r3, r7, #12
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]

	  htim2.Instance = TIM2;
 800270a:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <TIMER_2_Update+0x9c>)
 800270c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002710:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 1 - 1;
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <TIMER_2_Update+0x9c>)
 8002714:	2200      	movs	r2, #0
 8002716:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <TIMER_2_Update+0x9c>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = reload;
 800271e:	4a19      	ldr	r2, [pc, #100]	; (8002784 <TIMER_2_Update+0x9c>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	60d3      	str	r3, [r2, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002724:	4b17      	ldr	r3, [pc, #92]	; (8002784 <TIMER_2_Update+0x9c>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <TIMER_2_Update+0x9c>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002730:	4814      	ldr	r0, [pc, #80]	; (8002784 <TIMER_2_Update+0x9c>)
 8002732:	f003 fabd 	bl	8005cb0 <HAL_TIM_Base_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <TIMER_2_Update+0x58>
	  {
	    Error_Handler();
 800273c:	f7ff f980 	bl	8001a40 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002744:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002746:	f107 0318 	add.w	r3, r7, #24
 800274a:	4619      	mov	r1, r3
 800274c:	480d      	ldr	r0, [pc, #52]	; (8002784 <TIMER_2_Update+0x9c>)
 800274e:	f003 fd3d 	bl	80061cc <HAL_TIM_ConfigClockSource>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <TIMER_2_Update+0x74>
	  {
	    Error_Handler();
 8002758:	f7ff f972 	bl	8001a40 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800275c:	2320      	movs	r3, #32
 800275e:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002764:	f107 030c 	add.w	r3, r7, #12
 8002768:	4619      	mov	r1, r3
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <TIMER_2_Update+0x9c>)
 800276c:	f003 ff64 	bl	8006638 <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <TIMER_2_Update+0x92>
	  {
	    Error_Handler();
 8002776:	f7ff f963 	bl	8001a40 <Error_Handler>
	  }
}
 800277a:	bf00      	nop
 800277c:	3728      	adds	r7, #40	; 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000414 	.word	0x20000414

08002788 <TIMER_6_Update>:

void TIMER_6_Update(uint32_t prescaler, uint32_t period)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  htim6.Init.Prescaler = prescaler - 1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3b01      	subs	r3, #1
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <TIMER_6_Update+0x34>)
 8002798:	6053      	str	r3, [r2, #4]
  htim6.Init.Period = period - 1;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3b01      	subs	r3, #1
 800279e:	4a07      	ldr	r2, [pc, #28]	; (80027bc <TIMER_6_Update+0x34>)
 80027a0:	60d3      	str	r3, [r2, #12]
	
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <TIMER_6_Update+0x34>)
 80027a4:	f003 fa84 	bl	8005cb0 <HAL_TIM_Base_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <TIMER_6_Update+0x2a>
  {
    Error_Handler();
 80027ae:	f7ff f947 	bl	8001a40 <Error_Handler>
  }
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200003c8 	.word	0x200003c8

080027c0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <MX_USART3_UART_Init+0x58>)
 80027c6:	4a15      	ldr	r2, [pc, #84]	; (800281c <MX_USART3_UART_Init+0x5c>)
 80027c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <MX_USART3_UART_Init+0x58>)
 80027cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_USART3_UART_Init+0x58>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <MX_USART3_UART_Init+0x58>)
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_USART3_UART_Init+0x58>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_USART3_UART_Init+0x58>)
 80027e6:	220c      	movs	r2, #12
 80027e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <MX_USART3_UART_Init+0x58>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_USART3_UART_Init+0x58>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <MX_USART3_UART_Init+0x58>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_USART3_UART_Init+0x58>)
 80027fe:	2200      	movs	r2, #0
 8002800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_USART3_UART_Init+0x58>)
 8002804:	f003 ffc4 	bl	8006790 <HAL_UART_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800280e:	f7ff f917 	bl	8001a40 <Error_Handler>
  }

}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000460 	.word	0x20000460
 800281c:	40004800 	.word	0x40004800

08002820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_UART_MspInit+0x8c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d130      	bne.n	80028a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_UART_MspInit+0x90>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_UART_MspInit+0x90>)
 8002848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_UART_MspInit+0x90>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_UART_MspInit+0x90>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <HAL_UART_MspInit+0x90>)
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_UART_MspInit+0x90>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002884:	2307      	movs	r3, #7
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	4809      	ldr	r0, [pc, #36]	; (80028b4 <HAL_UART_MspInit+0x94>)
 8002890:	f001 ff0a 	bl	80046a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2100      	movs	r1, #0
 8002898:	2027      	movs	r0, #39	; 0x27
 800289a:	f000 fff6 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800289e:	2027      	movs	r0, #39	; 0x27
 80028a0:	f001 f80f 	bl	80038c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40004800 	.word	0x40004800
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020c00 	.word	0x40020c00

080028b8 <UART_Receive>:

/******************************************************************************
@brief	 	 Receives a char by UART serial port
******************************************************************************/
char UART_Receive(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	if(Rx_index == (RX_BUFF_LEN - 1)) // Is the buffer full?
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <UART_Receive+0x40>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b0f      	cmp	r3, #15
 80028c4:	d102      	bne.n	80028cc <UART_Receive+0x14>
		// Treat as 'CR'
		c = ENTER_KEY;
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <UART_Receive+0x44>)
 80028c8:	220d      	movs	r2, #13
 80028ca:	701a      	strb	r2, [r3, #0]
	
	if(c != ENTER_KEY) // Is this the end of reception?
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <UART_Receive+0x44>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b0d      	cmp	r3, #13
 80028d4:	d001      	beq.n	80028da <UART_Receive+0x22>
		Rx_UART_init(); // prepare for next character
 80028d6:	f000 f8ef 	bl	8002ab8 <Rx_UART_init>
	
	if(process_as_control() == 0) // Is the received char a control char?
 80028da:	f000 f811 	bl	8002900 <process_as_control>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <UART_Receive+0x30>
		return (char)(-1);
 80028e4:	23ff      	movs	r3, #255	; 0xff
 80028e6:	e004      	b.n	80028f2 <UART_Receive+0x3a>
	
	// Its not a special character
	process_as_data();
 80028e8:	f000 f87a 	bl	80029e0 <process_as_data>
	return c;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <UART_Receive+0x44>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000026c 	.word	0x2000026c
 80028fc:	20000564 	.word	0x20000564

08002900 <process_as_control>:
	
	{0,0}
};

static char process_as_control(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
	const Special_Key_t *s_key_ptr = s_key_list;
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <process_as_control+0x3c>)
 8002908:	607b      	str	r3, [r7, #4]
	
	while(s_key_ptr->code)
 800290a:	e00e      	b.n	800292a <process_as_control+0x2a>
	{
		if(c == (s_key_ptr->code))// Is this a control char?
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <process_as_control+0x40>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	429a      	cmp	r2, r3
 8002918:	d104      	bne.n	8002924 <process_as_control+0x24>
		{
			// Execute this control char callback
			s_key_ptr->fn();	
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4798      	blx	r3
			return 0; // processed as control
 8002920:	2300      	movs	r3, #0
 8002922:	e007      	b.n	8002934 <process_as_control+0x34>
		}
		s_key_ptr++;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3308      	adds	r3, #8
 8002928:	607b      	str	r3, [r7, #4]
	while(s_key_ptr->code)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1ec      	bne.n	800290c <process_as_control+0xc>
	}

	// Its not a control char. Needs to be processed as data
	return (char)(-1);
 8002932:	23ff      	movs	r3, #255	; 0xff
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	0800adbc 	.word	0x0800adbc
 8002940:	20000564 	.word	0x20000564

08002944 <enter_key_cb>:

static void enter_key_cb(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	UART_puts("\n\r");
 8002948:	4808      	ldr	r0, [pc, #32]	; (800296c <enter_key_cb+0x28>)
 800294a:	f000 f8f3 	bl	8002b34 <UART_puts>
	Rx_Buffer[Rx_index] = 0;	// mark end of string
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <enter_key_cb+0x2c>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <enter_key_cb+0x30>)
 8002958:	2100      	movs	r1, #0
 800295a:	5499      	strb	r1, [r3, r2]
	Rx_index = 0;
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <enter_key_cb+0x2c>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
	cmd_received = 1;					// informs main a command was received
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <enter_key_cb+0x34>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}
 800296c:	0800a87c 	.word	0x0800a87c
 8002970:	2000026c 	.word	0x2000026c
 8002974:	20000568 	.word	0x20000568
 8002978:	2000026e 	.word	0x2000026e

0800297c <bcksp_key_cb>:

static void bcksp_key_cb(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
	if(Rx_index > 0) // Is there characters left to delete?
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <bcksp_key_cb+0x34>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <bcksp_key_cb+0x1e>
		Rx_index--;
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <bcksp_key_cb+0x34>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b2da      	uxtb	r2, r3
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <bcksp_key_cb+0x34>)
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e002      	b.n	80029a0 <bcksp_key_cb+0x24>
		// c is equal to BCKSP_KEY
	else
		// Nothing to delete
		c = 0; // Print nothing
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <bcksp_key_cb+0x38>)
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
	UART_putchar(c);
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <bcksp_key_cb+0x38>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f8aa 	bl	8002b00 <UART_putchar>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	2000026c 	.word	0x2000026c
 80029b4:	20000564 	.word	0x20000564

080029b8 <esc_key_cb>:

static void esc_key_cb(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	clear_last_cmd();
 80029bc:	f000 f82e 	bl	8002a1c <clear_last_cmd>
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <dollar_key_cb>:

static void dollar_key_cb(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
	clear_last_cmd();
 80029c8:	f000 f828 	bl	8002a1c <clear_last_cmd>
	UART_puts(last_valid_cmd); // print last valid command
 80029cc:	4803      	ldr	r0, [pc, #12]	; (80029dc <dollar_key_cb+0x18>)
 80029ce:	f000 f8b1 	bl	8002b34 <UART_puts>
	insert_cmd(last_valid_cmd); // fill Rx_Buffer with last valid command
 80029d2:	4802      	ldr	r0, [pc, #8]	; (80029dc <dollar_key_cb+0x18>)
 80029d4:	f000 f846 	bl	8002a64 <insert_cmd>
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200000a4 	.word	0x200000a4

080029e0 <process_as_data>:

@brief	 	 process the char received as a data character
******************************************************************************/

static void process_as_data(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
	// add received char to Rx_Buffer
	Rx_Buffer[Rx_index] = c;
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <process_as_data+0x30>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <process_as_data+0x34>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b2d9      	uxtb	r1, r3
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <process_as_data+0x38>)
 80029f4:	5499      	strb	r1, [r3, r2]
	Rx_index++;
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <process_as_data+0x30>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <process_as_data+0x30>)
 8002a02:	701a      	strb	r2, [r3, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000026c 	.word	0x2000026c
 8002a14:	20000564 	.word	0x20000564
 8002a18:	20000568 	.word	0x20000568

08002a1c <clear_last_cmd>:

/******************************************************************************
@brief	 	 send backspaces via terminal to clear the command line
******************************************************************************/
static void clear_last_cmd(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
	if(Rx_index == 0) // empty buffer
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <clear_last_cmd+0x40>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d015      	beq.n	8002a56 <clear_last_cmd+0x3a>
		return;
	
	// fill Rx_Buffer with 'BCKSP_KEY'
	memset(Rx_Buffer, BCKSP_KEY, Rx_index);
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <clear_last_cmd+0x40>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	217f      	movs	r1, #127	; 0x7f
 8002a34:	480a      	ldr	r0, [pc, #40]	; (8002a60 <clear_last_cmd+0x44>)
 8002a36:	f005 fa8f 	bl	8007f58 <memset>
	Rx_Buffer[Rx_index] = 0; 	// mark end of string
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <clear_last_cmd+0x40>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <clear_last_cmd+0x44>)
 8002a44:	2100      	movs	r1, #0
 8002a46:	5499      	strb	r1, [r3, r2]
	Rx_index = 0;
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <clear_last_cmd+0x40>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
	
	UART_puts(Rx_Buffer); // print it -> this will clear the command line 
 8002a4e:	4804      	ldr	r0, [pc, #16]	; (8002a60 <clear_last_cmd+0x44>)
 8002a50:	f000 f870 	bl	8002b34 <UART_puts>
 8002a54:	e000      	b.n	8002a58 <clear_last_cmd+0x3c>
		return;
 8002a56:	bf00      	nop
}
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000026c 	.word	0x2000026c
 8002a60:	20000568 	.word	0x20000568

08002a64 <insert_cmd>:
@brief	 	 Assigns 'Rx_Buffer' with string 'str', making 'Rx_index' point to
							the end of 'Rx_Buffer'
@param  	 String to be inserted in 'Rx_Buffer'
******************************************************************************/
static void insert_cmd(const char* str)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	if((str == NULL) || (str[0] == 0))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d017      	beq.n	8002aa2 <insert_cmd+0x3e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d013      	beq.n	8002aa2 <insert_cmd+0x3e>
		return;
	
	int len = strlen(str);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd fbea 	bl	8000254 <strlen>
 8002a80:	4603      	mov	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]
	if(len > RX_BUFF_LEN)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	dc0d      	bgt.n	8002aa6 <insert_cmd+0x42>
		return;
	
	strcpy(Rx_Buffer, str);
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4808      	ldr	r0, [pc, #32]	; (8002ab0 <insert_cmd+0x4c>)
 8002a8e:	f005 fb81 	bl	8008194 <strcpy>
	Rx_index = strlen(str);	// 'Rx_index' point to the last 'Rx_Buffer' position
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fd fbde 	bl	8000254 <strlen>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <insert_cmd+0x50>)
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e002      	b.n	8002aa8 <insert_cmd+0x44>
		return;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <insert_cmd+0x44>
		return;
 8002aa6:	bf00      	nop
}
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000568 	.word	0x20000568
 8002ab4:	2000026c 	.word	0x2000026c

08002ab8 <Rx_UART_init>:

// set the interrupt for UART3 Rx
void Rx_UART_init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&c, 1);
 8002abc:	2201      	movs	r2, #1
 8002abe:	4903      	ldr	r1, [pc, #12]	; (8002acc <Rx_UART_init+0x14>)
 8002ac0:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <Rx_UART_init+0x18>)
 8002ac2:	f003 ff21 	bl	8006908 <HAL_UART_Receive_IT>
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000564 	.word	0x20000564
 8002ad0:	20000460 	.word	0x20000460

08002ad4 <HAL_UART_RxCpltCallback>:

//implementation of UART ISR
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) //current UART?
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <HAL_UART_RxCpltCallback+0x24>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d102      	bne.n	8002aec <HAL_UART_RxCpltCallback+0x18>
		Rx_flag = 1;
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_UART_RxCpltCallback+0x28>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40004800 	.word	0x40004800
 8002afc:	2000026d 	.word	0x2000026d

08002b00 <UART_putchar>:
@brief	 	 Sends a char by UART - Polling (Waits for UART_Tx to transmitt 
							queued data
@param  	 Char to be transmitted
******************************************************************************/
void UART_putchar(char ch)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
	while(huart3.gState == HAL_UART_STATE_BUSY_TX) // Waits for UART_Tx to transmitt queued data
 8002b0a:	bf00      	nop
 8002b0c:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <UART_putchar+0x2c>)
 8002b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b10:	2b21      	cmp	r3, #33	; 0x21
 8002b12:	d0fb      	beq.n	8002b0c <UART_putchar+0xc>
		;
	
	c = ch; // 'ch' cannot be used to transmitt since its local to this function. Content may be lost
 8002b14:	4a06      	ldr	r2, [pc, #24]	; (8002b30 <UART_putchar+0x30>)
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)&c, 1);
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4904      	ldr	r1, [pc, #16]	; (8002b30 <UART_putchar+0x30>)
 8002b1e:	4803      	ldr	r0, [pc, #12]	; (8002b2c <UART_putchar+0x2c>)
 8002b20:	f003 fe84 	bl	800682c <HAL_UART_Transmit_IT>
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000460 	.word	0x20000460
 8002b30:	20000564 	.word	0x20000564

08002b34 <UART_puts>:
@brief	 	 Sends a string by UART - Polling (Waits for UART_Tx to transmitt 
							queued data
@param  	 String to be transmitted
******************************************************************************/
void UART_puts(const char *s)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	if((s == NULL) || (s[0] == 0))	// string empty?
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01c      	beq.n	8002b7c <UART_puts+0x48>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d018      	beq.n	8002b7c <UART_puts+0x48>
		return;
	
	int len = strlen(s);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fd fb82 	bl	8000254 <strlen>
 8002b50:	4603      	mov	r3, r0
 8002b52:	60fb      	str	r3, [r7, #12]
	if(len > TX_BUFF_LEN)		// string size bigger than the max size of Tx_Buffer?
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	dc12      	bgt.n	8002b80 <UART_puts+0x4c>
		return;

	while(huart3.gState == HAL_UART_STATE_BUSY_TX) // Waits for UART_Tx to transmitt queued data
 8002b5a:	bf00      	nop
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <UART_puts+0x54>)
 8002b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b60:	2b21      	cmp	r3, #33	; 0x21
 8002b62:	d0fb      	beq.n	8002b5c <UART_puts+0x28>
		;
	
	strcpy(Tx_Buffer, s);	// send string 'str' to 'TX_Buffer'
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4809      	ldr	r0, [pc, #36]	; (8002b8c <UART_puts+0x58>)
 8002b68:	f005 fb14 	bl	8008194 <strcpy>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)Tx_Buffer, len);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	4906      	ldr	r1, [pc, #24]	; (8002b8c <UART_puts+0x58>)
 8002b74:	4804      	ldr	r0, [pc, #16]	; (8002b88 <UART_puts+0x54>)
 8002b76:	f003 fe59 	bl	800682c <HAL_UART_Transmit_IT>
 8002b7a:	e002      	b.n	8002b82 <UART_puts+0x4e>
		return;
 8002b7c:	bf00      	nop
 8002b7e:	e000      	b.n	8002b82 <UART_puts+0x4e>
		return;
 8002b80:	bf00      	nop
}
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000460 	.word	0x20000460
 8002b8c:	200004e4 	.word	0x200004e4

08002b90 <my_atoi>:
@param  String 'str' to be converted

@retval Int value of string converted
******************************************************************************/
int my_atoi(const char *str)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]

	while(str[i]) // end of array
 8002b9c:	e01d      	b.n	8002bda <my_atoi+0x4a>
	{
		if(((str[i] < 0x30) || (str[i] > 0x41)) && ((str[i] < 0x41) || (str[i] > 0x46))) // 0x30 ('0'); 0x41 ('9'); 0x41 ('A'); 0x46 ('F');
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b2f      	cmp	r3, #47	; 0x2f
 8002ba8:	d905      	bls.n	8002bb6 <my_atoi+0x26>
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b41      	cmp	r3, #65	; 0x41
 8002bb4:	d90e      	bls.n	8002bd4 <my_atoi+0x44>
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d905      	bls.n	8002bce <my_atoi+0x3e>
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b46      	cmp	r3, #70	; 0x46
 8002bcc:	d902      	bls.n	8002bd4 <my_atoi+0x44>
			return -1;		// invalid
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	e00f      	b.n	8002bf4 <my_atoi+0x64>
		i++;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
	while(str[i]) // end of array
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1db      	bne.n	8002b9e <my_atoi+0xe>
	}
	return (int)strtol(str, NULL, 16); // convert string str (representing a hexadecimal value) into an integer number - 16 (hexadecimal)
 8002be6:	2210      	movs	r2, #16
 8002be8:	2100      	movs	r1, #0
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f005 fbba 	bl	8008364 <strtol>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	bf00      	nop
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c00:	480d      	ldr	r0, [pc, #52]	; (8002c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c02:	490e      	ldr	r1, [pc, #56]	; (8002c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c08:	e002      	b.n	8002c10 <LoopCopyDataInit>

08002c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0e:	3304      	adds	r3, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c14:	d3f9      	bcc.n	8002c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c16:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c18:	4c0b      	ldr	r4, [pc, #44]	; (8002c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c1c:	e001      	b.n	8002c22 <LoopFillZerobss>

08002c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c20:	3204      	adds	r2, #4

08002c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c24:	d3fb      	bcc.n	8002c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c26:	f7ff fc8d 	bl	8002544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2a:	f005 f961 	bl	8007ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2e:	f7fe fe29 	bl	8001884 <main>
  bx  lr    
 8002c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c34:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c3c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002c40:	0800b220 	.word	0x0800b220
  ldr r2, =_sbss
 8002c44:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002c48:	2000058c 	.word	0x2000058c

08002c4c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <CAN1_RX0_IRQHandler>

08002c4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c52:	2003      	movs	r0, #3
 8002c54:	f000 fe0e 	bl	8003874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f000 f805 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c5e:	f7ff fb35 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x54>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_InitTick+0x58>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fe29 	bl	80038de <HAL_SYSTICK_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00e      	b.n	8002cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d80a      	bhi.n	8002cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f000 fdf1 	bl	800388a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <HAL_InitTick+0x5c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000010 	.word	0x20000010
 8002cc0:	20000018 	.word	0x20000018
 8002cc4:	20000014 	.word	0x20000014

08002cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_IncTick+0x24>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_IncTick+0x24>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000018 	.word	0x20000018
 8002cec:	20000578 	.word	0x20000578

08002cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_GetTick+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000578 	.word	0x20000578

08002d08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e031      	b.n	8002d82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fd fcc0 	bl	80006ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d116      	bne.n	8002d74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_ADC_Init+0x84>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	f043 0202 	orr.w	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fbb8 	bl	80034cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f023 0303 	bic.w	r3, r3, #3
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
 8002d72:	e001      	b.n	8002d78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	ffffeefd 	.word	0xffffeefd

08002d90 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_Start_IT+0x1a>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e0b5      	b.n	8002f16 <HAL_ADC_Start_IT+0x186>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d018      	beq.n	8002df2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002dd0:	4b54      	ldr	r3, [pc, #336]	; (8002f24 <HAL_ADC_Start_IT+0x194>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a54      	ldr	r2, [pc, #336]	; (8002f28 <HAL_ADC_Start_IT+0x198>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0c9a      	lsrs	r2, r3, #18
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002de4:	e002      	b.n	8002dec <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f9      	bne.n	8002de6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d17d      	bne.n	8002efc <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e04:	4b49      	ldr	r3, [pc, #292]	; (8002f2c <HAL_ADC_Start_IT+0x19c>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d106      	bne.n	8002e4a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	f023 0206 	bic.w	r2, r3, #6
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
 8002e48:	e002      	b.n	8002e50 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e60:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <HAL_ADC_Start_IT+0x1a0>)
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_ADC_Start_IT+0x1a4>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10f      	bne.n	8002e9e <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d143      	bne.n	8002f14 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	e03a      	b.n	8002f14 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <HAL_ADC_Start_IT+0x1a8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d10e      	bne.n	8002ec6 <HAL_ADC_Start_IT+0x136>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ec4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <HAL_ADC_Start_IT+0x1a4>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d120      	bne.n	8002f14 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_ADC_Start_IT+0x1ac>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d11b      	bne.n	8002f14 <HAL_ADC_Start_IT+0x184>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d114      	bne.n	8002f14 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	e00b      	b.n	8002f14 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f043 0210 	orr.w	r2, r3, #16
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000010 	.word	0x20000010
 8002f28:	431bde83 	.word	0x431bde83
 8002f2c:	fffff8fe 	.word	0xfffff8fe
 8002f30:	04000020 	.word	0x04000020
 8002f34:	40012300 	.word	0x40012300
 8002f38:	40012000 	.word	0x40012000
 8002f3c:	40012200 	.word	0x40012200

08002f40 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_Stop_IT+0x16>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e027      	b.n	8002fa6 <HAL_ADC_Stop_IT+0x66>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10f      	bne.n	8002f9c <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_ADC_Stop_IT+0x74>)
 8002f88:	400b      	ands	r3, r1
 8002f8a:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_ADC_Stop_IT+0x78>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	f043 0201 	orr.w	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	fbffffdf 	.word	0xfbffffdf
 8002fb8:	ffffeefe 	.word	0xffffeefe

08002fbc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d049      	beq.n	8003086 <HAL_ADC_IRQHandler+0xca>
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d046      	beq.n	8003086 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d12b      	bne.n	8003076 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003022:	2b00      	cmp	r3, #0
 8003024:	d127      	bne.n	8003076 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800303e:	2b00      	cmp	r3, #0
 8003040:	d119      	bne.n	8003076 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0220 	bic.w	r2, r2, #32
 8003050:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd fc16 	bl	80008a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0212 	mvn.w	r2, #18
 8003084:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d057      	beq.n	800314c <HAL_ADC_IRQHandler+0x190>
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d054      	beq.n	800314c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d139      	bne.n	800313c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d12b      	bne.n	800313c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d124      	bne.n	800313c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d11d      	bne.n	800313c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003104:	2b00      	cmp	r3, #0
 8003106:	d119      	bne.n	800313c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003116:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fabf 	bl	80036c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f06f 020c 	mvn.w	r2, #12
 800314a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d017      	beq.n	8003192 <HAL_ADC_IRQHandler+0x1d6>
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d014      	beq.n	8003192 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d10d      	bne.n	8003192 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f837 	bl	80031f6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0201 	mvn.w	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031a0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_ADC_IRQHandler+0x218>
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d012      	beq.n	80031d4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f043 0202 	orr.w	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0220 	mvn.w	r2, #32
 80031c2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f820 	bl	800320a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f06f 0220 	mvn.w	r2, #32
 80031d2:	601a      	str	r2, [r3, #0]
  }
}
 80031d4:	bf00      	nop
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1c>
 8003238:	2302      	movs	r3, #2
 800323a:	e136      	b.n	80034aa <HAL_ADC_ConfigChannel+0x28a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b09      	cmp	r3, #9
 800324a:	d93a      	bls.n	80032c2 <HAL_ADC_ConfigChannel+0xa2>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003254:	d035      	beq.n	80032c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68d9      	ldr	r1, [r3, #12]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	4613      	mov	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4413      	add	r3, r2
 800326a:	3b1e      	subs	r3, #30
 800326c:	2207      	movs	r2, #7
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	400a      	ands	r2, r1
 800327a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a8d      	ldr	r2, [pc, #564]	; (80034b8 <HAL_ADC_ConfigChannel+0x298>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10a      	bne.n	800329c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68d9      	ldr	r1, [r3, #12]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	061a      	lsls	r2, r3, #24
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800329a:	e035      	b.n	8003308 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68d9      	ldr	r1, [r3, #12]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	4618      	mov	r0, r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4403      	add	r3, r0
 80032b4:	3b1e      	subs	r3, #30
 80032b6:	409a      	lsls	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032c0:	e022      	b.n	8003308 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6919      	ldr	r1, [r3, #16]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	2207      	movs	r2, #7
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43da      	mvns	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	400a      	ands	r2, r1
 80032e4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6919      	ldr	r1, [r3, #16]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	4618      	mov	r0, r3
 80032f8:	4603      	mov	r3, r0
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4403      	add	r3, r0
 80032fe:	409a      	lsls	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b06      	cmp	r3, #6
 800330e:	d824      	bhi.n	800335a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	3b05      	subs	r3, #5
 8003322:	221f      	movs	r2, #31
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43da      	mvns	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	400a      	ands	r2, r1
 8003330:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	4618      	mov	r0, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	3b05      	subs	r3, #5
 800334c:	fa00 f203 	lsl.w	r2, r0, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
 8003358:	e04c      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d824      	bhi.n	80033ac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b23      	subs	r3, #35	; 0x23
 8003374:	221f      	movs	r2, #31
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	400a      	ands	r2, r1
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	3b23      	subs	r3, #35	; 0x23
 800339e:	fa00 f203 	lsl.w	r2, r0, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
 80033aa:	e023      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	3b41      	subs	r3, #65	; 0x41
 80033be:	221f      	movs	r2, #31
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43da      	mvns	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	400a      	ands	r2, r1
 80033cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	4618      	mov	r0, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b41      	subs	r3, #65	; 0x41
 80033e8:	fa00 f203 	lsl.w	r2, r0, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a30      	ldr	r2, [pc, #192]	; (80034bc <HAL_ADC_ConfigChannel+0x29c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10a      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1f4>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003406:	d105      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800340e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003412:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a28      	ldr	r2, [pc, #160]	; (80034bc <HAL_ADC_ConfigChannel+0x29c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10f      	bne.n	800343e <HAL_ADC_ConfigChannel+0x21e>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b12      	cmp	r3, #18
 8003424:	d10b      	bne.n	800343e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003426:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4a25      	ldr	r2, [pc, #148]	; (80034c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800342c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003430:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800343c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_ADC_ConfigChannel+0x29c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d12b      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x280>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1a      	ldr	r2, [pc, #104]	; (80034b8 <HAL_ADC_ConfigChannel+0x298>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <HAL_ADC_ConfigChannel+0x23a>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b11      	cmp	r3, #17
 8003458:	d122      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800345a:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003460:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003464:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800346c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003470:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <HAL_ADC_ConfigChannel+0x298>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d111      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800347c:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_ADC_ConfigChannel+0x2a4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	0c9a      	lsrs	r2, r3, #18
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003492:	e002      	b.n	800349a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3b01      	subs	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f9      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	10000012 	.word	0x10000012
 80034bc:	40012000 	.word	0x40012000
 80034c0:	40012300 	.word	0x40012300
 80034c4:	20000010 	.word	0x20000010
 80034c8:	431bde83 	.word	0x431bde83

080034cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80034d4:	4b78      	ldr	r3, [pc, #480]	; (80036b8 <ADC_Init+0x1ec>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4a77      	ldr	r2, [pc, #476]	; (80036b8 <ADC_Init+0x1ec>)
 80034da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80034de:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80034e0:	4b75      	ldr	r3, [pc, #468]	; (80036b8 <ADC_Init+0x1ec>)
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4973      	ldr	r1, [pc, #460]	; (80036b8 <ADC_Init+0x1ec>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	021a      	lsls	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6899      	ldr	r1, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	4a58      	ldr	r2, [pc, #352]	; (80036bc <ADC_Init+0x1f0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800356e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6899      	ldr	r1, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6899      	ldr	r1, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	e00f      	b.n	80035c6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0202 	bic.w	r2, r2, #2
 80035d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6899      	ldr	r1, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	005a      	lsls	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003602:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003612:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	3b01      	subs	r3, #1
 8003620:	035a      	lsls	r2, r3, #13
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	e007      	b.n	800363c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	3b01      	subs	r3, #1
 8003658:	051a      	lsls	r2, r3, #20
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6899      	ldr	r1, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800367e:	025a      	lsls	r2, r3, #9
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	029a      	lsls	r2, r3, #10
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40012300 	.word	0x40012300
 80036bc:	0f000001 	.word	0x0f000001

080036c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <__NVIC_SetPriorityGrouping+0x40>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003702:	4a04      	ldr	r2, [pc, #16]	; (8003714 <__NVIC_SetPriorityGrouping+0x40>)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	60d3      	str	r3, [r2, #12]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000ed00 	.word	0xe000ed00
 8003718:	05fa0000 	.word	0x05fa0000

0800371c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <__NVIC_GetPriorityGrouping+0x18>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	f003 0307 	and.w	r3, r3, #7
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db0b      	blt.n	8003762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4907      	ldr	r1, [pc, #28]	; (8003770 <__NVIC_EnableIRQ+0x38>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2001      	movs	r0, #1
 800375a:	fa00 f202 	lsl.w	r2, r0, r2
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000e100 	.word	0xe000e100

08003774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003784:	2b00      	cmp	r3, #0
 8003786:	db0a      	blt.n	800379e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	490c      	ldr	r1, [pc, #48]	; (80037c0 <__NVIC_SetPriority+0x4c>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	0112      	lsls	r2, r2, #4
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	440b      	add	r3, r1
 8003798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800379c:	e00a      	b.n	80037b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4908      	ldr	r1, [pc, #32]	; (80037c4 <__NVIC_SetPriority+0x50>)
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	3b04      	subs	r3, #4
 80037ac:	0112      	lsls	r2, r2, #4
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	440b      	add	r3, r1
 80037b2:	761a      	strb	r2, [r3, #24]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000e100 	.word	0xe000e100
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b089      	sub	sp, #36	; 0x24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f1c3 0307 	rsb	r3, r3, #7
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	bf28      	it	cs
 80037e6:	2304      	movcs	r3, #4
 80037e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3304      	adds	r3, #4
 80037ee:	2b06      	cmp	r3, #6
 80037f0:	d902      	bls.n	80037f8 <NVIC_EncodePriority+0x30>
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3b03      	subs	r3, #3
 80037f6:	e000      	b.n	80037fa <NVIC_EncodePriority+0x32>
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43da      	mvns	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	401a      	ands	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003810:	f04f 31ff 	mov.w	r1, #4294967295
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fa01 f303 	lsl.w	r3, r1, r3
 800381a:	43d9      	mvns	r1, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	4313      	orrs	r3, r2
         );
}
 8003822:	4618      	mov	r0, r3
 8003824:	3724      	adds	r7, #36	; 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003840:	d301      	bcc.n	8003846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003842:	2301      	movs	r3, #1
 8003844:	e00f      	b.n	8003866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <SysTick_Config+0x40>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800384e:	210f      	movs	r1, #15
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	f7ff ff8e 	bl	8003774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <SysTick_Config+0x40>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <SysTick_Config+0x40>)
 8003860:	2207      	movs	r2, #7
 8003862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	e000e010 	.word	0xe000e010

08003874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff29 	bl	80036d4 <__NVIC_SetPriorityGrouping>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	4603      	mov	r3, r0
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800389c:	f7ff ff3e 	bl	800371c <__NVIC_GetPriorityGrouping>
 80038a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	6978      	ldr	r0, [r7, #20]
 80038a8:	f7ff ff8e 	bl	80037c8 <NVIC_EncodePriority>
 80038ac:	4602      	mov	r2, r0
 80038ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ff5d 	bl	8003774 <__NVIC_SetPriority>
}
 80038ba:	bf00      	nop
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	4603      	mov	r3, r0
 80038ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff31 	bl	8003738 <__NVIC_EnableIRQ>
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ffa2 	bl	8003830 <SysTick_Config>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e014      	b.n	8003932 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	791b      	ldrb	r3, [r3, #4]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d105      	bne.n	800391e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7fd f95b 	bl	8000bd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	795b      	ldrb	r3, [r3, #5]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_DAC_Start+0x16>
 800394c:	2302      	movs	r3, #2
 800394e:	e040      	b.n	80039d2 <HAL_DAC_Start+0x98>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2201      	movs	r2, #1
 800396a:	409a      	lsls	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003984:	2b3c      	cmp	r3, #60	; 0x3c
 8003986:	d11d      	bne.n	80039c4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	e014      	b.n	80039c4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	213c      	movs	r1, #60	; 0x3c
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d107      	bne.n	80039c4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0202 	orr.w	r2, r2, #2
 80039c2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2201      	movs	r2, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	400a      	ands	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	795b      	ldrb	r3, [r3, #5]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_DAC_Start_DMA+0x1e>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e0ab      	b.n	8003b8e <HAL_DAC_Start_DMA+0x176>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d12f      	bne.n	8003aa8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_DAC_Start_DMA+0x180>)
 8003a4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a51      	ldr	r2, [pc, #324]	; (8003b9c <HAL_DAC_Start_DMA+0x184>)
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a50      	ldr	r2, [pc, #320]	; (8003ba0 <HAL_DAC_Start_DMA+0x188>)
 8003a5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a6e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d013      	beq.n	8003a9e <HAL_DAC_Start_DMA+0x86>
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d845      	bhi.n	8003b08 <HAL_DAC_Start_DMA+0xf0>
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_DAC_Start_DMA+0x72>
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d005      	beq.n	8003a94 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003a88:	e03e      	b.n	8003b08 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	613b      	str	r3, [r7, #16]
        break;
 8003a92:	e03c      	b.n	8003b0e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	613b      	str	r3, [r7, #16]
        break;
 8003a9c:	e037      	b.n	8003b0e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3310      	adds	r3, #16
 8003aa4:	613b      	str	r3, [r7, #16]
        break;
 8003aa6:	e032      	b.n	8003b0e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a3d      	ldr	r2, [pc, #244]	; (8003ba4 <HAL_DAC_Start_DMA+0x18c>)
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a3c      	ldr	r2, [pc, #240]	; (8003ba8 <HAL_DAC_Start_DMA+0x190>)
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a3b      	ldr	r2, [pc, #236]	; (8003bac <HAL_DAC_Start_DMA+0x194>)
 8003abe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ace:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d013      	beq.n	8003afe <HAL_DAC_Start_DMA+0xe6>
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d817      	bhi.n	8003b0c <HAL_DAC_Start_DMA+0xf4>
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_DAC_Start_DMA+0xd2>
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d005      	beq.n	8003af4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003ae8:	e010      	b.n	8003b0c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3314      	adds	r3, #20
 8003af0:	613b      	str	r3, [r7, #16]
        break;
 8003af2:	e00c      	b.n	8003b0e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3318      	adds	r3, #24
 8003afa:	613b      	str	r3, [r7, #16]
        break;
 8003afc:	e007      	b.n	8003b0e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	331c      	adds	r3, #28
 8003b04:	613b      	str	r3, [r7, #16]
        break;
 8003b06:	e002      	b.n	8003b0e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003b0c:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d111      	bne.n	8003b38 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6898      	ldr	r0, [r3, #8]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	f000 fa5f 	bl	8003ff0 <HAL_DMA_Start_IT>
 8003b32:	4603      	mov	r3, r0
 8003b34:	75fb      	strb	r3, [r7, #23]
 8003b36:	e010      	b.n	8003b5a <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003b46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68d8      	ldr	r0, [r3, #12]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	f000 fa4d 	bl	8003ff0 <HAL_DMA_Start_IT>
 8003b56:	4603      	mov	r3, r0
 8003b58:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10c      	bne.n	8003b80 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2201      	movs	r2, #1
 8003b74:	409a      	lsls	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e005      	b.n	8003b8c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f043 0204 	orr.w	r2, r3, #4
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	08003d7f 	.word	0x08003d7f
 8003b9c:	08003da1 	.word	0x08003da1
 8003ba0:	08003dbd 	.word	0x08003dbd
 8003ba4:	08003e27 	.word	0x08003e27
 8003ba8:	08003e49 	.word	0x08003e49
 8003bac:	08003e65 	.word	0x08003e65

08003bb0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6819      	ldr	r1, [r3, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2201      	movs	r2, #1
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43da      	mvns	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fa56 	bl	80040b0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e00c      	b.n	8003c30 <HAL_DAC_Stop_DMA+0x80>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fa48 	bl	80040b0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003c2e:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d105      	bne.n	8003c6a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	3308      	adds	r3, #8
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e004      	b.n	8003c74 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	3314      	adds	r3, #20
 8003c72:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	461a      	mov	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b087      	sub	sp, #28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	795b      	ldrb	r3, [r3, #5]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_DAC_ConfigChannel+0x18>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e03c      	b.n	8003d58 <HAL_DAC_ConfigChannel+0x92>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4013      	ands	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	22c0      	movs	r2, #192	; 0xc0
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43da      	mvns	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	400a      	ands	r2, r1
 8003d48:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	791b      	ldrb	r3, [r3, #4]
 8003d70:	b2db      	uxtb	r3, r3
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f7ff ff7c 	bl	8003c8a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	711a      	strb	r2, [r3, #4]
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff ff75 	bl	8003c9e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f043 0204 	orr.w	r2, r3, #4
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff ff6b 	bl	8003cb2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	711a      	strb	r2, [r3, #4]
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff ffd8 	bl	8003dea <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	711a      	strb	r2, [r3, #4]
}
 8003e40:	bf00      	nop
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7ff ffd1 	bl	8003dfe <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f043 0204 	orr.w	r2, r3, #4
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff ffc7 	bl	8003e12 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	711a      	strb	r2, [r3, #4]
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ea0:	f7fe ff26 	bl	8002cf0 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e099      	b.n	8003fe4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed0:	e00f      	b.n	8003ef2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ed2:	f7fe ff0d 	bl	8002cf0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	d908      	bls.n	8003ef2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2203      	movs	r2, #3
 8003eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e078      	b.n	8003fe4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e8      	bne.n	8003ed2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4b38      	ldr	r3, [pc, #224]	; (8003fec <HAL_DMA_Init+0x158>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d107      	bne.n	8003f5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	4313      	orrs	r3, r2
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d117      	bne.n	8003fb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fb09 	bl	80045b0 <DMA_CheckFifoParam>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2240      	movs	r2, #64	; 0x40
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e016      	b.n	8003fe4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fac0 	bl	8004544 <DMA_CalcBaseAndBitshift>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	223f      	movs	r2, #63	; 0x3f
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	e010803f 	.word	0xe010803f

08003ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_DMA_Start_IT+0x26>
 8004012:	2302      	movs	r3, #2
 8004014:	e048      	b.n	80040a8 <HAL_DMA_Start_IT+0xb8>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b01      	cmp	r3, #1
 8004028:	d137      	bne.n	800409a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa52 	bl	80044e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004048:	223f      	movs	r2, #63	; 0x3f
 800404a:	409a      	lsls	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0216 	orr.w	r2, r2, #22
 800405e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800406e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0208 	orr.w	r2, r2, #8
 8004086:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e005      	b.n	80040a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
 80040a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040be:	f7fe fe17 	bl	8002cf0 <HAL_GetTick>
 80040c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d008      	beq.n	80040e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e052      	b.n	8004188 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0216 	bic.w	r2, r2, #22
 80040f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004100:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_DMA_Abort+0x62>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0208 	bic.w	r2, r2, #8
 8004120:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004132:	e013      	b.n	800415c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004134:	f7fe fddc 	bl	8002cf0 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b05      	cmp	r3, #5
 8004140:	d90c      	bls.n	800415c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2203      	movs	r2, #3
 800414c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e015      	b.n	8004188 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e4      	bne.n	8004134 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416e:	223f      	movs	r2, #63	; 0x3f
 8004170:	409a      	lsls	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d004      	beq.n	80041ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2280      	movs	r2, #128	; 0x80
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e00c      	b.n	80041c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2205      	movs	r2, #5
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80041e0:	4b92      	ldr	r3, [pc, #584]	; (800442c <HAL_DMA_IRQHandler+0x258>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a92      	ldr	r2, [pc, #584]	; (8004430 <HAL_DMA_IRQHandler+0x25c>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	2208      	movs	r2, #8
 8004200:	409a      	lsls	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01a      	beq.n	8004240 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d013      	beq.n	8004240 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2208      	movs	r2, #8
 800422e:	409a      	lsls	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d012      	beq.n	8004276 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2201      	movs	r2, #1
 8004264:	409a      	lsls	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f043 0202 	orr.w	r2, r3, #2
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	2204      	movs	r2, #4
 800427c:	409a      	lsls	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d012      	beq.n	80042ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	2204      	movs	r2, #4
 800429a:	409a      	lsls	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0204 	orr.w	r2, r3, #4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	2210      	movs	r2, #16
 80042b2:	409a      	lsls	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d043      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03c      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	2210      	movs	r2, #16
 80042d0:	409a      	lsls	r2, r3
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d018      	beq.n	8004316 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d024      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
 8004302:	e01f      	b.n	8004344 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
 8004314:	e016      	b.n	8004344 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0208 	bic.w	r2, r2, #8
 8004332:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	2220      	movs	r2, #32
 800434a:	409a      	lsls	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 808e 	beq.w	8004472 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8086 	beq.w	8004472 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436a:	2220      	movs	r2, #32
 800436c:	409a      	lsls	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b05      	cmp	r3, #5
 800437c:	d136      	bne.n	80043ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0216 	bic.w	r2, r2, #22
 800438c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800439c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <HAL_DMA_IRQHandler+0x1da>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0208 	bic.w	r2, r2, #8
 80043bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	223f      	movs	r2, #63	; 0x3f
 80043c4:	409a      	lsls	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d07d      	beq.n	80044de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
        }
        return;
 80043ea:	e078      	b.n	80044de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01c      	beq.n	8004434 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d108      	bne.n	800441a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	2b00      	cmp	r3, #0
 800440e:	d030      	beq.n	8004472 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
 8004418:	e02b      	b.n	8004472 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d027      	beq.n	8004472 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
 800442a:	e022      	b.n	8004472 <HAL_DMA_IRQHandler+0x29e>
 800442c:	20000010 	.word	0x20000010
 8004430:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0210 	bic.w	r2, r2, #16
 8004450:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	2b00      	cmp	r3, #0
 8004478:	d032      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d022      	beq.n	80044cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2205      	movs	r2, #5
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d307      	bcc.n	80044ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f2      	bne.n	800449e <HAL_DMA_IRQHandler+0x2ca>
 80044b8:	e000      	b.n	80044bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80044ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
 80044dc:	e000      	b.n	80044e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80044de:	bf00      	nop
    }
  }
}
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop

080044e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004504:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d108      	bne.n	8004528 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004526:	e007      	b.n	8004538 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3b10      	subs	r3, #16
 8004554:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <DMA_CalcBaseAndBitshift+0x60>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800455e:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d908      	bls.n	8004584 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <DMA_CalcBaseAndBitshift+0x68>)
 800457a:	4013      	ands	r3, r2
 800457c:	1d1a      	adds	r2, r3, #4
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	659a      	str	r2, [r3, #88]	; 0x58
 8004582:	e006      	b.n	8004592 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <DMA_CalcBaseAndBitshift+0x68>)
 800458c:	4013      	ands	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	aaaaaaab 	.word	0xaaaaaaab
 80045a8:	0800ade4 	.word	0x0800ade4
 80045ac:	fffffc00 	.word	0xfffffc00

080045b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d11f      	bne.n	800460a <DMA_CheckFifoParam+0x5a>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d856      	bhi.n	800467e <DMA_CheckFifoParam+0xce>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <DMA_CheckFifoParam+0x28>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045fb 	.word	0x080045fb
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	0800467f 	.word	0x0800467f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d046      	beq.n	8004682 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f8:	e043      	b.n	8004682 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004602:	d140      	bne.n	8004686 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004608:	e03d      	b.n	8004686 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004612:	d121      	bne.n	8004658 <DMA_CheckFifoParam+0xa8>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b03      	cmp	r3, #3
 8004618:	d837      	bhi.n	800468a <DMA_CheckFifoParam+0xda>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <DMA_CheckFifoParam+0x70>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004631 	.word	0x08004631
 8004624:	08004637 	.word	0x08004637
 8004628:	08004631 	.word	0x08004631
 800462c:	08004649 	.word	0x08004649
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e030      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d025      	beq.n	800468e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004646:	e022      	b.n	800468e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004650:	d11f      	bne.n	8004692 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004656:	e01c      	b.n	8004692 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d903      	bls.n	8004666 <DMA_CheckFifoParam+0xb6>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d003      	beq.n	800466c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004664:	e018      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      break;
 800466a:	e015      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e00b      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;
 800467e:	bf00      	nop
 8004680:	e00a      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004682:	bf00      	nop
 8004684:	e008      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004686:	bf00      	nop
 8004688:	e006      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 800468a:	bf00      	nop
 800468c:	e004      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 800468e:	bf00      	nop
 8004690:	e002      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;   
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004696:	bf00      	nop
    }
  } 
  
  return status; 
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e175      	b.n	80049b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046c8:	2201      	movs	r2, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f040 8164 	bne.w	80049ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d005      	beq.n	80046fe <HAL_GPIO_Init+0x56>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d130      	bne.n	8004760 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004734:	2201      	movs	r2, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0201 	and.w	r2, r3, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d017      	beq.n	800479c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	2203      	movs	r2, #3
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d123      	bne.n	80047f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	08da      	lsrs	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3208      	adds	r2, #8
 80047b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	220f      	movs	r2, #15
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	08da      	lsrs	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80be 	beq.w	80049ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	4b66      	ldr	r3, [pc, #408]	; (80049cc <HAL_GPIO_Init+0x324>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	4a65      	ldr	r2, [pc, #404]	; (80049cc <HAL_GPIO_Init+0x324>)
 8004838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800483c:	6453      	str	r3, [r2, #68]	; 0x44
 800483e:	4b63      	ldr	r3, [pc, #396]	; (80049cc <HAL_GPIO_Init+0x324>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800484a:	4a61      	ldr	r2, [pc, #388]	; (80049d0 <HAL_GPIO_Init+0x328>)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	3302      	adds	r3, #2
 8004852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	220f      	movs	r2, #15
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a58      	ldr	r2, [pc, #352]	; (80049d4 <HAL_GPIO_Init+0x32c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d037      	beq.n	80048e6 <HAL_GPIO_Init+0x23e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a57      	ldr	r2, [pc, #348]	; (80049d8 <HAL_GPIO_Init+0x330>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d031      	beq.n	80048e2 <HAL_GPIO_Init+0x23a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a56      	ldr	r2, [pc, #344]	; (80049dc <HAL_GPIO_Init+0x334>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d02b      	beq.n	80048de <HAL_GPIO_Init+0x236>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a55      	ldr	r2, [pc, #340]	; (80049e0 <HAL_GPIO_Init+0x338>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d025      	beq.n	80048da <HAL_GPIO_Init+0x232>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a54      	ldr	r2, [pc, #336]	; (80049e4 <HAL_GPIO_Init+0x33c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01f      	beq.n	80048d6 <HAL_GPIO_Init+0x22e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a53      	ldr	r2, [pc, #332]	; (80049e8 <HAL_GPIO_Init+0x340>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d019      	beq.n	80048d2 <HAL_GPIO_Init+0x22a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a52      	ldr	r2, [pc, #328]	; (80049ec <HAL_GPIO_Init+0x344>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_GPIO_Init+0x226>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a51      	ldr	r2, [pc, #324]	; (80049f0 <HAL_GPIO_Init+0x348>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00d      	beq.n	80048ca <HAL_GPIO_Init+0x222>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a50      	ldr	r2, [pc, #320]	; (80049f4 <HAL_GPIO_Init+0x34c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <HAL_GPIO_Init+0x21e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4f      	ldr	r2, [pc, #316]	; (80049f8 <HAL_GPIO_Init+0x350>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_GPIO_Init+0x21a>
 80048be:	2309      	movs	r3, #9
 80048c0:	e012      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048c2:	230a      	movs	r3, #10
 80048c4:	e010      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048c6:	2308      	movs	r3, #8
 80048c8:	e00e      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048ca:	2307      	movs	r3, #7
 80048cc:	e00c      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048ce:	2306      	movs	r3, #6
 80048d0:	e00a      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048d2:	2305      	movs	r3, #5
 80048d4:	e008      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048d6:	2304      	movs	r3, #4
 80048d8:	e006      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048da:	2303      	movs	r3, #3
 80048dc:	e004      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048de:	2302      	movs	r3, #2
 80048e0:	e002      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048e6:	2300      	movs	r3, #0
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	f002 0203 	and.w	r2, r2, #3
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	4093      	lsls	r3, r2
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048f8:	4935      	ldr	r1, [pc, #212]	; (80049d0 <HAL_GPIO_Init+0x328>)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	3302      	adds	r3, #2
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004906:	4b3d      	ldr	r3, [pc, #244]	; (80049fc <HAL_GPIO_Init+0x354>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800492a:	4a34      	ldr	r2, [pc, #208]	; (80049fc <HAL_GPIO_Init+0x354>)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004930:	4b32      	ldr	r3, [pc, #200]	; (80049fc <HAL_GPIO_Init+0x354>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004954:	4a29      	ldr	r2, [pc, #164]	; (80049fc <HAL_GPIO_Init+0x354>)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800495a:	4b28      	ldr	r3, [pc, #160]	; (80049fc <HAL_GPIO_Init+0x354>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800497e:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <HAL_GPIO_Init+0x354>)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004984:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <HAL_GPIO_Init+0x354>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049a8:	4a14      	ldr	r2, [pc, #80]	; (80049fc <HAL_GPIO_Init+0x354>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	f67f ae86 	bls.w	80046c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	3724      	adds	r7, #36	; 0x24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40013800 	.word	0x40013800
 80049d4:	40020000 	.word	0x40020000
 80049d8:	40020400 	.word	0x40020400
 80049dc:	40020800 	.word	0x40020800
 80049e0:	40020c00 	.word	0x40020c00
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40021400 	.word	0x40021400
 80049ec:	40021800 	.word	0x40021800
 80049f0:	40021c00 	.word	0x40021c00
 80049f4:	40022000 	.word	0x40022000
 80049f8:	40022400 	.word	0x40022400
 80049fc:	40013c00 	.word	0x40013c00

08004a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	887b      	ldrh	r3, [r7, #2]
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
 8004a1c:	e001      	b.n	8004a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	807b      	strh	r3, [r7, #2]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a40:	787b      	ldrb	r3, [r7, #1]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a46:	887a      	ldrh	r2, [r7, #2]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a4c:	e003      	b.n	8004a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a4e:	887b      	ldrh	r3, [r7, #2]
 8004a50:	041a      	lsls	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	619a      	str	r2, [r3, #24]
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <HAL_PWREx_EnableOverDrive+0x98>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	4a22      	ldr	r2, [pc, #136]	; (8004afc <HAL_PWREx_EnableOverDrive+0x98>)
 8004a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a78:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7a:	4b20      	ldr	r3, [pc, #128]	; (8004afc <HAL_PWREx_EnableOverDrive+0x98>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a86:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a92:	f7fe f92d 	bl	8002cf0 <HAL_GetTick>
 8004a96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a98:	e009      	b.n	8004aae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a9a:	f7fe f929 	bl	8002cf0 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa8:	d901      	bls.n	8004aae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e022      	b.n	8004af4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aba:	d1ee      	bne.n	8004a9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004abc:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0f      	ldr	r2, [pc, #60]	; (8004b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ac8:	f7fe f912 	bl	8002cf0 <HAL_GetTick>
 8004acc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ace:	e009      	b.n	8004ae4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ad0:	f7fe f90e 	bl	8002cf0 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ade:	d901      	bls.n	8004ae4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e007      	b.n	8004af4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004af0:	d1ee      	bne.n	8004ad0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40007000 	.word	0x40007000

08004b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e29b      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8087 	beq.w	8004c36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b28:	4b96      	ldr	r3, [pc, #600]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 030c 	and.w	r3, r3, #12
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d00c      	beq.n	8004b4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b34:	4b93      	ldr	r3, [pc, #588]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d112      	bne.n	8004b66 <HAL_RCC_OscConfig+0x62>
 8004b40:	4b90      	ldr	r3, [pc, #576]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4c:	d10b      	bne.n	8004b66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4e:	4b8d      	ldr	r3, [pc, #564]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d06c      	beq.n	8004c34 <HAL_RCC_OscConfig+0x130>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d168      	bne.n	8004c34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e275      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6e:	d106      	bne.n	8004b7e <HAL_RCC_OscConfig+0x7a>
 8004b70:	4b84      	ldr	r3, [pc, #528]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a83      	ldr	r2, [pc, #524]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	e02e      	b.n	8004bdc <HAL_RCC_OscConfig+0xd8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x9c>
 8004b86:	4b7f      	ldr	r3, [pc, #508]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a7e      	ldr	r2, [pc, #504]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	4b7c      	ldr	r3, [pc, #496]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a7b      	ldr	r2, [pc, #492]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e01d      	b.n	8004bdc <HAL_RCC_OscConfig+0xd8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_RCC_OscConfig+0xc0>
 8004baa:	4b76      	ldr	r3, [pc, #472]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a75      	ldr	r2, [pc, #468]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	4b73      	ldr	r3, [pc, #460]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a72      	ldr	r2, [pc, #456]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e00b      	b.n	8004bdc <HAL_RCC_OscConfig+0xd8>
 8004bc4:	4b6f      	ldr	r3, [pc, #444]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a6e      	ldr	r2, [pc, #440]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	4b6c      	ldr	r3, [pc, #432]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a6b      	ldr	r2, [pc, #428]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d013      	beq.n	8004c0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fe f884 	bl	8002cf0 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bec:	f7fe f880 	bl	8002cf0 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	; 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e229      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0xe8>
 8004c0a:	e014      	b.n	8004c36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fe f870 	bl	8002cf0 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c14:	f7fe f86c 	bl	8002cf0 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e215      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c26:	4b57      	ldr	r3, [pc, #348]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x110>
 8004c32:	e000      	b.n	8004c36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d069      	beq.n	8004d16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c42:	4b50      	ldr	r3, [pc, #320]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4e:	4b4d      	ldr	r3, [pc, #308]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d11c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x190>
 8004c5a:	4b4a      	ldr	r3, [pc, #296]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d116      	bne.n	8004c94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	4b47      	ldr	r3, [pc, #284]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_RCC_OscConfig+0x17a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d001      	beq.n	8004c7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e1e9      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7e:	4b41      	ldr	r3, [pc, #260]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	493d      	ldr	r1, [pc, #244]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c92:	e040      	b.n	8004d16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d023      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c9c:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a38      	ldr	r2, [pc, #224]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fe f822 	bl	8002cf0 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb0:	f7fe f81e 	bl	8002cf0 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e1c7      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc2:	4b30      	ldr	r3, [pc, #192]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cce:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4929      	ldr	r1, [pc, #164]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]
 8004ce2:	e018      	b.n	8004d16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a26      	ldr	r2, [pc, #152]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fd fffe 	bl	8002cf0 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf8:	f7fd fffa 	bl	8002cf0 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e1a3      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d038      	beq.n	8004d94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d019      	beq.n	8004d5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d2a:	4b16      	ldr	r3, [pc, #88]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2e:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d36:	f7fd ffdb 	bl	8002cf0 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3e:	f7fd ffd7 	bl	8002cf0 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e180      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x23a>
 8004d5c:	e01a      	b.n	8004d94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d62:	4a08      	ldr	r2, [pc, #32]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6a:	f7fd ffc1 	bl	8002cf0 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d72:	f7fd ffbd 	bl	8002cf0 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d903      	bls.n	8004d88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e166      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
 8004d84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d88:	4b92      	ldr	r3, [pc, #584]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1ee      	bne.n	8004d72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80a4 	beq.w	8004eea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da2:	4b8c      	ldr	r3, [pc, #560]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dae:	4b89      	ldr	r3, [pc, #548]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	4a88      	ldr	r2, [pc, #544]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dba:	4b86      	ldr	r3, [pc, #536]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dca:	4b83      	ldr	r3, [pc, #524]	; (8004fd8 <HAL_RCC_OscConfig+0x4d4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d118      	bne.n	8004e08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004dd6:	4b80      	ldr	r3, [pc, #512]	; (8004fd8 <HAL_RCC_OscConfig+0x4d4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a7f      	ldr	r2, [pc, #508]	; (8004fd8 <HAL_RCC_OscConfig+0x4d4>)
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de2:	f7fd ff85 	bl	8002cf0 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dea:	f7fd ff81 	bl	8002cf0 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b64      	cmp	r3, #100	; 0x64
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e12a      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dfc:	4b76      	ldr	r3, [pc, #472]	; (8004fd8 <HAL_RCC_OscConfig+0x4d4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d106      	bne.n	8004e1e <HAL_RCC_OscConfig+0x31a>
 8004e10:	4b70      	ldr	r3, [pc, #448]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a6f      	ldr	r2, [pc, #444]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1c:	e02d      	b.n	8004e7a <HAL_RCC_OscConfig+0x376>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0x33c>
 8004e26:	4b6b      	ldr	r3, [pc, #428]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	4a6a      	ldr	r2, [pc, #424]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e2c:	f023 0301 	bic.w	r3, r3, #1
 8004e30:	6713      	str	r3, [r2, #112]	; 0x70
 8004e32:	4b68      	ldr	r3, [pc, #416]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a67      	ldr	r2, [pc, #412]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e38:	f023 0304 	bic.w	r3, r3, #4
 8004e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3e:	e01c      	b.n	8004e7a <HAL_RCC_OscConfig+0x376>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	d10c      	bne.n	8004e62 <HAL_RCC_OscConfig+0x35e>
 8004e48:	4b62      	ldr	r3, [pc, #392]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	4a61      	ldr	r2, [pc, #388]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e4e:	f043 0304 	orr.w	r3, r3, #4
 8004e52:	6713      	str	r3, [r2, #112]	; 0x70
 8004e54:	4b5f      	ldr	r3, [pc, #380]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	4a5e      	ldr	r2, [pc, #376]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e60:	e00b      	b.n	8004e7a <HAL_RCC_OscConfig+0x376>
 8004e62:	4b5c      	ldr	r3, [pc, #368]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	4a5b      	ldr	r2, [pc, #364]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6e:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	4a58      	ldr	r2, [pc, #352]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004e74:	f023 0304 	bic.w	r3, r3, #4
 8004e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d015      	beq.n	8004eae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e82:	f7fd ff35 	bl	8002cf0 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7fd ff31 	bl	8002cf0 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e0d8      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea0:	4b4c      	ldr	r3, [pc, #304]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ee      	beq.n	8004e8a <HAL_RCC_OscConfig+0x386>
 8004eac:	e014      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fd ff1f 	bl	8002cf0 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fd ff1b 	bl	8002cf0 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0c2      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ecc:	4b41      	ldr	r3, [pc, #260]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1ee      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d105      	bne.n	8004eea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ede:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	4a3c      	ldr	r2, [pc, #240]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 80ae 	beq.w	8005050 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef4:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d06d      	beq.n	8004fdc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d14b      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f08:	4b32      	ldr	r3, [pc, #200]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a31      	ldr	r2, [pc, #196]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fd feec 	bl	8002cf0 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1c:	f7fd fee8 	bl	8002cf0 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e091      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2e:	4b29      	ldr	r3, [pc, #164]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69da      	ldr	r2, [r3, #28]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	019b      	lsls	r3, r3, #6
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	3b01      	subs	r3, #1
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	061b      	lsls	r3, r3, #24
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	071b      	lsls	r3, r3, #28
 8004f66:	491b      	ldr	r1, [pc, #108]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fd feba 	bl	8002cf0 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f80:	f7fd feb6 	bl	8002cf0 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e05f      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f92:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCC_OscConfig+0x47c>
 8004f9e:	e057      	b.n	8005050 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fd fea0 	bl	8002cf0 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb4:	f7fd fe9c 	bl	8002cf0 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e045      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc6:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_RCC_OscConfig+0x4d0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4b0>
 8004fd2:	e03d      	b.n	8005050 <HAL_RCC_OscConfig+0x54c>
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	; (800505c <HAL_RCC_OscConfig+0x558>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d030      	beq.n	800504c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d129      	bne.n	800504c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005002:	429a      	cmp	r2, r3
 8005004:	d122      	bne.n	800504c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005012:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005014:	4293      	cmp	r3, r2
 8005016:	d119      	bne.n	800504c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	3b01      	subs	r3, #1
 8005026:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d10f      	bne.n	800504c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d107      	bne.n	800504c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800

08005060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0d0      	b.n	800521a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b6a      	ldr	r3, [pc, #424]	; (8005224 <HAL_RCC_ClockConfig+0x1c4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d910      	bls.n	80050a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b67      	ldr	r3, [pc, #412]	; (8005224 <HAL_RCC_ClockConfig+0x1c4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 020f 	bic.w	r2, r3, #15
 800508e:	4965      	ldr	r1, [pc, #404]	; (8005224 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	4313      	orrs	r3, r2
 8005094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005096:	4b63      	ldr	r3, [pc, #396]	; (8005224 <HAL_RCC_ClockConfig+0x1c4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0b8      	b.n	800521a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d020      	beq.n	80050f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050c0:	4b59      	ldr	r3, [pc, #356]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4a58      	ldr	r2, [pc, #352]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80050c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050d8:	4b53      	ldr	r3, [pc, #332]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4a52      	ldr	r2, [pc, #328]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80050de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e4:	4b50      	ldr	r3, [pc, #320]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	494d      	ldr	r1, [pc, #308]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d040      	beq.n	8005184 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d107      	bne.n	800511a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510a:	4b47      	ldr	r3, [pc, #284]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d115      	bne.n	8005142 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e07f      	b.n	800521a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005122:	4b41      	ldr	r3, [pc, #260]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e073      	b.n	800521a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005132:	4b3d      	ldr	r3, [pc, #244]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e06b      	b.n	800521a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005142:	4b39      	ldr	r3, [pc, #228]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f023 0203 	bic.w	r2, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4936      	ldr	r1, [pc, #216]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 8005150:	4313      	orrs	r3, r2
 8005152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005154:	f7fd fdcc 	bl	8002cf0 <HAL_GetTick>
 8005158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	e00a      	b.n	8005172 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515c:	f7fd fdc8 	bl	8002cf0 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	; 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e053      	b.n	800521a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	4b2d      	ldr	r3, [pc, #180]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 020c 	and.w	r2, r3, #12
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	429a      	cmp	r2, r3
 8005182:	d1eb      	bne.n	800515c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <HAL_RCC_ClockConfig+0x1c4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d210      	bcs.n	80051b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 020f 	bic.w	r2, r3, #15
 800519a:	4922      	ldr	r1, [pc, #136]	; (8005224 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <HAL_RCC_ClockConfig+0x1c4>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e032      	b.n	800521a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c0:	4b19      	ldr	r3, [pc, #100]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4916      	ldr	r1, [pc, #88]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	490e      	ldr	r1, [pc, #56]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051f2:	f000 f821 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80051f6:	4602      	mov	r2, r0
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	490a      	ldr	r1, [pc, #40]	; (800522c <HAL_RCC_ClockConfig+0x1cc>)
 8005204:	5ccb      	ldrb	r3, [r1, r3]
 8005206:	fa22 f303 	lsr.w	r3, r2, r3
 800520a:	4a09      	ldr	r2, [pc, #36]	; (8005230 <HAL_RCC_ClockConfig+0x1d0>)
 800520c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <HAL_RCC_ClockConfig+0x1d4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7fd fd28 	bl	8002c68 <HAL_InitTick>

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40023c00 	.word	0x40023c00
 8005228:	40023800 	.word	0x40023800
 800522c:	0800ada4 	.word	0x0800ada4
 8005230:	20000010 	.word	0x20000010
 8005234:	20000014 	.word	0x20000014

08005238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	607b      	str	r3, [r7, #4]
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	2300      	movs	r3, #0
 800524a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005250:	4b67      	ldr	r3, [pc, #412]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 030c 	and.w	r3, r3, #12
 8005258:	2b08      	cmp	r3, #8
 800525a:	d00d      	beq.n	8005278 <HAL_RCC_GetSysClockFreq+0x40>
 800525c:	2b08      	cmp	r3, #8
 800525e:	f200 80bd 	bhi.w	80053dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_RCC_GetSysClockFreq+0x34>
 8005266:	2b04      	cmp	r3, #4
 8005268:	d003      	beq.n	8005272 <HAL_RCC_GetSysClockFreq+0x3a>
 800526a:	e0b7      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800526c:	4b61      	ldr	r3, [pc, #388]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800526e:	60bb      	str	r3, [r7, #8]
      break;
 8005270:	e0b7      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005272:	4b60      	ldr	r3, [pc, #384]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005274:	60bb      	str	r3, [r7, #8]
      break;
 8005276:	e0b4      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005278:	4b5d      	ldr	r3, [pc, #372]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005280:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005282:	4b5b      	ldr	r3, [pc, #364]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d04d      	beq.n	800532a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800528e:	4b58      	ldr	r3, [pc, #352]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	099b      	lsrs	r3, r3, #6
 8005294:	461a      	mov	r2, r3
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800529e:	f04f 0100 	mov.w	r1, #0
 80052a2:	ea02 0800 	and.w	r8, r2, r0
 80052a6:	ea03 0901 	and.w	r9, r3, r1
 80052aa:	4640      	mov	r0, r8
 80052ac:	4649      	mov	r1, r9
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	014b      	lsls	r3, r1, #5
 80052b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052bc:	0142      	lsls	r2, r0, #5
 80052be:	4610      	mov	r0, r2
 80052c0:	4619      	mov	r1, r3
 80052c2:	ebb0 0008 	subs.w	r0, r0, r8
 80052c6:	eb61 0109 	sbc.w	r1, r1, r9
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	018b      	lsls	r3, r1, #6
 80052d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052d8:	0182      	lsls	r2, r0, #6
 80052da:	1a12      	subs	r2, r2, r0
 80052dc:	eb63 0301 	sbc.w	r3, r3, r1
 80052e0:	f04f 0000 	mov.w	r0, #0
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	00d9      	lsls	r1, r3, #3
 80052ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052ee:	00d0      	lsls	r0, r2, #3
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	eb12 0208 	adds.w	r2, r2, r8
 80052f8:	eb43 0309 	adc.w	r3, r3, r9
 80052fc:	f04f 0000 	mov.w	r0, #0
 8005300:	f04f 0100 	mov.w	r1, #0
 8005304:	0299      	lsls	r1, r3, #10
 8005306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800530a:	0290      	lsls	r0, r2, #10
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	461a      	mov	r2, r3
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	f7fa fff8 	bl	8000310 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4613      	mov	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e04a      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800532a:	4b31      	ldr	r3, [pc, #196]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	099b      	lsrs	r3, r3, #6
 8005330:	461a      	mov	r2, r3
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	f240 10ff 	movw	r0, #511	; 0x1ff
 800533a:	f04f 0100 	mov.w	r1, #0
 800533e:	ea02 0400 	and.w	r4, r2, r0
 8005342:	ea03 0501 	and.w	r5, r3, r1
 8005346:	4620      	mov	r0, r4
 8005348:	4629      	mov	r1, r5
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	f04f 0300 	mov.w	r3, #0
 8005352:	014b      	lsls	r3, r1, #5
 8005354:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005358:	0142      	lsls	r2, r0, #5
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	1b00      	subs	r0, r0, r4
 8005360:	eb61 0105 	sbc.w	r1, r1, r5
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	018b      	lsls	r3, r1, #6
 800536e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005372:	0182      	lsls	r2, r0, #6
 8005374:	1a12      	subs	r2, r2, r0
 8005376:	eb63 0301 	sbc.w	r3, r3, r1
 800537a:	f04f 0000 	mov.w	r0, #0
 800537e:	f04f 0100 	mov.w	r1, #0
 8005382:	00d9      	lsls	r1, r3, #3
 8005384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005388:	00d0      	lsls	r0, r2, #3
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	1912      	adds	r2, r2, r4
 8005390:	eb45 0303 	adc.w	r3, r5, r3
 8005394:	f04f 0000 	mov.w	r0, #0
 8005398:	f04f 0100 	mov.w	r1, #0
 800539c:	0299      	lsls	r1, r3, #10
 800539e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053a2:	0290      	lsls	r0, r2, #10
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4610      	mov	r0, r2
 80053aa:	4619      	mov	r1, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	f7fa ffac 	bl	8000310 <__aeabi_uldivmod>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4613      	mov	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	3301      	adds	r3, #1
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	60bb      	str	r3, [r7, #8]
      break;
 80053da:	e002      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053de:	60bb      	str	r3, [r7, #8]
      break;
 80053e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053e2:	68bb      	ldr	r3, [r7, #8]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800
 80053f4:	00f42400 	.word	0x00f42400

080053f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <HAL_RCC_GetHCLKFreq+0x14>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20000010 	.word	0x20000010

08005410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005414:	f7ff fff0 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005418:	4602      	mov	r2, r0
 800541a:	4b05      	ldr	r3, [pc, #20]	; (8005430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	0a9b      	lsrs	r3, r3, #10
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4903      	ldr	r1, [pc, #12]	; (8005434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005426:	5ccb      	ldrb	r3, [r1, r3]
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800542c:	4618      	mov	r0, r3
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40023800 	.word	0x40023800
 8005434:	0800adb4 	.word	0x0800adb4

08005438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800543c:	f7ff ffdc 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005440:	4602      	mov	r2, r0
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0b5b      	lsrs	r3, r3, #13
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4903      	ldr	r1, [pc, #12]	; (800545c <HAL_RCC_GetPCLK2Freq+0x24>)
 800544e:	5ccb      	ldrb	r3, [r1, r3]
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005454:	4618      	mov	r0, r3
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40023800 	.word	0x40023800
 800545c:	0800adb4 	.word	0x0800adb4

08005460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d012      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005488:	4b69      	ldr	r3, [pc, #420]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4a68      	ldr	r2, [pc, #416]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005492:	6093      	str	r3, [r2, #8]
 8005494:	4b66      	ldr	r3, [pc, #408]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	4964      	ldr	r1, [pc, #400]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80054aa:	2301      	movs	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d017      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054ba:	4b5d      	ldr	r3, [pc, #372]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	4959      	ldr	r1, [pc, #356]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d8:	d101      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054da:	2301      	movs	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d017      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054f6:	4b4e      	ldr	r3, [pc, #312]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	494a      	ldr	r1, [pc, #296]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005514:	d101      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005516:	2301      	movs	r3, #1
 8005518:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005522:	2301      	movs	r3, #1
 8005524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005532:	2301      	movs	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 808b 	beq.w	800565a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005544:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	4a39      	ldr	r2, [pc, #228]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554e:	6413      	str	r3, [r2, #64]	; 0x40
 8005550:	4b37      	ldr	r3, [pc, #220]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800555c:	4b35      	ldr	r3, [pc, #212]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a34      	ldr	r2, [pc, #208]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005568:	f7fd fbc2 	bl	8002cf0 <HAL_GetTick>
 800556c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005570:	f7fd fbbe 	bl	8002cf0 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	; 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e38f      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005582:	4b2c      	ldr	r3, [pc, #176]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800558e:	4b28      	ldr	r3, [pc, #160]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005596:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d035      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d02e      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055ac:	4b20      	ldr	r3, [pc, #128]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055b6:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055c2:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	4a1a      	ldr	r2, [pc, #104]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055ce:	4a18      	ldr	r2, [pc, #96]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055d4:	4b16      	ldr	r3, [pc, #88]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d114      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fd fb86 	bl	8002cf0 <HAL_GetTick>
 80055e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e6:	e00a      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e8:	f7fd fb82 	bl	8002cf0 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e351      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0ee      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005616:	d111      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005618:	4b05      	ldr	r3, [pc, #20]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005626:	400b      	ands	r3, r1
 8005628:	4901      	ldr	r1, [pc, #4]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562a:	4313      	orrs	r3, r2
 800562c:	608b      	str	r3, [r1, #8]
 800562e:	e00b      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005630:	40023800 	.word	0x40023800
 8005634:	40007000 	.word	0x40007000
 8005638:	0ffffcff 	.word	0x0ffffcff
 800563c:	4bb3      	ldr	r3, [pc, #716]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4ab2      	ldr	r2, [pc, #712]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005642:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005646:	6093      	str	r3, [r2, #8]
 8005648:	4bb0      	ldr	r3, [pc, #704]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800564a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	49ad      	ldr	r1, [pc, #692]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005656:	4313      	orrs	r3, r2
 8005658:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b00      	cmp	r3, #0
 8005664:	d010      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005666:	4ba9      	ldr	r3, [pc, #676]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566c:	4aa7      	ldr	r2, [pc, #668]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800566e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005672:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005676:	4ba5      	ldr	r3, [pc, #660]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005678:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	49a2      	ldr	r1, [pc, #648]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005694:	4b9d      	ldr	r3, [pc, #628]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a2:	499a      	ldr	r1, [pc, #616]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b6:	4b95      	ldr	r3, [pc, #596]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056c4:	4991      	ldr	r1, [pc, #580]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d8:	4b8c      	ldr	r3, [pc, #560]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e6:	4989      	ldr	r1, [pc, #548]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056fa:	4b84      	ldr	r3, [pc, #528]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005700:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	4980      	ldr	r1, [pc, #512]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800571c:	4b7b      	ldr	r3, [pc, #492]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	f023 0203 	bic.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	4978      	ldr	r1, [pc, #480]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800573e:	4b73      	ldr	r3, [pc, #460]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005744:	f023 020c 	bic.w	r2, r3, #12
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574c:	496f      	ldr	r1, [pc, #444]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005760:	4b6a      	ldr	r3, [pc, #424]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005766:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576e:	4967      	ldr	r1, [pc, #412]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005782:	4b62      	ldr	r3, [pc, #392]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005788:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	495e      	ldr	r1, [pc, #376]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057a4:	4b59      	ldr	r3, [pc, #356]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	4956      	ldr	r1, [pc, #344]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80057c6:	4b51      	ldr	r3, [pc, #324]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d4:	494d      	ldr	r1, [pc, #308]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057e8:	4b48      	ldr	r3, [pc, #288]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	4945      	ldr	r1, [pc, #276]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800580a:	4b40      	ldr	r3, [pc, #256]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005818:	493c      	ldr	r1, [pc, #240]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800582c:	4b37      	ldr	r3, [pc, #220]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800583a:	4934      	ldr	r1, [pc, #208]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d011      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800584e:	4b2f      	ldr	r3, [pc, #188]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005854:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585c:	492b      	ldr	r1, [pc, #172]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800586c:	d101      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800586e:	2301      	movs	r3, #1
 8005870:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800587e:	2301      	movs	r3, #1
 8005880:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800588e:	4b1f      	ldr	r3, [pc, #124]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589c:	491b      	ldr	r1, [pc, #108]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c0:	4912      	ldr	r1, [pc, #72]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00b      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80058d4:	4b0d      	ldr	r3, [pc, #52]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e4:	4909      	ldr	r1, [pc, #36]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00f      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058f8:	4b04      	ldr	r3, [pc, #16]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	e002      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800
 8005910:	4986      	ldr	r1, [pc, #536]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005924:	4b81      	ldr	r3, [pc, #516]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800592a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005934:	497d      	ldr	r1, [pc, #500]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d006      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 80d6 	beq.w	8005afc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005950:	4b76      	ldr	r3, [pc, #472]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a75      	ldr	r2, [pc, #468]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005956:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800595a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595c:	f7fd f9c8 	bl	8002cf0 <HAL_GetTick>
 8005960:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005964:	f7fd f9c4 	bl	8002cf0 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b64      	cmp	r3, #100	; 0x64
 8005970:	d901      	bls.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e195      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005976:	4b6d      	ldr	r3, [pc, #436]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d021      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005992:	2b00      	cmp	r3, #0
 8005994:	d11d      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005996:	4b65      	ldr	r3, [pc, #404]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800599c:	0c1b      	lsrs	r3, r3, #16
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059a4:	4b61      	ldr	r3, [pc, #388]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059aa:	0e1b      	lsrs	r3, r3, #24
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	019a      	lsls	r2, r3, #6
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	431a      	orrs	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	061b      	lsls	r3, r3, #24
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	071b      	lsls	r3, r3, #28
 80059ca:	4958      	ldr	r1, [pc, #352]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d02e      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059fc:	d129      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059fe:	4b4b      	ldr	r3, [pc, #300]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a04:	0c1b      	lsrs	r3, r3, #16
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a0c:	4b47      	ldr	r3, [pc, #284]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a12:	0f1b      	lsrs	r3, r3, #28
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	019a      	lsls	r2, r3, #6
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	061b      	lsls	r3, r3, #24
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	071b      	lsls	r3, r3, #28
 8005a32:	493e      	ldr	r1, [pc, #248]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a3a:	4b3c      	ldr	r3, [pc, #240]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a40:	f023 021f 	bic.w	r2, r3, #31
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	4938      	ldr	r1, [pc, #224]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01d      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a5e:	4b33      	ldr	r3, [pc, #204]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a64:	0e1b      	lsrs	r3, r3, #24
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a6c:	4b2f      	ldr	r3, [pc, #188]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a72:	0f1b      	lsrs	r3, r3, #28
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	019a      	lsls	r2, r3, #6
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	431a      	orrs	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	071b      	lsls	r3, r3, #28
 8005a92:	4926      	ldr	r1, [pc, #152]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d011      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	019a      	lsls	r2, r3, #6
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	061b      	lsls	r3, r3, #24
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	071b      	lsls	r3, r3, #28
 8005ac2:	491a      	ldr	r1, [pc, #104]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005aca:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad6:	f7fd f90b 	bl	8002cf0 <HAL_GetTick>
 8005ada:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005adc:	e008      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ade:	f7fd f907 	bl	8002cf0 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b64      	cmp	r3, #100	; 0x64
 8005aea:	d901      	bls.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e0d8      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005af0:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f0      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	f040 80ce 	bne.w	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b04:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a08      	ldr	r2, [pc, #32]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b10:	f7fd f8ee 	bl	8002cf0 <HAL_GetTick>
 8005b14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b16:	e00b      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b18:	f7fd f8ea 	bl	8002cf0 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b64      	cmp	r3, #100	; 0x64
 8005b24:	d904      	bls.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e0bb      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005b2a:	bf00      	nop
 8005b2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b30:	4b5e      	ldr	r3, [pc, #376]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b3c:	d0ec      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d009      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d02e      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d12a      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b66:	4b51      	ldr	r3, [pc, #324]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b74:	4b4d      	ldr	r3, [pc, #308]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	0f1b      	lsrs	r3, r3, #28
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	019a      	lsls	r2, r3, #6
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	061b      	lsls	r3, r3, #24
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	071b      	lsls	r3, r3, #28
 8005b9a:	4944      	ldr	r1, [pc, #272]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ba2:	4b42      	ldr	r3, [pc, #264]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	493d      	ldr	r1, [pc, #244]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d022      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd0:	d11d      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bd2:	4b36      	ldr	r3, [pc, #216]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd8:	0e1b      	lsrs	r3, r3, #24
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005be0:	4b32      	ldr	r3, [pc, #200]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	0f1b      	lsrs	r3, r3, #28
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	019a      	lsls	r2, r3, #6
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	431a      	orrs	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	071b      	lsls	r3, r3, #28
 8005c06:	4929      	ldr	r1, [pc, #164]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d028      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c1a:	4b24      	ldr	r3, [pc, #144]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	0e1b      	lsrs	r3, r3, #24
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c28:	4b20      	ldr	r3, [pc, #128]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2e:	0c1b      	lsrs	r3, r3, #16
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	019a      	lsls	r2, r3, #6
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	431a      	orrs	r2, r3
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	061b      	lsls	r3, r3, #24
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	071b      	lsls	r3, r3, #28
 8005c4e:	4917      	ldr	r1, [pc, #92]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c56:	4b15      	ldr	r3, [pc, #84]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	4911      	ldr	r1, [pc, #68]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a0e      	ldr	r2, [pc, #56]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c78:	f7fd f83a 	bl	8002cf0 <HAL_GetTick>
 8005c7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c80:	f7fd f836 	bl	8002cf0 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b64      	cmp	r3, #100	; 0x64
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e007      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c9e:	d1ef      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40023800 	.word	0x40023800

08005cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e049      	b.n	8005d56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fc fcce 	bl	8002678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f000 fb68 	bl	80063c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d001      	beq.n	8005d78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e04c      	b.n	8005e12 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a26      	ldr	r2, [pc, #152]	; (8005e20 <HAL_TIM_Base_Start+0xc0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d022      	beq.n	8005dd0 <HAL_TIM_Base_Start+0x70>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d92:	d01d      	beq.n	8005dd0 <HAL_TIM_Base_Start+0x70>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a22      	ldr	r2, [pc, #136]	; (8005e24 <HAL_TIM_Base_Start+0xc4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d018      	beq.n	8005dd0 <HAL_TIM_Base_Start+0x70>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a21      	ldr	r2, [pc, #132]	; (8005e28 <HAL_TIM_Base_Start+0xc8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d013      	beq.n	8005dd0 <HAL_TIM_Base_Start+0x70>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1f      	ldr	r2, [pc, #124]	; (8005e2c <HAL_TIM_Base_Start+0xcc>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00e      	beq.n	8005dd0 <HAL_TIM_Base_Start+0x70>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1e      	ldr	r2, [pc, #120]	; (8005e30 <HAL_TIM_Base_Start+0xd0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d009      	beq.n	8005dd0 <HAL_TIM_Base_Start+0x70>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <HAL_TIM_Base_Start+0xd4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_TIM_Base_Start+0x70>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1b      	ldr	r2, [pc, #108]	; (8005e38 <HAL_TIM_Base_Start+0xd8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d115      	bne.n	8005dfc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	4b19      	ldr	r3, [pc, #100]	; (8005e3c <HAL_TIM_Base_Start+0xdc>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b06      	cmp	r3, #6
 8005de0:	d015      	beq.n	8005e0e <HAL_TIM_Base_Start+0xae>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de8:	d011      	beq.n	8005e0e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	e008      	b.n	8005e0e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e000      	b.n	8005e10 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40010000 	.word	0x40010000
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40000c00 	.word	0x40000c00
 8005e30:	40010400 	.word	0x40010400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40001800 	.word	0x40001800
 8005e3c:	00010007 	.word	0x00010007

08005e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d001      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e054      	b.n	8005f02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a26      	ldr	r2, [pc, #152]	; (8005f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d022      	beq.n	8005ec0 <HAL_TIM_Base_Start_IT+0x80>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e82:	d01d      	beq.n	8005ec0 <HAL_TIM_Base_Start_IT+0x80>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a22      	ldr	r2, [pc, #136]	; (8005f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d018      	beq.n	8005ec0 <HAL_TIM_Base_Start_IT+0x80>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a21      	ldr	r2, [pc, #132]	; (8005f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d013      	beq.n	8005ec0 <HAL_TIM_Base_Start_IT+0x80>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00e      	beq.n	8005ec0 <HAL_TIM_Base_Start_IT+0x80>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d009      	beq.n	8005ec0 <HAL_TIM_Base_Start_IT+0x80>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <HAL_TIM_Base_Start_IT+0xe4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d004      	beq.n	8005ec0 <HAL_TIM_Base_Start_IT+0x80>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1b      	ldr	r2, [pc, #108]	; (8005f28 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d115      	bne.n	8005eec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	4b19      	ldr	r3, [pc, #100]	; (8005f2c <HAL_TIM_Base_Start_IT+0xec>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b06      	cmp	r3, #6
 8005ed0:	d015      	beq.n	8005efe <HAL_TIM_Base_Start_IT+0xbe>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed8:	d011      	beq.n	8005efe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0201 	orr.w	r2, r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eea:	e008      	b.n	8005efe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	e000      	b.n	8005f00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40000800 	.word	0x40000800
 8005f1c:	40000c00 	.word	0x40000c00
 8005f20:	40010400 	.word	0x40010400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40001800 	.word	0x40001800
 8005f2c:	00010007 	.word	0x00010007

08005f30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6a1a      	ldr	r2, [r3, #32]
 8005f4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10f      	bne.n	8005f78 <HAL_TIM_Base_Stop_IT+0x48>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6a1a      	ldr	r2, [r3, #32]
 8005f5e:	f240 4344 	movw	r3, #1092	; 0x444
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d107      	bne.n	8005f78 <HAL_TIM_Base_Stop_IT+0x48>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d122      	bne.n	8005fea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d11b      	bne.n	8005fea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f06f 0202 	mvn.w	r2, #2
 8005fba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f9d9 	bl	8006388 <HAL_TIM_IC_CaptureCallback>
 8005fd6:	e005      	b.n	8005fe4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f9cb 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9dc 	bl	800639c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d122      	bne.n	800603e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b04      	cmp	r3, #4
 8006004:	d11b      	bne.n	800603e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f06f 0204 	mvn.w	r2, #4
 800600e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f9af 	bl	8006388 <HAL_TIM_IC_CaptureCallback>
 800602a:	e005      	b.n	8006038 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f9a1 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f9b2 	bl	800639c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b08      	cmp	r3, #8
 800604a:	d122      	bne.n	8006092 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b08      	cmp	r3, #8
 8006058:	d11b      	bne.n	8006092 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f06f 0208 	mvn.w	r2, #8
 8006062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2204      	movs	r2, #4
 8006068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f985 	bl	8006388 <HAL_TIM_IC_CaptureCallback>
 800607e:	e005      	b.n	800608c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f977 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f988 	bl	800639c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f003 0310 	and.w	r3, r3, #16
 800609c:	2b10      	cmp	r3, #16
 800609e:	d122      	bne.n	80060e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	2b10      	cmp	r3, #16
 80060ac:	d11b      	bne.n	80060e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f06f 0210 	mvn.w	r2, #16
 80060b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2208      	movs	r2, #8
 80060bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f95b 	bl	8006388 <HAL_TIM_IC_CaptureCallback>
 80060d2:	e005      	b.n	80060e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f94d 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f95e 	bl	800639c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d10e      	bne.n	8006112 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d107      	bne.n	8006112 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f06f 0201 	mvn.w	r2, #1
 800610a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f927 	bl	8006360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611c:	2b80      	cmp	r3, #128	; 0x80
 800611e:	d10e      	bne.n	800613e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612a:	2b80      	cmp	r3, #128	; 0x80
 800612c:	d107      	bne.n	800613e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fb15 	bl	8006768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614c:	d10e      	bne.n	800616c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006158:	2b80      	cmp	r3, #128	; 0x80
 800615a:	d107      	bne.n	800616c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fb08 	bl	800677c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d10e      	bne.n	8006198 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	2b40      	cmp	r3, #64	; 0x40
 8006186:	d107      	bne.n	8006198 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f90c 	bl	80063b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d10e      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d107      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0220 	mvn.w	r2, #32
 80061bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fac8 	bl	8006754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_TIM_ConfigClockSource+0x1c>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e0b4      	b.n	8006352 <HAL_TIM_ConfigClockSource+0x186>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	4b56      	ldr	r3, [pc, #344]	; (800635c <HAL_TIM_ConfigClockSource+0x190>)
 8006204:	4013      	ands	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800620e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006220:	d03e      	beq.n	80062a0 <HAL_TIM_ConfigClockSource+0xd4>
 8006222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006226:	f200 8087 	bhi.w	8006338 <HAL_TIM_ConfigClockSource+0x16c>
 800622a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622e:	f000 8086 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x172>
 8006232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006236:	d87f      	bhi.n	8006338 <HAL_TIM_ConfigClockSource+0x16c>
 8006238:	2b70      	cmp	r3, #112	; 0x70
 800623a:	d01a      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0xa6>
 800623c:	2b70      	cmp	r3, #112	; 0x70
 800623e:	d87b      	bhi.n	8006338 <HAL_TIM_ConfigClockSource+0x16c>
 8006240:	2b60      	cmp	r3, #96	; 0x60
 8006242:	d050      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x11a>
 8006244:	2b60      	cmp	r3, #96	; 0x60
 8006246:	d877      	bhi.n	8006338 <HAL_TIM_ConfigClockSource+0x16c>
 8006248:	2b50      	cmp	r3, #80	; 0x50
 800624a:	d03c      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0xfa>
 800624c:	2b50      	cmp	r3, #80	; 0x50
 800624e:	d873      	bhi.n	8006338 <HAL_TIM_ConfigClockSource+0x16c>
 8006250:	2b40      	cmp	r3, #64	; 0x40
 8006252:	d058      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x13a>
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	d86f      	bhi.n	8006338 <HAL_TIM_ConfigClockSource+0x16c>
 8006258:	2b30      	cmp	r3, #48	; 0x30
 800625a:	d064      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x15a>
 800625c:	2b30      	cmp	r3, #48	; 0x30
 800625e:	d86b      	bhi.n	8006338 <HAL_TIM_ConfigClockSource+0x16c>
 8006260:	2b20      	cmp	r3, #32
 8006262:	d060      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x15a>
 8006264:	2b20      	cmp	r3, #32
 8006266:	d867      	bhi.n	8006338 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d05c      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x15a>
 800626c:	2b10      	cmp	r3, #16
 800626e:	d05a      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x15a>
 8006270:	e062      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	6899      	ldr	r1, [r3, #8]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f000 f9b9 	bl	80065f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	609a      	str	r2, [r3, #8]
      break;
 800629e:	e04f      	b.n	8006340 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	6899      	ldr	r1, [r3, #8]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f000 f9a2 	bl	80065f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062c2:	609a      	str	r2, [r3, #8]
      break;
 80062c4:	e03c      	b.n	8006340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6859      	ldr	r1, [r3, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f000 f916 	bl	8006504 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2150      	movs	r1, #80	; 0x50
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f96f 	bl	80065c2 <TIM_ITRx_SetConfig>
      break;
 80062e4:	e02c      	b.n	8006340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6859      	ldr	r1, [r3, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	461a      	mov	r2, r3
 80062f4:	f000 f935 	bl	8006562 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2160      	movs	r1, #96	; 0x60
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f95f 	bl	80065c2 <TIM_ITRx_SetConfig>
      break;
 8006304:	e01c      	b.n	8006340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6859      	ldr	r1, [r3, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	461a      	mov	r2, r3
 8006314:	f000 f8f6 	bl	8006504 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2140      	movs	r1, #64	; 0x40
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f94f 	bl	80065c2 <TIM_ITRx_SetConfig>
      break;
 8006324:	e00c      	b.n	8006340 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f000 f946 	bl	80065c2 <TIM_ITRx_SetConfig>
      break;
 8006336:	e003      	b.n	8006340 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	73fb      	strb	r3, [r7, #15]
      break;
 800633c:	e000      	b.n	8006340 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800633e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	fffeff88 	.word	0xfffeff88

08006360 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a40      	ldr	r2, [pc, #256]	; (80064d8 <TIM_Base_SetConfig+0x114>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d013      	beq.n	8006404 <TIM_Base_SetConfig+0x40>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e2:	d00f      	beq.n	8006404 <TIM_Base_SetConfig+0x40>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a3d      	ldr	r2, [pc, #244]	; (80064dc <TIM_Base_SetConfig+0x118>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00b      	beq.n	8006404 <TIM_Base_SetConfig+0x40>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a3c      	ldr	r2, [pc, #240]	; (80064e0 <TIM_Base_SetConfig+0x11c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d007      	beq.n	8006404 <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a3b      	ldr	r2, [pc, #236]	; (80064e4 <TIM_Base_SetConfig+0x120>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a3a      	ldr	r2, [pc, #232]	; (80064e8 <TIM_Base_SetConfig+0x124>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d108      	bne.n	8006416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2f      	ldr	r2, [pc, #188]	; (80064d8 <TIM_Base_SetConfig+0x114>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d02b      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006424:	d027      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a2c      	ldr	r2, [pc, #176]	; (80064dc <TIM_Base_SetConfig+0x118>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d023      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a2b      	ldr	r2, [pc, #172]	; (80064e0 <TIM_Base_SetConfig+0x11c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01f      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a2a      	ldr	r2, [pc, #168]	; (80064e4 <TIM_Base_SetConfig+0x120>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d01b      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a29      	ldr	r2, [pc, #164]	; (80064e8 <TIM_Base_SetConfig+0x124>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d017      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a28      	ldr	r2, [pc, #160]	; (80064ec <TIM_Base_SetConfig+0x128>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a27      	ldr	r2, [pc, #156]	; (80064f0 <TIM_Base_SetConfig+0x12c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00f      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a26      	ldr	r2, [pc, #152]	; (80064f4 <TIM_Base_SetConfig+0x130>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00b      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a25      	ldr	r2, [pc, #148]	; (80064f8 <TIM_Base_SetConfig+0x134>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d007      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a24      	ldr	r2, [pc, #144]	; (80064fc <TIM_Base_SetConfig+0x138>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d003      	beq.n	8006476 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a23      	ldr	r2, [pc, #140]	; (8006500 <TIM_Base_SetConfig+0x13c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d108      	bne.n	8006488 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a0a      	ldr	r2, [pc, #40]	; (80064d8 <TIM_Base_SetConfig+0x114>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_Base_SetConfig+0xf8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a0c      	ldr	r2, [pc, #48]	; (80064e8 <TIM_Base_SetConfig+0x124>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d103      	bne.n	80064c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	615a      	str	r2, [r3, #20]
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	40010000 	.word	0x40010000
 80064dc:	40000400 	.word	0x40000400
 80064e0:	40000800 	.word	0x40000800
 80064e4:	40000c00 	.word	0x40000c00
 80064e8:	40010400 	.word	0x40010400
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40014400 	.word	0x40014400
 80064f4:	40014800 	.word	0x40014800
 80064f8:	40001800 	.word	0x40001800
 80064fc:	40001c00 	.word	0x40001c00
 8006500:	40002000 	.word	0x40002000

08006504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f023 0201 	bic.w	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800652e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 030a 	bic.w	r3, r3, #10
 8006540:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	621a      	str	r2, [r3, #32]
}
 8006556:	bf00      	nop
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006562:	b480      	push	{r7}
 8006564:	b087      	sub	sp, #28
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f023 0210 	bic.w	r2, r3, #16
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800658c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	031b      	lsls	r3, r3, #12
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800659e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	621a      	str	r2, [r3, #32]
}
 80065b6:	bf00      	nop
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	f043 0307 	orr.w	r3, r3, #7
 80065e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	609a      	str	r2, [r3, #8]
}
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	021a      	lsls	r2, r3, #8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	431a      	orrs	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4313      	orrs	r3, r2
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	609a      	str	r2, [r3, #8]
}
 800662c:	bf00      	nop
 800662e:	371c      	adds	r7, #28
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800664c:	2302      	movs	r3, #2
 800664e:	e06d      	b.n	800672c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a30      	ldr	r2, [pc, #192]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2f      	ldr	r2, [pc, #188]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d108      	bne.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800668a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a20      	ldr	r2, [pc, #128]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d022      	beq.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c2:	d01d      	beq.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d018      	beq.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d013      	beq.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1a      	ldr	r2, [pc, #104]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00e      	beq.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a15      	ldr	r2, [pc, #84]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d009      	beq.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a16      	ldr	r2, [pc, #88]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d004      	beq.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a15      	ldr	r2, [pc, #84]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10c      	bne.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006706:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	40010000 	.word	0x40010000
 800673c:	40010400 	.word	0x40010400
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800
 8006748:	40000c00 	.word	0x40000c00
 800674c:	40014000 	.word	0x40014000
 8006750:	40001800 	.word	0x40001800

08006754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e040      	b.n	8006824 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fc f834 	bl	8002820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2224      	movs	r2, #36	; 0x24
 80067bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0201 	bic.w	r2, r2, #1
 80067cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fbf2 	bl	8006fb8 <UART_SetConfig>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e022      	b.n	8006824 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fe48 	bl	800747c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800680a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fecf 	bl	80075c0 <UART_CheckIdleState>
 8006822:	4603      	mov	r3, r0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800682c:	b480      	push	{r7}
 800682e:	b08b      	sub	sp, #44	; 0x2c
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800683e:	2b20      	cmp	r3, #32
 8006840:	d156      	bne.n	80068f0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <HAL_UART_Transmit_IT+0x22>
 8006848:	88fb      	ldrh	r3, [r7, #6]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e04f      	b.n	80068f2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_UART_Transmit_IT+0x34>
 800685c:	2302      	movs	r3, #2
 800685e:	e048      	b.n	80068f2 <HAL_UART_Transmit_IT+0xc6>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	88fa      	ldrh	r2, [r7, #6]
 8006872:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	88fa      	ldrh	r2, [r7, #6]
 800687a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2221      	movs	r2, #33	; 0x21
 8006890:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689a:	d107      	bne.n	80068ac <HAL_UART_Transmit_IT+0x80>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d103      	bne.n	80068ac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4a16      	ldr	r2, [pc, #88]	; (8006900 <HAL_UART_Transmit_IT+0xd4>)
 80068a8:	669a      	str	r2, [r3, #104]	; 0x68
 80068aa:	e002      	b.n	80068b2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4a15      	ldr	r2, [pc, #84]	; (8006904 <HAL_UART_Transmit_IT+0xd8>)
 80068b0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	613b      	str	r3, [r7, #16]
   return(result);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	69f9      	ldr	r1, [r7, #28]
 80068de:	6a3a      	ldr	r2, [r7, #32]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e000      	b.n	80068f2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	372c      	adds	r7, #44	; 0x2c
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	08007b19 	.word	0x08007b19
 8006904:	08007a63 	.word	0x08007a63

08006908 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800691a:	2b20      	cmp	r3, #32
 800691c:	d13d      	bne.n	800699a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_UART_Receive_IT+0x22>
 8006924:	88fb      	ldrh	r3, [r7, #6]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e036      	b.n	800699c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_UART_Receive_IT+0x34>
 8006938:	2302      	movs	r3, #2
 800693a:	e02f      	b.n	800699c <HAL_UART_Receive_IT+0x94>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d018      	beq.n	800698a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	613b      	str	r3, [r7, #16]
   return(result);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	623b      	str	r3, [r7, #32]
 8006978:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	69f9      	ldr	r1, [r7, #28]
 800697c:	6a3a      	ldr	r2, [r7, #32]
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	61bb      	str	r3, [r7, #24]
   return(result);
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e6      	bne.n	8006958 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800698a:	88fb      	ldrh	r3, [r7, #6]
 800698c:	461a      	mov	r2, r3
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 ff23 	bl	80077dc <UART_Start_Receive_IT>
 8006996:	4603      	mov	r3, r0
 8006998:	e000      	b.n	800699c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800699a:	2302      	movs	r3, #2
  }
}
 800699c:	4618      	mov	r0, r3
 800699e:	3728      	adds	r7, #40	; 0x28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b0ba      	sub	sp, #232	; 0xe8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80069ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80069d2:	4013      	ands	r3, r2
 80069d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80069d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d115      	bne.n	8006a0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80069e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00f      	beq.n	8006a0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d009      	beq.n	8006a0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 82a4 	beq.w	8006f4a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
      }
      return;
 8006a0a:	e29e      	b.n	8006f4a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8117 	beq.w	8006c44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a26:	4b85      	ldr	r3, [pc, #532]	; (8006c3c <HAL_UART_IRQHandler+0x298>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 810a 	beq.w	8006c44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d011      	beq.n	8006a60 <HAL_UART_IRQHandler+0xbc>
 8006a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a56:	f043 0201 	orr.w	r2, r3, #1
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d011      	beq.n	8006a90 <HAL_UART_IRQHandler+0xec>
 8006a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a86:	f043 0204 	orr.w	r2, r3, #4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d011      	beq.n	8006ac0 <HAL_UART_IRQHandler+0x11c>
 8006a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2204      	movs	r2, #4
 8006aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ab6:	f043 0202 	orr.w	r2, r3, #2
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d017      	beq.n	8006afc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d105      	bne.n	8006ae4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006adc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00b      	beq.n	8006afc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2208      	movs	r2, #8
 8006aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af2:	f043 0208 	orr.w	r2, r3, #8
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d012      	beq.n	8006b2e <HAL_UART_IRQHandler+0x18a>
 8006b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00c      	beq.n	8006b2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b24:	f043 0220 	orr.w	r2, r3, #32
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 820a 	beq.w	8006f4e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d007      	beq.n	8006b62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b76:	2b40      	cmp	r3, #64	; 0x40
 8006b78:	d005      	beq.n	8006b86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d04f      	beq.n	8006c26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fef2 	bl	8007970 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b96:	2b40      	cmp	r3, #64	; 0x40
 8006b98:	d141      	bne.n	8006c1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1d9      	bne.n	8006b9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d013      	beq.n	8006c16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	4a13      	ldr	r2, [pc, #76]	; (8006c40 <HAL_UART_IRQHandler+0x29c>)
 8006bf4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fd fac8 	bl	8004190 <HAL_DMA_Abort_IT>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d017      	beq.n	8006c36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006c10:	4610      	mov	r0, r2
 8006c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c14:	e00f      	b.n	8006c36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f9ae 	bl	8006f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	e00b      	b.n	8006c36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f9aa 	bl	8006f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c24:	e007      	b.n	8006c36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f9a6 	bl	8006f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006c34:	e18b      	b.n	8006f4e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c36:	bf00      	nop
    return;
 8006c38:	e189      	b.n	8006f4e <HAL_UART_IRQHandler+0x5aa>
 8006c3a:	bf00      	nop
 8006c3c:	04000120 	.word	0x04000120
 8006c40:	08007a37 	.word	0x08007a37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	f040 8144 	bne.w	8006ed6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 813d 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8136 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2210      	movs	r2, #16
 8006c70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	f040 80b2 	bne.w	8006de6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 815d 	beq.w	8006f52 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	f080 8155 	bcs.w	8006f52 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbc:	f000 8085 	beq.w	8006dca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1da      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e1      	bne.n	8006d0a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d50:	e853 3f00 	ldrex	r3, [r3]
 8006d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3308      	adds	r3, #8
 8006d66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e3      	bne.n	8006d46 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d9a:	f023 0310 	bic.w	r3, r3, #16
 8006d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dac:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e4      	bne.n	8006d8a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd f973 	bl	80040b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f8d4 	bl	8006f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006de4:	e0b5      	b.n	8006f52 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 80a7 	beq.w	8006f56 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80a2 	beq.w	8006f56 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e34:	647b      	str	r3, [r7, #68]	; 0x44
 8006e36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e4      	bne.n	8006e12 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	623b      	str	r3, [r7, #32]
   return(result);
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e3      	bne.n	8006e48 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0310 	bic.w	r3, r3, #16
 8006ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	69b9      	ldr	r1, [r7, #24]
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e4      	bne.n	8006e92 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ec8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f85c 	bl	8006f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ed4:	e03f      	b.n	8006f56 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00e      	beq.n	8006f00 <HAL_UART_IRQHandler+0x55c>
 8006ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d008      	beq.n	8006f00 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ef6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f853 	bl	8006fa4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006efe:	e02d      	b.n	8006f5c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00e      	beq.n	8006f2a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01c      	beq.n	8006f5a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
    }
    return;
 8006f28:	e017      	b.n	8006f5a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d012      	beq.n	8006f5c <HAL_UART_IRQHandler+0x5b8>
 8006f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00c      	beq.n	8006f5c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fe48 	bl	8007bd8 <UART_EndTransmit_IT>
    return;
 8006f48:	e008      	b.n	8006f5c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006f4a:	bf00      	nop
 8006f4c:	e006      	b.n	8006f5c <HAL_UART_IRQHandler+0x5b8>
    return;
 8006f4e:	bf00      	nop
 8006f50:	e004      	b.n	8006f5c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006f52:	bf00      	nop
 8006f54:	e002      	b.n	8006f5c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006f56:	bf00      	nop
 8006f58:	e000      	b.n	8006f5c <HAL_UART_IRQHandler+0x5b8>
    return;
 8006f5a:	bf00      	nop
  }

}
 8006f5c:	37e8      	adds	r7, #232	; 0xe8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop

08006f64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4ba7      	ldr	r3, [pc, #668]	; (8007280 <UART_SetConfig+0x2c8>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	6979      	ldr	r1, [r7, #20]
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	430a      	orrs	r2, r1
 8007028:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a95      	ldr	r2, [pc, #596]	; (8007284 <UART_SetConfig+0x2cc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d120      	bne.n	8007076 <UART_SetConfig+0xbe>
 8007034:	4b94      	ldr	r3, [pc, #592]	; (8007288 <UART_SetConfig+0x2d0>)
 8007036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b03      	cmp	r3, #3
 8007040:	d816      	bhi.n	8007070 <UART_SetConfig+0xb8>
 8007042:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <UART_SetConfig+0x90>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	08007059 	.word	0x08007059
 800704c:	08007065 	.word	0x08007065
 8007050:	0800705f 	.word	0x0800705f
 8007054:	0800706b 	.word	0x0800706b
 8007058:	2301      	movs	r3, #1
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	e14f      	b.n	80072fe <UART_SetConfig+0x346>
 800705e:	2302      	movs	r3, #2
 8007060:	77fb      	strb	r3, [r7, #31]
 8007062:	e14c      	b.n	80072fe <UART_SetConfig+0x346>
 8007064:	2304      	movs	r3, #4
 8007066:	77fb      	strb	r3, [r7, #31]
 8007068:	e149      	b.n	80072fe <UART_SetConfig+0x346>
 800706a:	2308      	movs	r3, #8
 800706c:	77fb      	strb	r3, [r7, #31]
 800706e:	e146      	b.n	80072fe <UART_SetConfig+0x346>
 8007070:	2310      	movs	r3, #16
 8007072:	77fb      	strb	r3, [r7, #31]
 8007074:	e143      	b.n	80072fe <UART_SetConfig+0x346>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a84      	ldr	r2, [pc, #528]	; (800728c <UART_SetConfig+0x2d4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d132      	bne.n	80070e6 <UART_SetConfig+0x12e>
 8007080:	4b81      	ldr	r3, [pc, #516]	; (8007288 <UART_SetConfig+0x2d0>)
 8007082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007086:	f003 030c 	and.w	r3, r3, #12
 800708a:	2b0c      	cmp	r3, #12
 800708c:	d828      	bhi.n	80070e0 <UART_SetConfig+0x128>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <UART_SetConfig+0xdc>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070c9 	.word	0x080070c9
 8007098:	080070e1 	.word	0x080070e1
 800709c:	080070e1 	.word	0x080070e1
 80070a0:	080070e1 	.word	0x080070e1
 80070a4:	080070d5 	.word	0x080070d5
 80070a8:	080070e1 	.word	0x080070e1
 80070ac:	080070e1 	.word	0x080070e1
 80070b0:	080070e1 	.word	0x080070e1
 80070b4:	080070cf 	.word	0x080070cf
 80070b8:	080070e1 	.word	0x080070e1
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070e1 	.word	0x080070e1
 80070c4:	080070db 	.word	0x080070db
 80070c8:	2300      	movs	r3, #0
 80070ca:	77fb      	strb	r3, [r7, #31]
 80070cc:	e117      	b.n	80072fe <UART_SetConfig+0x346>
 80070ce:	2302      	movs	r3, #2
 80070d0:	77fb      	strb	r3, [r7, #31]
 80070d2:	e114      	b.n	80072fe <UART_SetConfig+0x346>
 80070d4:	2304      	movs	r3, #4
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e111      	b.n	80072fe <UART_SetConfig+0x346>
 80070da:	2308      	movs	r3, #8
 80070dc:	77fb      	strb	r3, [r7, #31]
 80070de:	e10e      	b.n	80072fe <UART_SetConfig+0x346>
 80070e0:	2310      	movs	r3, #16
 80070e2:	77fb      	strb	r3, [r7, #31]
 80070e4:	e10b      	b.n	80072fe <UART_SetConfig+0x346>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a69      	ldr	r2, [pc, #420]	; (8007290 <UART_SetConfig+0x2d8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d120      	bne.n	8007132 <UART_SetConfig+0x17a>
 80070f0:	4b65      	ldr	r3, [pc, #404]	; (8007288 <UART_SetConfig+0x2d0>)
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070fa:	2b30      	cmp	r3, #48	; 0x30
 80070fc:	d013      	beq.n	8007126 <UART_SetConfig+0x16e>
 80070fe:	2b30      	cmp	r3, #48	; 0x30
 8007100:	d814      	bhi.n	800712c <UART_SetConfig+0x174>
 8007102:	2b20      	cmp	r3, #32
 8007104:	d009      	beq.n	800711a <UART_SetConfig+0x162>
 8007106:	2b20      	cmp	r3, #32
 8007108:	d810      	bhi.n	800712c <UART_SetConfig+0x174>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <UART_SetConfig+0x15c>
 800710e:	2b10      	cmp	r3, #16
 8007110:	d006      	beq.n	8007120 <UART_SetConfig+0x168>
 8007112:	e00b      	b.n	800712c <UART_SetConfig+0x174>
 8007114:	2300      	movs	r3, #0
 8007116:	77fb      	strb	r3, [r7, #31]
 8007118:	e0f1      	b.n	80072fe <UART_SetConfig+0x346>
 800711a:	2302      	movs	r3, #2
 800711c:	77fb      	strb	r3, [r7, #31]
 800711e:	e0ee      	b.n	80072fe <UART_SetConfig+0x346>
 8007120:	2304      	movs	r3, #4
 8007122:	77fb      	strb	r3, [r7, #31]
 8007124:	e0eb      	b.n	80072fe <UART_SetConfig+0x346>
 8007126:	2308      	movs	r3, #8
 8007128:	77fb      	strb	r3, [r7, #31]
 800712a:	e0e8      	b.n	80072fe <UART_SetConfig+0x346>
 800712c:	2310      	movs	r3, #16
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	e0e5      	b.n	80072fe <UART_SetConfig+0x346>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a57      	ldr	r2, [pc, #348]	; (8007294 <UART_SetConfig+0x2dc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d120      	bne.n	800717e <UART_SetConfig+0x1c6>
 800713c:	4b52      	ldr	r3, [pc, #328]	; (8007288 <UART_SetConfig+0x2d0>)
 800713e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007142:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007146:	2bc0      	cmp	r3, #192	; 0xc0
 8007148:	d013      	beq.n	8007172 <UART_SetConfig+0x1ba>
 800714a:	2bc0      	cmp	r3, #192	; 0xc0
 800714c:	d814      	bhi.n	8007178 <UART_SetConfig+0x1c0>
 800714e:	2b80      	cmp	r3, #128	; 0x80
 8007150:	d009      	beq.n	8007166 <UART_SetConfig+0x1ae>
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d810      	bhi.n	8007178 <UART_SetConfig+0x1c0>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <UART_SetConfig+0x1a8>
 800715a:	2b40      	cmp	r3, #64	; 0x40
 800715c:	d006      	beq.n	800716c <UART_SetConfig+0x1b4>
 800715e:	e00b      	b.n	8007178 <UART_SetConfig+0x1c0>
 8007160:	2300      	movs	r3, #0
 8007162:	77fb      	strb	r3, [r7, #31]
 8007164:	e0cb      	b.n	80072fe <UART_SetConfig+0x346>
 8007166:	2302      	movs	r3, #2
 8007168:	77fb      	strb	r3, [r7, #31]
 800716a:	e0c8      	b.n	80072fe <UART_SetConfig+0x346>
 800716c:	2304      	movs	r3, #4
 800716e:	77fb      	strb	r3, [r7, #31]
 8007170:	e0c5      	b.n	80072fe <UART_SetConfig+0x346>
 8007172:	2308      	movs	r3, #8
 8007174:	77fb      	strb	r3, [r7, #31]
 8007176:	e0c2      	b.n	80072fe <UART_SetConfig+0x346>
 8007178:	2310      	movs	r3, #16
 800717a:	77fb      	strb	r3, [r7, #31]
 800717c:	e0bf      	b.n	80072fe <UART_SetConfig+0x346>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a45      	ldr	r2, [pc, #276]	; (8007298 <UART_SetConfig+0x2e0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d125      	bne.n	80071d4 <UART_SetConfig+0x21c>
 8007188:	4b3f      	ldr	r3, [pc, #252]	; (8007288 <UART_SetConfig+0x2d0>)
 800718a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007196:	d017      	beq.n	80071c8 <UART_SetConfig+0x210>
 8007198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719c:	d817      	bhi.n	80071ce <UART_SetConfig+0x216>
 800719e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a2:	d00b      	beq.n	80071bc <UART_SetConfig+0x204>
 80071a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a8:	d811      	bhi.n	80071ce <UART_SetConfig+0x216>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <UART_SetConfig+0x1fe>
 80071ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b2:	d006      	beq.n	80071c2 <UART_SetConfig+0x20a>
 80071b4:	e00b      	b.n	80071ce <UART_SetConfig+0x216>
 80071b6:	2300      	movs	r3, #0
 80071b8:	77fb      	strb	r3, [r7, #31]
 80071ba:	e0a0      	b.n	80072fe <UART_SetConfig+0x346>
 80071bc:	2302      	movs	r3, #2
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	e09d      	b.n	80072fe <UART_SetConfig+0x346>
 80071c2:	2304      	movs	r3, #4
 80071c4:	77fb      	strb	r3, [r7, #31]
 80071c6:	e09a      	b.n	80072fe <UART_SetConfig+0x346>
 80071c8:	2308      	movs	r3, #8
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e097      	b.n	80072fe <UART_SetConfig+0x346>
 80071ce:	2310      	movs	r3, #16
 80071d0:	77fb      	strb	r3, [r7, #31]
 80071d2:	e094      	b.n	80072fe <UART_SetConfig+0x346>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a30      	ldr	r2, [pc, #192]	; (800729c <UART_SetConfig+0x2e4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d125      	bne.n	800722a <UART_SetConfig+0x272>
 80071de:	4b2a      	ldr	r3, [pc, #168]	; (8007288 <UART_SetConfig+0x2d0>)
 80071e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071ec:	d017      	beq.n	800721e <UART_SetConfig+0x266>
 80071ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f2:	d817      	bhi.n	8007224 <UART_SetConfig+0x26c>
 80071f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f8:	d00b      	beq.n	8007212 <UART_SetConfig+0x25a>
 80071fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fe:	d811      	bhi.n	8007224 <UART_SetConfig+0x26c>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <UART_SetConfig+0x254>
 8007204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007208:	d006      	beq.n	8007218 <UART_SetConfig+0x260>
 800720a:	e00b      	b.n	8007224 <UART_SetConfig+0x26c>
 800720c:	2301      	movs	r3, #1
 800720e:	77fb      	strb	r3, [r7, #31]
 8007210:	e075      	b.n	80072fe <UART_SetConfig+0x346>
 8007212:	2302      	movs	r3, #2
 8007214:	77fb      	strb	r3, [r7, #31]
 8007216:	e072      	b.n	80072fe <UART_SetConfig+0x346>
 8007218:	2304      	movs	r3, #4
 800721a:	77fb      	strb	r3, [r7, #31]
 800721c:	e06f      	b.n	80072fe <UART_SetConfig+0x346>
 800721e:	2308      	movs	r3, #8
 8007220:	77fb      	strb	r3, [r7, #31]
 8007222:	e06c      	b.n	80072fe <UART_SetConfig+0x346>
 8007224:	2310      	movs	r3, #16
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e069      	b.n	80072fe <UART_SetConfig+0x346>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a1c      	ldr	r2, [pc, #112]	; (80072a0 <UART_SetConfig+0x2e8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d137      	bne.n	80072a4 <UART_SetConfig+0x2ec>
 8007234:	4b14      	ldr	r3, [pc, #80]	; (8007288 <UART_SetConfig+0x2d0>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800723e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007242:	d017      	beq.n	8007274 <UART_SetConfig+0x2bc>
 8007244:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007248:	d817      	bhi.n	800727a <UART_SetConfig+0x2c2>
 800724a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800724e:	d00b      	beq.n	8007268 <UART_SetConfig+0x2b0>
 8007250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007254:	d811      	bhi.n	800727a <UART_SetConfig+0x2c2>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <UART_SetConfig+0x2aa>
 800725a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725e:	d006      	beq.n	800726e <UART_SetConfig+0x2b6>
 8007260:	e00b      	b.n	800727a <UART_SetConfig+0x2c2>
 8007262:	2300      	movs	r3, #0
 8007264:	77fb      	strb	r3, [r7, #31]
 8007266:	e04a      	b.n	80072fe <UART_SetConfig+0x346>
 8007268:	2302      	movs	r3, #2
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e047      	b.n	80072fe <UART_SetConfig+0x346>
 800726e:	2304      	movs	r3, #4
 8007270:	77fb      	strb	r3, [r7, #31]
 8007272:	e044      	b.n	80072fe <UART_SetConfig+0x346>
 8007274:	2308      	movs	r3, #8
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e041      	b.n	80072fe <UART_SetConfig+0x346>
 800727a:	2310      	movs	r3, #16
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e03e      	b.n	80072fe <UART_SetConfig+0x346>
 8007280:	efff69f3 	.word	0xefff69f3
 8007284:	40011000 	.word	0x40011000
 8007288:	40023800 	.word	0x40023800
 800728c:	40004400 	.word	0x40004400
 8007290:	40004800 	.word	0x40004800
 8007294:	40004c00 	.word	0x40004c00
 8007298:	40005000 	.word	0x40005000
 800729c:	40011400 	.word	0x40011400
 80072a0:	40007800 	.word	0x40007800
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a71      	ldr	r2, [pc, #452]	; (8007470 <UART_SetConfig+0x4b8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d125      	bne.n	80072fa <UART_SetConfig+0x342>
 80072ae:	4b71      	ldr	r3, [pc, #452]	; (8007474 <UART_SetConfig+0x4bc>)
 80072b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80072b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072bc:	d017      	beq.n	80072ee <UART_SetConfig+0x336>
 80072be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072c2:	d817      	bhi.n	80072f4 <UART_SetConfig+0x33c>
 80072c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c8:	d00b      	beq.n	80072e2 <UART_SetConfig+0x32a>
 80072ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ce:	d811      	bhi.n	80072f4 <UART_SetConfig+0x33c>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <UART_SetConfig+0x324>
 80072d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d8:	d006      	beq.n	80072e8 <UART_SetConfig+0x330>
 80072da:	e00b      	b.n	80072f4 <UART_SetConfig+0x33c>
 80072dc:	2300      	movs	r3, #0
 80072de:	77fb      	strb	r3, [r7, #31]
 80072e0:	e00d      	b.n	80072fe <UART_SetConfig+0x346>
 80072e2:	2302      	movs	r3, #2
 80072e4:	77fb      	strb	r3, [r7, #31]
 80072e6:	e00a      	b.n	80072fe <UART_SetConfig+0x346>
 80072e8:	2304      	movs	r3, #4
 80072ea:	77fb      	strb	r3, [r7, #31]
 80072ec:	e007      	b.n	80072fe <UART_SetConfig+0x346>
 80072ee:	2308      	movs	r3, #8
 80072f0:	77fb      	strb	r3, [r7, #31]
 80072f2:	e004      	b.n	80072fe <UART_SetConfig+0x346>
 80072f4:	2310      	movs	r3, #16
 80072f6:	77fb      	strb	r3, [r7, #31]
 80072f8:	e001      	b.n	80072fe <UART_SetConfig+0x346>
 80072fa:	2310      	movs	r3, #16
 80072fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007306:	d15a      	bne.n	80073be <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007308:	7ffb      	ldrb	r3, [r7, #31]
 800730a:	2b08      	cmp	r3, #8
 800730c:	d827      	bhi.n	800735e <UART_SetConfig+0x3a6>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x35c>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007339 	.word	0x08007339
 8007318:	08007341 	.word	0x08007341
 800731c:	08007349 	.word	0x08007349
 8007320:	0800735f 	.word	0x0800735f
 8007324:	0800734f 	.word	0x0800734f
 8007328:	0800735f 	.word	0x0800735f
 800732c:	0800735f 	.word	0x0800735f
 8007330:	0800735f 	.word	0x0800735f
 8007334:	08007357 	.word	0x08007357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007338:	f7fe f86a 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 800733c:	61b8      	str	r0, [r7, #24]
        break;
 800733e:	e013      	b.n	8007368 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007340:	f7fe f87a 	bl	8005438 <HAL_RCC_GetPCLK2Freq>
 8007344:	61b8      	str	r0, [r7, #24]
        break;
 8007346:	e00f      	b.n	8007368 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007348:	4b4b      	ldr	r3, [pc, #300]	; (8007478 <UART_SetConfig+0x4c0>)
 800734a:	61bb      	str	r3, [r7, #24]
        break;
 800734c:	e00c      	b.n	8007368 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734e:	f7fd ff73 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 8007352:	61b8      	str	r0, [r7, #24]
        break;
 8007354:	e008      	b.n	8007368 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800735a:	61bb      	str	r3, [r7, #24]
        break;
 800735c:	e004      	b.n	8007368 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	77bb      	strb	r3, [r7, #30]
        break;
 8007366:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d074      	beq.n	8007458 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	005a      	lsls	r2, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	085b      	lsrs	r3, r3, #1
 8007378:	441a      	add	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007382:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	2b0f      	cmp	r3, #15
 8007388:	d916      	bls.n	80073b8 <UART_SetConfig+0x400>
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007390:	d212      	bcs.n	80073b8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	b29b      	uxth	r3, r3
 8007396:	f023 030f 	bic.w	r3, r3, #15
 800739a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	085b      	lsrs	r3, r3, #1
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	89fb      	ldrh	r3, [r7, #14]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	89fa      	ldrh	r2, [r7, #14]
 80073b4:	60da      	str	r2, [r3, #12]
 80073b6:	e04f      	b.n	8007458 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	77bb      	strb	r3, [r7, #30]
 80073bc:	e04c      	b.n	8007458 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073be:	7ffb      	ldrb	r3, [r7, #31]
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d828      	bhi.n	8007416 <UART_SetConfig+0x45e>
 80073c4:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <UART_SetConfig+0x414>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	080073f1 	.word	0x080073f1
 80073d0:	080073f9 	.word	0x080073f9
 80073d4:	08007401 	.word	0x08007401
 80073d8:	08007417 	.word	0x08007417
 80073dc:	08007407 	.word	0x08007407
 80073e0:	08007417 	.word	0x08007417
 80073e4:	08007417 	.word	0x08007417
 80073e8:	08007417 	.word	0x08007417
 80073ec:	0800740f 	.word	0x0800740f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f0:	f7fe f80e 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 80073f4:	61b8      	str	r0, [r7, #24]
        break;
 80073f6:	e013      	b.n	8007420 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f8:	f7fe f81e 	bl	8005438 <HAL_RCC_GetPCLK2Freq>
 80073fc:	61b8      	str	r0, [r7, #24]
        break;
 80073fe:	e00f      	b.n	8007420 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007400:	4b1d      	ldr	r3, [pc, #116]	; (8007478 <UART_SetConfig+0x4c0>)
 8007402:	61bb      	str	r3, [r7, #24]
        break;
 8007404:	e00c      	b.n	8007420 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007406:	f7fd ff17 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 800740a:	61b8      	str	r0, [r7, #24]
        break;
 800740c:	e008      	b.n	8007420 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800740e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007412:	61bb      	str	r3, [r7, #24]
        break;
 8007414:	e004      	b.n	8007420 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	77bb      	strb	r3, [r7, #30]
        break;
 800741e:	bf00      	nop
    }

    if (pclk != 0U)
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d018      	beq.n	8007458 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	085a      	lsrs	r2, r3, #1
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	441a      	add	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	fbb2 f3f3 	udiv	r3, r2, r3
 8007438:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	2b0f      	cmp	r3, #15
 800743e:	d909      	bls.n	8007454 <UART_SetConfig+0x49c>
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007446:	d205      	bcs.n	8007454 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	b29a      	uxth	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60da      	str	r2, [r3, #12]
 8007452:	e001      	b.n	8007458 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007464:	7fbb      	ldrb	r3, [r7, #30]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	40007c00 	.word	0x40007c00
 8007474:	40023800 	.word	0x40023800
 8007478:	00f42400 	.word	0x00f42400

0800747c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00a      	beq.n	80074ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	f003 0308 	and.w	r3, r3, #8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	f003 0310 	and.w	r3, r3, #16
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00a      	beq.n	800752e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01a      	beq.n	8007592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800757a:	d10a      	bne.n	8007592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	605a      	str	r2, [r3, #4]
  }
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075d0:	f7fb fb8e 	bl	8002cf0 <HAL_GetTick>
 80075d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d10e      	bne.n	8007602 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f82d 	bl	8007652 <UART_WaitOnFlagUntilTimeout>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e023      	b.n	800764a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b04      	cmp	r3, #4
 800760e:	d10e      	bne.n	800762e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f817 	bl	8007652 <UART_WaitOnFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e00d      	b.n	800764a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b09c      	sub	sp, #112	; 0x70
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	603b      	str	r3, [r7, #0]
 800765e:	4613      	mov	r3, r2
 8007660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007662:	e0a5      	b.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766a:	f000 80a1 	beq.w	80077b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800766e:	f7fb fb3f 	bl	8002cf0 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800767a:	429a      	cmp	r2, r3
 800767c:	d302      	bcc.n	8007684 <UART_WaitOnFlagUntilTimeout+0x32>
 800767e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007680:	2b00      	cmp	r3, #0
 8007682:	d13e      	bne.n	8007702 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007694:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007698:	667b      	str	r3, [r7, #100]	; 0x64
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e6      	bne.n	8007684 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	663b      	str	r3, [r7, #96]	; 0x60
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80076d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e5      	bne.n	80076b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2220      	movs	r2, #32
 80076ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e067      	b.n	80077d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d04f      	beq.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800771a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800771e:	d147      	bne.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007728:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800773e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007748:	637b      	str	r3, [r7, #52]	; 0x34
 800774a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800774e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e6      	bne.n	800772a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3308      	adds	r3, #8
 8007762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	613b      	str	r3, [r7, #16]
   return(result);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f023 0301 	bic.w	r3, r3, #1
 8007772:	66bb      	str	r3, [r7, #104]	; 0x68
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3308      	adds	r3, #8
 800777a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800777c:	623a      	str	r2, [r7, #32]
 800777e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	69f9      	ldr	r1, [r7, #28]
 8007782:	6a3a      	ldr	r2, [r7, #32]
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	61bb      	str	r3, [r7, #24]
   return(result);
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e5      	bne.n	800775c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e010      	b.n	80077d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	69da      	ldr	r2, [r3, #28]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	4013      	ands	r3, r2
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	429a      	cmp	r2, r3
 80077be:	bf0c      	ite	eq
 80077c0:	2301      	moveq	r3, #1
 80077c2:	2300      	movne	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	f43f af4a 	beq.w	8007664 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3770      	adds	r7, #112	; 0x70
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077dc:	b480      	push	{r7}
 80077de:	b097      	sub	sp, #92	; 0x5c
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	88fa      	ldrh	r2, [r7, #6]
 80077f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780e:	d10e      	bne.n	800782e <UART_Start_Receive_IT+0x52>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d105      	bne.n	8007824 <UART_Start_Receive_IT+0x48>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800781e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007822:	e02d      	b.n	8007880 <UART_Start_Receive_IT+0xa4>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	22ff      	movs	r2, #255	; 0xff
 8007828:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800782c:	e028      	b.n	8007880 <UART_Start_Receive_IT+0xa4>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10d      	bne.n	8007852 <UART_Start_Receive_IT+0x76>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d104      	bne.n	8007848 <UART_Start_Receive_IT+0x6c>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	22ff      	movs	r2, #255	; 0xff
 8007842:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007846:	e01b      	b.n	8007880 <UART_Start_Receive_IT+0xa4>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	227f      	movs	r2, #127	; 0x7f
 800784c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007850:	e016      	b.n	8007880 <UART_Start_Receive_IT+0xa4>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800785a:	d10d      	bne.n	8007878 <UART_Start_Receive_IT+0x9c>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d104      	bne.n	800786e <UART_Start_Receive_IT+0x92>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	227f      	movs	r2, #127	; 0x7f
 8007868:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800786c:	e008      	b.n	8007880 <UART_Start_Receive_IT+0xa4>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	223f      	movs	r2, #63	; 0x3f
 8007872:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007876:	e003      	b.n	8007880 <UART_Start_Receive_IT+0xa4>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2222      	movs	r2, #34	; 0x22
 800788c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	f043 0301 	orr.w	r3, r3, #1
 80078a4:	657b      	str	r3, [r7, #84]	; 0x54
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3308      	adds	r3, #8
 80078ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80078b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e5      	bne.n	800788e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ca:	d107      	bne.n	80078dc <UART_Start_Receive_IT+0x100>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d103      	bne.n	80078dc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4a24      	ldr	r2, [pc, #144]	; (8007968 <UART_Start_Receive_IT+0x18c>)
 80078d8:	665a      	str	r2, [r3, #100]	; 0x64
 80078da:	e002      	b.n	80078e2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4a23      	ldr	r2, [pc, #140]	; (800796c <UART_Start_Receive_IT+0x190>)
 80078e0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d019      	beq.n	8007926 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007910:	637b      	str	r3, [r7, #52]	; 0x34
 8007912:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e6      	bne.n	80078f2 <UART_Start_Receive_IT+0x116>
 8007924:	e018      	b.n	8007958 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	613b      	str	r3, [r7, #16]
   return(result);
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f043 0320 	orr.w	r3, r3, #32
 800793a:	653b      	str	r3, [r7, #80]	; 0x50
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	461a      	mov	r2, r3
 8007942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007944:	623b      	str	r3, [r7, #32]
 8007946:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	69f9      	ldr	r1, [r7, #28]
 800794a:	6a3a      	ldr	r2, [r7, #32]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	61bb      	str	r3, [r7, #24]
   return(result);
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e6      	bne.n	8007926 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	375c      	adds	r7, #92	; 0x5c
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	08007d89 	.word	0x08007d89
 800796c:	08007c2d 	.word	0x08007c2d

08007970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007970:	b480      	push	{r7}
 8007972:	b095      	sub	sp, #84	; 0x54
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800798c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007996:	643b      	str	r3, [r7, #64]	; 0x40
 8007998:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800799c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e6      	bne.n	8007978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3308      	adds	r3, #8
 80079b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	f023 0301 	bic.w	r3, r3, #1
 80079c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3308      	adds	r3, #8
 80079c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e5      	bne.n	80079aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d118      	bne.n	8007a18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f023 0310 	bic.w	r3, r3, #16
 80079fa:	647b      	str	r3, [r7, #68]	; 0x44
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6979      	ldr	r1, [r7, #20]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	613b      	str	r3, [r7, #16]
   return(result);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e6      	bne.n	80079e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007a2a:	bf00      	nop
 8007a2c:	3754      	adds	r7, #84	; 0x54
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f7ff fa8f 	bl	8006f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b08f      	sub	sp, #60	; 0x3c
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a6e:	2b21      	cmp	r3, #33	; 0x21
 8007a70:	d14c      	bne.n	8007b0c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d132      	bne.n	8007ae4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a9e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6979      	ldr	r1, [r7, #20]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	613b      	str	r3, [r7, #16]
   return(result);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e6      	bne.n	8007ab0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007ae2:	e013      	b.n	8007b0c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae8:	781a      	ldrb	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007b0c:	bf00      	nop
 8007b0e:	373c      	adds	r7, #60	; 0x3c
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b091      	sub	sp, #68	; 0x44
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b24:	2b21      	cmp	r3, #33	; 0x21
 8007b26:	d151      	bne.n	8007bcc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d132      	bne.n	8007b9a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	623b      	str	r3, [r7, #32]
   return(result);
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	633b      	str	r3, [r7, #48]	; 0x30
 8007b54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e6      	bne.n	8007b34 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b84:	61fb      	str	r3, [r7, #28]
 8007b86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	69b9      	ldr	r1, [r7, #24]
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	617b      	str	r3, [r7, #20]
   return(result);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e6      	bne.n	8007b66 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007b98:	e018      	b.n	8007bcc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb4:	1c9a      	adds	r2, r3, #2
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007bcc:	bf00      	nop
 8007bce:	3744      	adds	r7, #68	; 0x44
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bf4:	61fb      	str	r3, [r7, #28]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	61bb      	str	r3, [r7, #24]
 8007c00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6979      	ldr	r1, [r7, #20]
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e6      	bne.n	8007be0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff f9a0 	bl	8006f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c24:	bf00      	nop
 8007c26:	3720      	adds	r7, #32
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b096      	sub	sp, #88	; 0x58
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c3a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c42:	2b22      	cmp	r3, #34	; 0x22
 8007c44:	f040 8094 	bne.w	8007d70 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c52:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007c56:	b2d9      	uxtb	r1, r3
 8007c58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c62:	400a      	ands	r2, r1
 8007c64:	b2d2      	uxtb	r2, r2
 8007c66:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d177      	bne.n	8007d80 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cae:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e6      	bne.n	8007c90 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	f023 0301 	bic.w	r3, r3, #1
 8007cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3308      	adds	r3, #8
 8007ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e5      	bne.n	8007cc2 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d12e      	bne.n	8007d68 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f023 0310 	bic.w	r3, r3, #16
 8007d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	69b9      	ldr	r1, [r7, #24]
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e6      	bne.n	8007d10 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d103      	bne.n	8007d58 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2210      	movs	r2, #16
 8007d56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff f913 	bl	8006f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d66:	e00b      	b.n	8007d80 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7fa feb3 	bl	8002ad4 <HAL_UART_RxCpltCallback>
}
 8007d6e:	e007      	b.n	8007d80 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699a      	ldr	r2, [r3, #24]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0208 	orr.w	r2, r2, #8
 8007d7e:	619a      	str	r2, [r3, #24]
}
 8007d80:	bf00      	nop
 8007d82:	3758      	adds	r7, #88	; 0x58
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b096      	sub	sp, #88	; 0x58
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d96:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9e:	2b22      	cmp	r3, #34	; 0x22
 8007da0:	f040 8094 	bne.w	8007ecc <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007db4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007db8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc8:	1c9a      	adds	r2, r3, #2
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d177      	bne.n	8007edc <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e6      	bne.n	8007dec <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	f023 0301 	bic.w	r3, r3, #1
 8007e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e5      	bne.n	8007e1e <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d12e      	bne.n	8007ec4 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	e853 3f00 	ldrex	r3, [r3]
 8007e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f023 0310 	bic.w	r3, r3, #16
 8007e80:	647b      	str	r3, [r7, #68]	; 0x44
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e8a:	61bb      	str	r3, [r7, #24]
 8007e8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8e:	6979      	ldr	r1, [r7, #20]
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	613b      	str	r3, [r7, #16]
   return(result);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e6      	bne.n	8007e6c <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	f003 0310 	and.w	r3, r3, #16
 8007ea8:	2b10      	cmp	r3, #16
 8007eaa:	d103      	bne.n	8007eb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2210      	movs	r2, #16
 8007eb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff f865 	bl	8006f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ec2:	e00b      	b.n	8007edc <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7fa fe05 	bl	8002ad4 <HAL_UART_RxCpltCallback>
}
 8007eca:	e007      	b.n	8007edc <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699a      	ldr	r2, [r3, #24]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0208 	orr.w	r2, r2, #8
 8007eda:	619a      	str	r2, [r3, #24]
}
 8007edc:	bf00      	nop
 8007ede:	3758      	adds	r7, #88	; 0x58
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <__errno>:
 8007ee4:	4b01      	ldr	r3, [pc, #4]	; (8007eec <__errno+0x8>)
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	2000001c 	.word	0x2000001c

08007ef0 <__libc_init_array>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	4d0d      	ldr	r5, [pc, #52]	; (8007f28 <__libc_init_array+0x38>)
 8007ef4:	4c0d      	ldr	r4, [pc, #52]	; (8007f2c <__libc_init_array+0x3c>)
 8007ef6:	1b64      	subs	r4, r4, r5
 8007ef8:	10a4      	asrs	r4, r4, #2
 8007efa:	2600      	movs	r6, #0
 8007efc:	42a6      	cmp	r6, r4
 8007efe:	d109      	bne.n	8007f14 <__libc_init_array+0x24>
 8007f00:	4d0b      	ldr	r5, [pc, #44]	; (8007f30 <__libc_init_array+0x40>)
 8007f02:	4c0c      	ldr	r4, [pc, #48]	; (8007f34 <__libc_init_array+0x44>)
 8007f04:	f002 f8ca 	bl	800a09c <_init>
 8007f08:	1b64      	subs	r4, r4, r5
 8007f0a:	10a4      	asrs	r4, r4, #2
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	42a6      	cmp	r6, r4
 8007f10:	d105      	bne.n	8007f1e <__libc_init_array+0x2e>
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f18:	4798      	blx	r3
 8007f1a:	3601      	adds	r6, #1
 8007f1c:	e7ee      	b.n	8007efc <__libc_init_array+0xc>
 8007f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f22:	4798      	blx	r3
 8007f24:	3601      	adds	r6, #1
 8007f26:	e7f2      	b.n	8007f0e <__libc_init_array+0x1e>
 8007f28:	0800b218 	.word	0x0800b218
 8007f2c:	0800b218 	.word	0x0800b218
 8007f30:	0800b218 	.word	0x0800b218
 8007f34:	0800b21c 	.word	0x0800b21c

08007f38 <malloc>:
 8007f38:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <malloc+0xc>)
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	f000 b863 	b.w	8008008 <_malloc_r>
 8007f42:	bf00      	nop
 8007f44:	2000001c 	.word	0x2000001c

08007f48 <free>:
 8007f48:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <free+0xc>)
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	f000 b80b 	b.w	8007f68 <_free_r>
 8007f52:	bf00      	nop
 8007f54:	2000001c 	.word	0x2000001c

08007f58 <memset>:
 8007f58:	4402      	add	r2, r0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d100      	bne.n	8007f62 <memset+0xa>
 8007f60:	4770      	bx	lr
 8007f62:	f803 1b01 	strb.w	r1, [r3], #1
 8007f66:	e7f9      	b.n	8007f5c <memset+0x4>

08007f68 <_free_r>:
 8007f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f6a:	2900      	cmp	r1, #0
 8007f6c:	d048      	beq.n	8008000 <_free_r+0x98>
 8007f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f72:	9001      	str	r0, [sp, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f1a1 0404 	sub.w	r4, r1, #4
 8007f7a:	bfb8      	it	lt
 8007f7c:	18e4      	addlt	r4, r4, r3
 8007f7e:	f000 fa2b 	bl	80083d8 <__malloc_lock>
 8007f82:	4a20      	ldr	r2, [pc, #128]	; (8008004 <_free_r+0x9c>)
 8007f84:	9801      	ldr	r0, [sp, #4]
 8007f86:	6813      	ldr	r3, [r2, #0]
 8007f88:	4615      	mov	r5, r2
 8007f8a:	b933      	cbnz	r3, 8007f9a <_free_r+0x32>
 8007f8c:	6063      	str	r3, [r4, #4]
 8007f8e:	6014      	str	r4, [r2, #0]
 8007f90:	b003      	add	sp, #12
 8007f92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f96:	f000 ba25 	b.w	80083e4 <__malloc_unlock>
 8007f9a:	42a3      	cmp	r3, r4
 8007f9c:	d90b      	bls.n	8007fb6 <_free_r+0x4e>
 8007f9e:	6821      	ldr	r1, [r4, #0]
 8007fa0:	1862      	adds	r2, r4, r1
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	bf04      	itt	eq
 8007fa6:	681a      	ldreq	r2, [r3, #0]
 8007fa8:	685b      	ldreq	r3, [r3, #4]
 8007faa:	6063      	str	r3, [r4, #4]
 8007fac:	bf04      	itt	eq
 8007fae:	1852      	addeq	r2, r2, r1
 8007fb0:	6022      	streq	r2, [r4, #0]
 8007fb2:	602c      	str	r4, [r5, #0]
 8007fb4:	e7ec      	b.n	8007f90 <_free_r+0x28>
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	b10b      	cbz	r3, 8007fc0 <_free_r+0x58>
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	d9fa      	bls.n	8007fb6 <_free_r+0x4e>
 8007fc0:	6811      	ldr	r1, [r2, #0]
 8007fc2:	1855      	adds	r5, r2, r1
 8007fc4:	42a5      	cmp	r5, r4
 8007fc6:	d10b      	bne.n	8007fe0 <_free_r+0x78>
 8007fc8:	6824      	ldr	r4, [r4, #0]
 8007fca:	4421      	add	r1, r4
 8007fcc:	1854      	adds	r4, r2, r1
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	6011      	str	r1, [r2, #0]
 8007fd2:	d1dd      	bne.n	8007f90 <_free_r+0x28>
 8007fd4:	681c      	ldr	r4, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	6053      	str	r3, [r2, #4]
 8007fda:	4421      	add	r1, r4
 8007fdc:	6011      	str	r1, [r2, #0]
 8007fde:	e7d7      	b.n	8007f90 <_free_r+0x28>
 8007fe0:	d902      	bls.n	8007fe8 <_free_r+0x80>
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	6003      	str	r3, [r0, #0]
 8007fe6:	e7d3      	b.n	8007f90 <_free_r+0x28>
 8007fe8:	6825      	ldr	r5, [r4, #0]
 8007fea:	1961      	adds	r1, r4, r5
 8007fec:	428b      	cmp	r3, r1
 8007fee:	bf04      	itt	eq
 8007ff0:	6819      	ldreq	r1, [r3, #0]
 8007ff2:	685b      	ldreq	r3, [r3, #4]
 8007ff4:	6063      	str	r3, [r4, #4]
 8007ff6:	bf04      	itt	eq
 8007ff8:	1949      	addeq	r1, r1, r5
 8007ffa:	6021      	streq	r1, [r4, #0]
 8007ffc:	6054      	str	r4, [r2, #4]
 8007ffe:	e7c7      	b.n	8007f90 <_free_r+0x28>
 8008000:	b003      	add	sp, #12
 8008002:	bd30      	pop	{r4, r5, pc}
 8008004:	20000270 	.word	0x20000270

08008008 <_malloc_r>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	1ccd      	adds	r5, r1, #3
 800800c:	f025 0503 	bic.w	r5, r5, #3
 8008010:	3508      	adds	r5, #8
 8008012:	2d0c      	cmp	r5, #12
 8008014:	bf38      	it	cc
 8008016:	250c      	movcc	r5, #12
 8008018:	2d00      	cmp	r5, #0
 800801a:	4606      	mov	r6, r0
 800801c:	db01      	blt.n	8008022 <_malloc_r+0x1a>
 800801e:	42a9      	cmp	r1, r5
 8008020:	d903      	bls.n	800802a <_malloc_r+0x22>
 8008022:	230c      	movs	r3, #12
 8008024:	6033      	str	r3, [r6, #0]
 8008026:	2000      	movs	r0, #0
 8008028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800802a:	f000 f9d5 	bl	80083d8 <__malloc_lock>
 800802e:	4921      	ldr	r1, [pc, #132]	; (80080b4 <_malloc_r+0xac>)
 8008030:	680a      	ldr	r2, [r1, #0]
 8008032:	4614      	mov	r4, r2
 8008034:	b99c      	cbnz	r4, 800805e <_malloc_r+0x56>
 8008036:	4f20      	ldr	r7, [pc, #128]	; (80080b8 <_malloc_r+0xb0>)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	b923      	cbnz	r3, 8008046 <_malloc_r+0x3e>
 800803c:	4621      	mov	r1, r4
 800803e:	4630      	mov	r0, r6
 8008040:	f000 f844 	bl	80080cc <_sbrk_r>
 8008044:	6038      	str	r0, [r7, #0]
 8008046:	4629      	mov	r1, r5
 8008048:	4630      	mov	r0, r6
 800804a:	f000 f83f 	bl	80080cc <_sbrk_r>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	d123      	bne.n	800809a <_malloc_r+0x92>
 8008052:	230c      	movs	r3, #12
 8008054:	6033      	str	r3, [r6, #0]
 8008056:	4630      	mov	r0, r6
 8008058:	f000 f9c4 	bl	80083e4 <__malloc_unlock>
 800805c:	e7e3      	b.n	8008026 <_malloc_r+0x1e>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	1b5b      	subs	r3, r3, r5
 8008062:	d417      	bmi.n	8008094 <_malloc_r+0x8c>
 8008064:	2b0b      	cmp	r3, #11
 8008066:	d903      	bls.n	8008070 <_malloc_r+0x68>
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	441c      	add	r4, r3
 800806c:	6025      	str	r5, [r4, #0]
 800806e:	e004      	b.n	800807a <_malloc_r+0x72>
 8008070:	6863      	ldr	r3, [r4, #4]
 8008072:	42a2      	cmp	r2, r4
 8008074:	bf0c      	ite	eq
 8008076:	600b      	streq	r3, [r1, #0]
 8008078:	6053      	strne	r3, [r2, #4]
 800807a:	4630      	mov	r0, r6
 800807c:	f000 f9b2 	bl	80083e4 <__malloc_unlock>
 8008080:	f104 000b 	add.w	r0, r4, #11
 8008084:	1d23      	adds	r3, r4, #4
 8008086:	f020 0007 	bic.w	r0, r0, #7
 800808a:	1ac2      	subs	r2, r0, r3
 800808c:	d0cc      	beq.n	8008028 <_malloc_r+0x20>
 800808e:	1a1b      	subs	r3, r3, r0
 8008090:	50a3      	str	r3, [r4, r2]
 8008092:	e7c9      	b.n	8008028 <_malloc_r+0x20>
 8008094:	4622      	mov	r2, r4
 8008096:	6864      	ldr	r4, [r4, #4]
 8008098:	e7cc      	b.n	8008034 <_malloc_r+0x2c>
 800809a:	1cc4      	adds	r4, r0, #3
 800809c:	f024 0403 	bic.w	r4, r4, #3
 80080a0:	42a0      	cmp	r0, r4
 80080a2:	d0e3      	beq.n	800806c <_malloc_r+0x64>
 80080a4:	1a21      	subs	r1, r4, r0
 80080a6:	4630      	mov	r0, r6
 80080a8:	f000 f810 	bl	80080cc <_sbrk_r>
 80080ac:	3001      	adds	r0, #1
 80080ae:	d1dd      	bne.n	800806c <_malloc_r+0x64>
 80080b0:	e7cf      	b.n	8008052 <_malloc_r+0x4a>
 80080b2:	bf00      	nop
 80080b4:	20000270 	.word	0x20000270
 80080b8:	20000274 	.word	0x20000274

080080bc <realloc>:
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <realloc+0xc>)
 80080be:	460a      	mov	r2, r1
 80080c0:	4601      	mov	r1, r0
 80080c2:	6818      	ldr	r0, [r3, #0]
 80080c4:	f000 b994 	b.w	80083f0 <_realloc_r>
 80080c8:	2000001c 	.word	0x2000001c

080080cc <_sbrk_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d06      	ldr	r5, [pc, #24]	; (80080e8 <_sbrk_r+0x1c>)
 80080d0:	2300      	movs	r3, #0
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	602b      	str	r3, [r5, #0]
 80080d8:	f7fa f9fe 	bl	80024d8 <_sbrk>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_sbrk_r+0x1a>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_sbrk_r+0x1a>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	2000057c 	.word	0x2000057c

080080ec <sniprintf>:
 80080ec:	b40c      	push	{r2, r3}
 80080ee:	b530      	push	{r4, r5, lr}
 80080f0:	4b17      	ldr	r3, [pc, #92]	; (8008150 <sniprintf+0x64>)
 80080f2:	1e0c      	subs	r4, r1, #0
 80080f4:	681d      	ldr	r5, [r3, #0]
 80080f6:	b09d      	sub	sp, #116	; 0x74
 80080f8:	da08      	bge.n	800810c <sniprintf+0x20>
 80080fa:	238b      	movs	r3, #139	; 0x8b
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008102:	b01d      	add	sp, #116	; 0x74
 8008104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008108:	b002      	add	sp, #8
 800810a:	4770      	bx	lr
 800810c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008110:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008114:	bf14      	ite	ne
 8008116:	f104 33ff 	addne.w	r3, r4, #4294967295
 800811a:	4623      	moveq	r3, r4
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	9307      	str	r3, [sp, #28]
 8008120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008124:	9002      	str	r0, [sp, #8]
 8008126:	9006      	str	r0, [sp, #24]
 8008128:	f8ad 3016 	strh.w	r3, [sp, #22]
 800812c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800812e:	ab21      	add	r3, sp, #132	; 0x84
 8008130:	a902      	add	r1, sp, #8
 8008132:	4628      	mov	r0, r5
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	f000 f9dd 	bl	80084f4 <_svfiprintf_r>
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	bfbc      	itt	lt
 800813e:	238b      	movlt	r3, #139	; 0x8b
 8008140:	602b      	strlt	r3, [r5, #0]
 8008142:	2c00      	cmp	r4, #0
 8008144:	d0dd      	beq.n	8008102 <sniprintf+0x16>
 8008146:	9b02      	ldr	r3, [sp, #8]
 8008148:	2200      	movs	r2, #0
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	e7d9      	b.n	8008102 <sniprintf+0x16>
 800814e:	bf00      	nop
 8008150:	2000001c 	.word	0x2000001c

08008154 <siprintf>:
 8008154:	b40e      	push	{r1, r2, r3}
 8008156:	b500      	push	{lr}
 8008158:	b09c      	sub	sp, #112	; 0x70
 800815a:	ab1d      	add	r3, sp, #116	; 0x74
 800815c:	9002      	str	r0, [sp, #8]
 800815e:	9006      	str	r0, [sp, #24]
 8008160:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008164:	4809      	ldr	r0, [pc, #36]	; (800818c <siprintf+0x38>)
 8008166:	9107      	str	r1, [sp, #28]
 8008168:	9104      	str	r1, [sp, #16]
 800816a:	4909      	ldr	r1, [pc, #36]	; (8008190 <siprintf+0x3c>)
 800816c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008170:	9105      	str	r1, [sp, #20]
 8008172:	6800      	ldr	r0, [r0, #0]
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	a902      	add	r1, sp, #8
 8008178:	f000 f9bc 	bl	80084f4 <_svfiprintf_r>
 800817c:	9b02      	ldr	r3, [sp, #8]
 800817e:	2200      	movs	r2, #0
 8008180:	701a      	strb	r2, [r3, #0]
 8008182:	b01c      	add	sp, #112	; 0x70
 8008184:	f85d eb04 	ldr.w	lr, [sp], #4
 8008188:	b003      	add	sp, #12
 800818a:	4770      	bx	lr
 800818c:	2000001c 	.word	0x2000001c
 8008190:	ffff0208 	.word	0xffff0208

08008194 <strcpy>:
 8008194:	4603      	mov	r3, r0
 8008196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819a:	f803 2b01 	strb.w	r2, [r3], #1
 800819e:	2a00      	cmp	r2, #0
 80081a0:	d1f9      	bne.n	8008196 <strcpy+0x2>
 80081a2:	4770      	bx	lr

080081a4 <strtok>:
 80081a4:	4b16      	ldr	r3, [pc, #88]	; (8008200 <strtok+0x5c>)
 80081a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081a8:	681e      	ldr	r6, [r3, #0]
 80081aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80081ac:	4605      	mov	r5, r0
 80081ae:	b9fc      	cbnz	r4, 80081f0 <strtok+0x4c>
 80081b0:	2050      	movs	r0, #80	; 0x50
 80081b2:	9101      	str	r1, [sp, #4]
 80081b4:	f7ff fec0 	bl	8007f38 <malloc>
 80081b8:	9901      	ldr	r1, [sp, #4]
 80081ba:	65b0      	str	r0, [r6, #88]	; 0x58
 80081bc:	4602      	mov	r2, r0
 80081be:	b920      	cbnz	r0, 80081ca <strtok+0x26>
 80081c0:	4b10      	ldr	r3, [pc, #64]	; (8008204 <strtok+0x60>)
 80081c2:	4811      	ldr	r0, [pc, #68]	; (8008208 <strtok+0x64>)
 80081c4:	2157      	movs	r1, #87	; 0x57
 80081c6:	f000 f8d7 	bl	8008378 <__assert_func>
 80081ca:	e9c0 4400 	strd	r4, r4, [r0]
 80081ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80081d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80081d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80081da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80081de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80081e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80081e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80081ea:	6184      	str	r4, [r0, #24]
 80081ec:	7704      	strb	r4, [r0, #28]
 80081ee:	6244      	str	r4, [r0, #36]	; 0x24
 80081f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80081f2:	2301      	movs	r3, #1
 80081f4:	4628      	mov	r0, r5
 80081f6:	b002      	add	sp, #8
 80081f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081fc:	f000 b806 	b.w	800820c <__strtok_r>
 8008200:	2000001c 	.word	0x2000001c
 8008204:	0800adf0 	.word	0x0800adf0
 8008208:	0800ae07 	.word	0x0800ae07

0800820c <__strtok_r>:
 800820c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800820e:	b908      	cbnz	r0, 8008214 <__strtok_r+0x8>
 8008210:	6810      	ldr	r0, [r2, #0]
 8008212:	b188      	cbz	r0, 8008238 <__strtok_r+0x2c>
 8008214:	4604      	mov	r4, r0
 8008216:	4620      	mov	r0, r4
 8008218:	f814 5b01 	ldrb.w	r5, [r4], #1
 800821c:	460f      	mov	r7, r1
 800821e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008222:	b91e      	cbnz	r6, 800822c <__strtok_r+0x20>
 8008224:	b965      	cbnz	r5, 8008240 <__strtok_r+0x34>
 8008226:	6015      	str	r5, [r2, #0]
 8008228:	4628      	mov	r0, r5
 800822a:	e005      	b.n	8008238 <__strtok_r+0x2c>
 800822c:	42b5      	cmp	r5, r6
 800822e:	d1f6      	bne.n	800821e <__strtok_r+0x12>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f0      	bne.n	8008216 <__strtok_r+0xa>
 8008234:	6014      	str	r4, [r2, #0]
 8008236:	7003      	strb	r3, [r0, #0]
 8008238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800823a:	461c      	mov	r4, r3
 800823c:	e00c      	b.n	8008258 <__strtok_r+0x4c>
 800823e:	b915      	cbnz	r5, 8008246 <__strtok_r+0x3a>
 8008240:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008244:	460e      	mov	r6, r1
 8008246:	f816 5b01 	ldrb.w	r5, [r6], #1
 800824a:	42ab      	cmp	r3, r5
 800824c:	d1f7      	bne.n	800823e <__strtok_r+0x32>
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0f3      	beq.n	800823a <__strtok_r+0x2e>
 8008252:	2300      	movs	r3, #0
 8008254:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008258:	6014      	str	r4, [r2, #0]
 800825a:	e7ed      	b.n	8008238 <__strtok_r+0x2c>

0800825c <_strtol_l.isra.0>:
 800825c:	2b01      	cmp	r3, #1
 800825e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008262:	d001      	beq.n	8008268 <_strtol_l.isra.0+0xc>
 8008264:	2b24      	cmp	r3, #36	; 0x24
 8008266:	d906      	bls.n	8008276 <_strtol_l.isra.0+0x1a>
 8008268:	f7ff fe3c 	bl	8007ee4 <__errno>
 800826c:	2316      	movs	r3, #22
 800826e:	6003      	str	r3, [r0, #0]
 8008270:	2000      	movs	r0, #0
 8008272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008276:	4f3a      	ldr	r7, [pc, #232]	; (8008360 <_strtol_l.isra.0+0x104>)
 8008278:	468e      	mov	lr, r1
 800827a:	4676      	mov	r6, lr
 800827c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008280:	5de5      	ldrb	r5, [r4, r7]
 8008282:	f015 0508 	ands.w	r5, r5, #8
 8008286:	d1f8      	bne.n	800827a <_strtol_l.isra.0+0x1e>
 8008288:	2c2d      	cmp	r4, #45	; 0x2d
 800828a:	d134      	bne.n	80082f6 <_strtol_l.isra.0+0x9a>
 800828c:	f89e 4000 	ldrb.w	r4, [lr]
 8008290:	f04f 0801 	mov.w	r8, #1
 8008294:	f106 0e02 	add.w	lr, r6, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d05c      	beq.n	8008356 <_strtol_l.isra.0+0xfa>
 800829c:	2b10      	cmp	r3, #16
 800829e:	d10c      	bne.n	80082ba <_strtol_l.isra.0+0x5e>
 80082a0:	2c30      	cmp	r4, #48	; 0x30
 80082a2:	d10a      	bne.n	80082ba <_strtol_l.isra.0+0x5e>
 80082a4:	f89e 4000 	ldrb.w	r4, [lr]
 80082a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80082ac:	2c58      	cmp	r4, #88	; 0x58
 80082ae:	d14d      	bne.n	800834c <_strtol_l.isra.0+0xf0>
 80082b0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80082b4:	2310      	movs	r3, #16
 80082b6:	f10e 0e02 	add.w	lr, lr, #2
 80082ba:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80082be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80082c2:	2600      	movs	r6, #0
 80082c4:	fbbc f9f3 	udiv	r9, ip, r3
 80082c8:	4635      	mov	r5, r6
 80082ca:	fb03 ca19 	mls	sl, r3, r9, ip
 80082ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80082d2:	2f09      	cmp	r7, #9
 80082d4:	d818      	bhi.n	8008308 <_strtol_l.isra.0+0xac>
 80082d6:	463c      	mov	r4, r7
 80082d8:	42a3      	cmp	r3, r4
 80082da:	dd24      	ble.n	8008326 <_strtol_l.isra.0+0xca>
 80082dc:	2e00      	cmp	r6, #0
 80082de:	db1f      	blt.n	8008320 <_strtol_l.isra.0+0xc4>
 80082e0:	45a9      	cmp	r9, r5
 80082e2:	d31d      	bcc.n	8008320 <_strtol_l.isra.0+0xc4>
 80082e4:	d101      	bne.n	80082ea <_strtol_l.isra.0+0x8e>
 80082e6:	45a2      	cmp	sl, r4
 80082e8:	db1a      	blt.n	8008320 <_strtol_l.isra.0+0xc4>
 80082ea:	fb05 4503 	mla	r5, r5, r3, r4
 80082ee:	2601      	movs	r6, #1
 80082f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80082f4:	e7eb      	b.n	80082ce <_strtol_l.isra.0+0x72>
 80082f6:	2c2b      	cmp	r4, #43	; 0x2b
 80082f8:	bf08      	it	eq
 80082fa:	f89e 4000 	ldrbeq.w	r4, [lr]
 80082fe:	46a8      	mov	r8, r5
 8008300:	bf08      	it	eq
 8008302:	f106 0e02 	addeq.w	lr, r6, #2
 8008306:	e7c7      	b.n	8008298 <_strtol_l.isra.0+0x3c>
 8008308:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800830c:	2f19      	cmp	r7, #25
 800830e:	d801      	bhi.n	8008314 <_strtol_l.isra.0+0xb8>
 8008310:	3c37      	subs	r4, #55	; 0x37
 8008312:	e7e1      	b.n	80082d8 <_strtol_l.isra.0+0x7c>
 8008314:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008318:	2f19      	cmp	r7, #25
 800831a:	d804      	bhi.n	8008326 <_strtol_l.isra.0+0xca>
 800831c:	3c57      	subs	r4, #87	; 0x57
 800831e:	e7db      	b.n	80082d8 <_strtol_l.isra.0+0x7c>
 8008320:	f04f 36ff 	mov.w	r6, #4294967295
 8008324:	e7e4      	b.n	80082f0 <_strtol_l.isra.0+0x94>
 8008326:	2e00      	cmp	r6, #0
 8008328:	da05      	bge.n	8008336 <_strtol_l.isra.0+0xda>
 800832a:	2322      	movs	r3, #34	; 0x22
 800832c:	6003      	str	r3, [r0, #0]
 800832e:	4665      	mov	r5, ip
 8008330:	b942      	cbnz	r2, 8008344 <_strtol_l.isra.0+0xe8>
 8008332:	4628      	mov	r0, r5
 8008334:	e79d      	b.n	8008272 <_strtol_l.isra.0+0x16>
 8008336:	f1b8 0f00 	cmp.w	r8, #0
 800833a:	d000      	beq.n	800833e <_strtol_l.isra.0+0xe2>
 800833c:	426d      	negs	r5, r5
 800833e:	2a00      	cmp	r2, #0
 8008340:	d0f7      	beq.n	8008332 <_strtol_l.isra.0+0xd6>
 8008342:	b10e      	cbz	r6, 8008348 <_strtol_l.isra.0+0xec>
 8008344:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008348:	6011      	str	r1, [r2, #0]
 800834a:	e7f2      	b.n	8008332 <_strtol_l.isra.0+0xd6>
 800834c:	2430      	movs	r4, #48	; 0x30
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1b3      	bne.n	80082ba <_strtol_l.isra.0+0x5e>
 8008352:	2308      	movs	r3, #8
 8008354:	e7b1      	b.n	80082ba <_strtol_l.isra.0+0x5e>
 8008356:	2c30      	cmp	r4, #48	; 0x30
 8008358:	d0a4      	beq.n	80082a4 <_strtol_l.isra.0+0x48>
 800835a:	230a      	movs	r3, #10
 800835c:	e7ad      	b.n	80082ba <_strtol_l.isra.0+0x5e>
 800835e:	bf00      	nop
 8008360:	0800aea5 	.word	0x0800aea5

08008364 <strtol>:
 8008364:	4613      	mov	r3, r2
 8008366:	460a      	mov	r2, r1
 8008368:	4601      	mov	r1, r0
 800836a:	4802      	ldr	r0, [pc, #8]	; (8008374 <strtol+0x10>)
 800836c:	6800      	ldr	r0, [r0, #0]
 800836e:	f7ff bf75 	b.w	800825c <_strtol_l.isra.0>
 8008372:	bf00      	nop
 8008374:	2000001c 	.word	0x2000001c

08008378 <__assert_func>:
 8008378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800837a:	4614      	mov	r4, r2
 800837c:	461a      	mov	r2, r3
 800837e:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <__assert_func+0x2c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4605      	mov	r5, r0
 8008384:	68d8      	ldr	r0, [r3, #12]
 8008386:	b14c      	cbz	r4, 800839c <__assert_func+0x24>
 8008388:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <__assert_func+0x30>)
 800838a:	9100      	str	r1, [sp, #0]
 800838c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008390:	4906      	ldr	r1, [pc, #24]	; (80083ac <__assert_func+0x34>)
 8008392:	462b      	mov	r3, r5
 8008394:	f000 f80e 	bl	80083b4 <fiprintf>
 8008398:	f000 fd5a 	bl	8008e50 <abort>
 800839c:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <__assert_func+0x38>)
 800839e:	461c      	mov	r4, r3
 80083a0:	e7f3      	b.n	800838a <__assert_func+0x12>
 80083a2:	bf00      	nop
 80083a4:	2000001c 	.word	0x2000001c
 80083a8:	0800ae68 	.word	0x0800ae68
 80083ac:	0800ae75 	.word	0x0800ae75
 80083b0:	0800aea3 	.word	0x0800aea3

080083b4 <fiprintf>:
 80083b4:	b40e      	push	{r1, r2, r3}
 80083b6:	b503      	push	{r0, r1, lr}
 80083b8:	4601      	mov	r1, r0
 80083ba:	ab03      	add	r3, sp, #12
 80083bc:	4805      	ldr	r0, [pc, #20]	; (80083d4 <fiprintf+0x20>)
 80083be:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c2:	6800      	ldr	r0, [r0, #0]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	f000 f9bf 	bl	8008748 <_vfiprintf_r>
 80083ca:	b002      	add	sp, #8
 80083cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d0:	b003      	add	sp, #12
 80083d2:	4770      	bx	lr
 80083d4:	2000001c 	.word	0x2000001c

080083d8 <__malloc_lock>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__malloc_lock+0x8>)
 80083da:	f000 bef9 	b.w	80091d0 <__retarget_lock_acquire_recursive>
 80083de:	bf00      	nop
 80083e0:	20000584 	.word	0x20000584

080083e4 <__malloc_unlock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_unlock+0x8>)
 80083e6:	f000 bef4 	b.w	80091d2 <__retarget_lock_release_recursive>
 80083ea:	bf00      	nop
 80083ec:	20000584 	.word	0x20000584

080083f0 <_realloc_r>:
 80083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f2:	4607      	mov	r7, r0
 80083f4:	4614      	mov	r4, r2
 80083f6:	460e      	mov	r6, r1
 80083f8:	b921      	cbnz	r1, 8008404 <_realloc_r+0x14>
 80083fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083fe:	4611      	mov	r1, r2
 8008400:	f7ff be02 	b.w	8008008 <_malloc_r>
 8008404:	b922      	cbnz	r2, 8008410 <_realloc_r+0x20>
 8008406:	f7ff fdaf 	bl	8007f68 <_free_r>
 800840a:	4625      	mov	r5, r4
 800840c:	4628      	mov	r0, r5
 800840e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008410:	f000 ff6c 	bl	80092ec <_malloc_usable_size_r>
 8008414:	42a0      	cmp	r0, r4
 8008416:	d20f      	bcs.n	8008438 <_realloc_r+0x48>
 8008418:	4621      	mov	r1, r4
 800841a:	4638      	mov	r0, r7
 800841c:	f7ff fdf4 	bl	8008008 <_malloc_r>
 8008420:	4605      	mov	r5, r0
 8008422:	2800      	cmp	r0, #0
 8008424:	d0f2      	beq.n	800840c <_realloc_r+0x1c>
 8008426:	4631      	mov	r1, r6
 8008428:	4622      	mov	r2, r4
 800842a:	f000 ff37 	bl	800929c <memcpy>
 800842e:	4631      	mov	r1, r6
 8008430:	4638      	mov	r0, r7
 8008432:	f7ff fd99 	bl	8007f68 <_free_r>
 8008436:	e7e9      	b.n	800840c <_realloc_r+0x1c>
 8008438:	4635      	mov	r5, r6
 800843a:	e7e7      	b.n	800840c <_realloc_r+0x1c>

0800843c <__ssputs_r>:
 800843c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	688e      	ldr	r6, [r1, #8]
 8008442:	429e      	cmp	r6, r3
 8008444:	4682      	mov	sl, r0
 8008446:	460c      	mov	r4, r1
 8008448:	4690      	mov	r8, r2
 800844a:	461f      	mov	r7, r3
 800844c:	d838      	bhi.n	80084c0 <__ssputs_r+0x84>
 800844e:	898a      	ldrh	r2, [r1, #12]
 8008450:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008454:	d032      	beq.n	80084bc <__ssputs_r+0x80>
 8008456:	6825      	ldr	r5, [r4, #0]
 8008458:	6909      	ldr	r1, [r1, #16]
 800845a:	eba5 0901 	sub.w	r9, r5, r1
 800845e:	6965      	ldr	r5, [r4, #20]
 8008460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008468:	3301      	adds	r3, #1
 800846a:	444b      	add	r3, r9
 800846c:	106d      	asrs	r5, r5, #1
 800846e:	429d      	cmp	r5, r3
 8008470:	bf38      	it	cc
 8008472:	461d      	movcc	r5, r3
 8008474:	0553      	lsls	r3, r2, #21
 8008476:	d531      	bpl.n	80084dc <__ssputs_r+0xa0>
 8008478:	4629      	mov	r1, r5
 800847a:	f7ff fdc5 	bl	8008008 <_malloc_r>
 800847e:	4606      	mov	r6, r0
 8008480:	b950      	cbnz	r0, 8008498 <__ssputs_r+0x5c>
 8008482:	230c      	movs	r3, #12
 8008484:	f8ca 3000 	str.w	r3, [sl]
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848e:	81a3      	strh	r3, [r4, #12]
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	6921      	ldr	r1, [r4, #16]
 800849a:	464a      	mov	r2, r9
 800849c:	f000 fefe 	bl	800929c <memcpy>
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084aa:	81a3      	strh	r3, [r4, #12]
 80084ac:	6126      	str	r6, [r4, #16]
 80084ae:	6165      	str	r5, [r4, #20]
 80084b0:	444e      	add	r6, r9
 80084b2:	eba5 0509 	sub.w	r5, r5, r9
 80084b6:	6026      	str	r6, [r4, #0]
 80084b8:	60a5      	str	r5, [r4, #8]
 80084ba:	463e      	mov	r6, r7
 80084bc:	42be      	cmp	r6, r7
 80084be:	d900      	bls.n	80084c2 <__ssputs_r+0x86>
 80084c0:	463e      	mov	r6, r7
 80084c2:	4632      	mov	r2, r6
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	4641      	mov	r1, r8
 80084c8:	f000 fef6 	bl	80092b8 <memmove>
 80084cc:	68a3      	ldr	r3, [r4, #8]
 80084ce:	6822      	ldr	r2, [r4, #0]
 80084d0:	1b9b      	subs	r3, r3, r6
 80084d2:	4432      	add	r2, r6
 80084d4:	60a3      	str	r3, [r4, #8]
 80084d6:	6022      	str	r2, [r4, #0]
 80084d8:	2000      	movs	r0, #0
 80084da:	e7db      	b.n	8008494 <__ssputs_r+0x58>
 80084dc:	462a      	mov	r2, r5
 80084de:	f7ff ff87 	bl	80083f0 <_realloc_r>
 80084e2:	4606      	mov	r6, r0
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d1e1      	bne.n	80084ac <__ssputs_r+0x70>
 80084e8:	6921      	ldr	r1, [r4, #16]
 80084ea:	4650      	mov	r0, sl
 80084ec:	f7ff fd3c 	bl	8007f68 <_free_r>
 80084f0:	e7c7      	b.n	8008482 <__ssputs_r+0x46>
	...

080084f4 <_svfiprintf_r>:
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	4698      	mov	r8, r3
 80084fa:	898b      	ldrh	r3, [r1, #12]
 80084fc:	061b      	lsls	r3, r3, #24
 80084fe:	b09d      	sub	sp, #116	; 0x74
 8008500:	4607      	mov	r7, r0
 8008502:	460d      	mov	r5, r1
 8008504:	4614      	mov	r4, r2
 8008506:	d50e      	bpl.n	8008526 <_svfiprintf_r+0x32>
 8008508:	690b      	ldr	r3, [r1, #16]
 800850a:	b963      	cbnz	r3, 8008526 <_svfiprintf_r+0x32>
 800850c:	2140      	movs	r1, #64	; 0x40
 800850e:	f7ff fd7b 	bl	8008008 <_malloc_r>
 8008512:	6028      	str	r0, [r5, #0]
 8008514:	6128      	str	r0, [r5, #16]
 8008516:	b920      	cbnz	r0, 8008522 <_svfiprintf_r+0x2e>
 8008518:	230c      	movs	r3, #12
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	f04f 30ff 	mov.w	r0, #4294967295
 8008520:	e0d1      	b.n	80086c6 <_svfiprintf_r+0x1d2>
 8008522:	2340      	movs	r3, #64	; 0x40
 8008524:	616b      	str	r3, [r5, #20]
 8008526:	2300      	movs	r3, #0
 8008528:	9309      	str	r3, [sp, #36]	; 0x24
 800852a:	2320      	movs	r3, #32
 800852c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008530:	f8cd 800c 	str.w	r8, [sp, #12]
 8008534:	2330      	movs	r3, #48	; 0x30
 8008536:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086e0 <_svfiprintf_r+0x1ec>
 800853a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800853e:	f04f 0901 	mov.w	r9, #1
 8008542:	4623      	mov	r3, r4
 8008544:	469a      	mov	sl, r3
 8008546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800854a:	b10a      	cbz	r2, 8008550 <_svfiprintf_r+0x5c>
 800854c:	2a25      	cmp	r2, #37	; 0x25
 800854e:	d1f9      	bne.n	8008544 <_svfiprintf_r+0x50>
 8008550:	ebba 0b04 	subs.w	fp, sl, r4
 8008554:	d00b      	beq.n	800856e <_svfiprintf_r+0x7a>
 8008556:	465b      	mov	r3, fp
 8008558:	4622      	mov	r2, r4
 800855a:	4629      	mov	r1, r5
 800855c:	4638      	mov	r0, r7
 800855e:	f7ff ff6d 	bl	800843c <__ssputs_r>
 8008562:	3001      	adds	r0, #1
 8008564:	f000 80aa 	beq.w	80086bc <_svfiprintf_r+0x1c8>
 8008568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800856a:	445a      	add	r2, fp
 800856c:	9209      	str	r2, [sp, #36]	; 0x24
 800856e:	f89a 3000 	ldrb.w	r3, [sl]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 80a2 	beq.w	80086bc <_svfiprintf_r+0x1c8>
 8008578:	2300      	movs	r3, #0
 800857a:	f04f 32ff 	mov.w	r2, #4294967295
 800857e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008582:	f10a 0a01 	add.w	sl, sl, #1
 8008586:	9304      	str	r3, [sp, #16]
 8008588:	9307      	str	r3, [sp, #28]
 800858a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800858e:	931a      	str	r3, [sp, #104]	; 0x68
 8008590:	4654      	mov	r4, sl
 8008592:	2205      	movs	r2, #5
 8008594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008598:	4851      	ldr	r0, [pc, #324]	; (80086e0 <_svfiprintf_r+0x1ec>)
 800859a:	f7f7 fe69 	bl	8000270 <memchr>
 800859e:	9a04      	ldr	r2, [sp, #16]
 80085a0:	b9d8      	cbnz	r0, 80085da <_svfiprintf_r+0xe6>
 80085a2:	06d0      	lsls	r0, r2, #27
 80085a4:	bf44      	itt	mi
 80085a6:	2320      	movmi	r3, #32
 80085a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ac:	0711      	lsls	r1, r2, #28
 80085ae:	bf44      	itt	mi
 80085b0:	232b      	movmi	r3, #43	; 0x2b
 80085b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b6:	f89a 3000 	ldrb.w	r3, [sl]
 80085ba:	2b2a      	cmp	r3, #42	; 0x2a
 80085bc:	d015      	beq.n	80085ea <_svfiprintf_r+0xf6>
 80085be:	9a07      	ldr	r2, [sp, #28]
 80085c0:	4654      	mov	r4, sl
 80085c2:	2000      	movs	r0, #0
 80085c4:	f04f 0c0a 	mov.w	ip, #10
 80085c8:	4621      	mov	r1, r4
 80085ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ce:	3b30      	subs	r3, #48	; 0x30
 80085d0:	2b09      	cmp	r3, #9
 80085d2:	d94e      	bls.n	8008672 <_svfiprintf_r+0x17e>
 80085d4:	b1b0      	cbz	r0, 8008604 <_svfiprintf_r+0x110>
 80085d6:	9207      	str	r2, [sp, #28]
 80085d8:	e014      	b.n	8008604 <_svfiprintf_r+0x110>
 80085da:	eba0 0308 	sub.w	r3, r0, r8
 80085de:	fa09 f303 	lsl.w	r3, r9, r3
 80085e2:	4313      	orrs	r3, r2
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	46a2      	mov	sl, r4
 80085e8:	e7d2      	b.n	8008590 <_svfiprintf_r+0x9c>
 80085ea:	9b03      	ldr	r3, [sp, #12]
 80085ec:	1d19      	adds	r1, r3, #4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	9103      	str	r1, [sp, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	bfbb      	ittet	lt
 80085f6:	425b      	neglt	r3, r3
 80085f8:	f042 0202 	orrlt.w	r2, r2, #2
 80085fc:	9307      	strge	r3, [sp, #28]
 80085fe:	9307      	strlt	r3, [sp, #28]
 8008600:	bfb8      	it	lt
 8008602:	9204      	strlt	r2, [sp, #16]
 8008604:	7823      	ldrb	r3, [r4, #0]
 8008606:	2b2e      	cmp	r3, #46	; 0x2e
 8008608:	d10c      	bne.n	8008624 <_svfiprintf_r+0x130>
 800860a:	7863      	ldrb	r3, [r4, #1]
 800860c:	2b2a      	cmp	r3, #42	; 0x2a
 800860e:	d135      	bne.n	800867c <_svfiprintf_r+0x188>
 8008610:	9b03      	ldr	r3, [sp, #12]
 8008612:	1d1a      	adds	r2, r3, #4
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	9203      	str	r2, [sp, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	bfb8      	it	lt
 800861c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008620:	3402      	adds	r4, #2
 8008622:	9305      	str	r3, [sp, #20]
 8008624:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086f0 <_svfiprintf_r+0x1fc>
 8008628:	7821      	ldrb	r1, [r4, #0]
 800862a:	2203      	movs	r2, #3
 800862c:	4650      	mov	r0, sl
 800862e:	f7f7 fe1f 	bl	8000270 <memchr>
 8008632:	b140      	cbz	r0, 8008646 <_svfiprintf_r+0x152>
 8008634:	2340      	movs	r3, #64	; 0x40
 8008636:	eba0 000a 	sub.w	r0, r0, sl
 800863a:	fa03 f000 	lsl.w	r0, r3, r0
 800863e:	9b04      	ldr	r3, [sp, #16]
 8008640:	4303      	orrs	r3, r0
 8008642:	3401      	adds	r4, #1
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800864a:	4826      	ldr	r0, [pc, #152]	; (80086e4 <_svfiprintf_r+0x1f0>)
 800864c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008650:	2206      	movs	r2, #6
 8008652:	f7f7 fe0d 	bl	8000270 <memchr>
 8008656:	2800      	cmp	r0, #0
 8008658:	d038      	beq.n	80086cc <_svfiprintf_r+0x1d8>
 800865a:	4b23      	ldr	r3, [pc, #140]	; (80086e8 <_svfiprintf_r+0x1f4>)
 800865c:	bb1b      	cbnz	r3, 80086a6 <_svfiprintf_r+0x1b2>
 800865e:	9b03      	ldr	r3, [sp, #12]
 8008660:	3307      	adds	r3, #7
 8008662:	f023 0307 	bic.w	r3, r3, #7
 8008666:	3308      	adds	r3, #8
 8008668:	9303      	str	r3, [sp, #12]
 800866a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866c:	4433      	add	r3, r6
 800866e:	9309      	str	r3, [sp, #36]	; 0x24
 8008670:	e767      	b.n	8008542 <_svfiprintf_r+0x4e>
 8008672:	fb0c 3202 	mla	r2, ip, r2, r3
 8008676:	460c      	mov	r4, r1
 8008678:	2001      	movs	r0, #1
 800867a:	e7a5      	b.n	80085c8 <_svfiprintf_r+0xd4>
 800867c:	2300      	movs	r3, #0
 800867e:	3401      	adds	r4, #1
 8008680:	9305      	str	r3, [sp, #20]
 8008682:	4619      	mov	r1, r3
 8008684:	f04f 0c0a 	mov.w	ip, #10
 8008688:	4620      	mov	r0, r4
 800868a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800868e:	3a30      	subs	r2, #48	; 0x30
 8008690:	2a09      	cmp	r2, #9
 8008692:	d903      	bls.n	800869c <_svfiprintf_r+0x1a8>
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0c5      	beq.n	8008624 <_svfiprintf_r+0x130>
 8008698:	9105      	str	r1, [sp, #20]
 800869a:	e7c3      	b.n	8008624 <_svfiprintf_r+0x130>
 800869c:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a0:	4604      	mov	r4, r0
 80086a2:	2301      	movs	r3, #1
 80086a4:	e7f0      	b.n	8008688 <_svfiprintf_r+0x194>
 80086a6:	ab03      	add	r3, sp, #12
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	462a      	mov	r2, r5
 80086ac:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <_svfiprintf_r+0x1f8>)
 80086ae:	a904      	add	r1, sp, #16
 80086b0:	4638      	mov	r0, r7
 80086b2:	f3af 8000 	nop.w
 80086b6:	1c42      	adds	r2, r0, #1
 80086b8:	4606      	mov	r6, r0
 80086ba:	d1d6      	bne.n	800866a <_svfiprintf_r+0x176>
 80086bc:	89ab      	ldrh	r3, [r5, #12]
 80086be:	065b      	lsls	r3, r3, #25
 80086c0:	f53f af2c 	bmi.w	800851c <_svfiprintf_r+0x28>
 80086c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086c6:	b01d      	add	sp, #116	; 0x74
 80086c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086cc:	ab03      	add	r3, sp, #12
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	462a      	mov	r2, r5
 80086d2:	4b06      	ldr	r3, [pc, #24]	; (80086ec <_svfiprintf_r+0x1f8>)
 80086d4:	a904      	add	r1, sp, #16
 80086d6:	4638      	mov	r0, r7
 80086d8:	f000 f9d4 	bl	8008a84 <_printf_i>
 80086dc:	e7eb      	b.n	80086b6 <_svfiprintf_r+0x1c2>
 80086de:	bf00      	nop
 80086e0:	0800afa5 	.word	0x0800afa5
 80086e4:	0800afaf 	.word	0x0800afaf
 80086e8:	00000000 	.word	0x00000000
 80086ec:	0800843d 	.word	0x0800843d
 80086f0:	0800afab 	.word	0x0800afab

080086f4 <__sfputc_r>:
 80086f4:	6893      	ldr	r3, [r2, #8]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	b410      	push	{r4}
 80086fc:	6093      	str	r3, [r2, #8]
 80086fe:	da08      	bge.n	8008712 <__sfputc_r+0x1e>
 8008700:	6994      	ldr	r4, [r2, #24]
 8008702:	42a3      	cmp	r3, r4
 8008704:	db01      	blt.n	800870a <__sfputc_r+0x16>
 8008706:	290a      	cmp	r1, #10
 8008708:	d103      	bne.n	8008712 <__sfputc_r+0x1e>
 800870a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800870e:	f000 badf 	b.w	8008cd0 <__swbuf_r>
 8008712:	6813      	ldr	r3, [r2, #0]
 8008714:	1c58      	adds	r0, r3, #1
 8008716:	6010      	str	r0, [r2, #0]
 8008718:	7019      	strb	r1, [r3, #0]
 800871a:	4608      	mov	r0, r1
 800871c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008720:	4770      	bx	lr

08008722 <__sfputs_r>:
 8008722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008724:	4606      	mov	r6, r0
 8008726:	460f      	mov	r7, r1
 8008728:	4614      	mov	r4, r2
 800872a:	18d5      	adds	r5, r2, r3
 800872c:	42ac      	cmp	r4, r5
 800872e:	d101      	bne.n	8008734 <__sfputs_r+0x12>
 8008730:	2000      	movs	r0, #0
 8008732:	e007      	b.n	8008744 <__sfputs_r+0x22>
 8008734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008738:	463a      	mov	r2, r7
 800873a:	4630      	mov	r0, r6
 800873c:	f7ff ffda 	bl	80086f4 <__sfputc_r>
 8008740:	1c43      	adds	r3, r0, #1
 8008742:	d1f3      	bne.n	800872c <__sfputs_r+0xa>
 8008744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008748 <_vfiprintf_r>:
 8008748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874c:	460d      	mov	r5, r1
 800874e:	b09d      	sub	sp, #116	; 0x74
 8008750:	4614      	mov	r4, r2
 8008752:	4698      	mov	r8, r3
 8008754:	4606      	mov	r6, r0
 8008756:	b118      	cbz	r0, 8008760 <_vfiprintf_r+0x18>
 8008758:	6983      	ldr	r3, [r0, #24]
 800875a:	b90b      	cbnz	r3, 8008760 <_vfiprintf_r+0x18>
 800875c:	f000 fc9a 	bl	8009094 <__sinit>
 8008760:	4b89      	ldr	r3, [pc, #548]	; (8008988 <_vfiprintf_r+0x240>)
 8008762:	429d      	cmp	r5, r3
 8008764:	d11b      	bne.n	800879e <_vfiprintf_r+0x56>
 8008766:	6875      	ldr	r5, [r6, #4]
 8008768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800876a:	07d9      	lsls	r1, r3, #31
 800876c:	d405      	bmi.n	800877a <_vfiprintf_r+0x32>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	059a      	lsls	r2, r3, #22
 8008772:	d402      	bmi.n	800877a <_vfiprintf_r+0x32>
 8008774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008776:	f000 fd2b 	bl	80091d0 <__retarget_lock_acquire_recursive>
 800877a:	89ab      	ldrh	r3, [r5, #12]
 800877c:	071b      	lsls	r3, r3, #28
 800877e:	d501      	bpl.n	8008784 <_vfiprintf_r+0x3c>
 8008780:	692b      	ldr	r3, [r5, #16]
 8008782:	b9eb      	cbnz	r3, 80087c0 <_vfiprintf_r+0x78>
 8008784:	4629      	mov	r1, r5
 8008786:	4630      	mov	r0, r6
 8008788:	f000 faf4 	bl	8008d74 <__swsetup_r>
 800878c:	b1c0      	cbz	r0, 80087c0 <_vfiprintf_r+0x78>
 800878e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008790:	07dc      	lsls	r4, r3, #31
 8008792:	d50e      	bpl.n	80087b2 <_vfiprintf_r+0x6a>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295
 8008798:	b01d      	add	sp, #116	; 0x74
 800879a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879e:	4b7b      	ldr	r3, [pc, #492]	; (800898c <_vfiprintf_r+0x244>)
 80087a0:	429d      	cmp	r5, r3
 80087a2:	d101      	bne.n	80087a8 <_vfiprintf_r+0x60>
 80087a4:	68b5      	ldr	r5, [r6, #8]
 80087a6:	e7df      	b.n	8008768 <_vfiprintf_r+0x20>
 80087a8:	4b79      	ldr	r3, [pc, #484]	; (8008990 <_vfiprintf_r+0x248>)
 80087aa:	429d      	cmp	r5, r3
 80087ac:	bf08      	it	eq
 80087ae:	68f5      	ldreq	r5, [r6, #12]
 80087b0:	e7da      	b.n	8008768 <_vfiprintf_r+0x20>
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	0598      	lsls	r0, r3, #22
 80087b6:	d4ed      	bmi.n	8008794 <_vfiprintf_r+0x4c>
 80087b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ba:	f000 fd0a 	bl	80091d2 <__retarget_lock_release_recursive>
 80087be:	e7e9      	b.n	8008794 <_vfiprintf_r+0x4c>
 80087c0:	2300      	movs	r3, #0
 80087c2:	9309      	str	r3, [sp, #36]	; 0x24
 80087c4:	2320      	movs	r3, #32
 80087c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ce:	2330      	movs	r3, #48	; 0x30
 80087d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008994 <_vfiprintf_r+0x24c>
 80087d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087d8:	f04f 0901 	mov.w	r9, #1
 80087dc:	4623      	mov	r3, r4
 80087de:	469a      	mov	sl, r3
 80087e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e4:	b10a      	cbz	r2, 80087ea <_vfiprintf_r+0xa2>
 80087e6:	2a25      	cmp	r2, #37	; 0x25
 80087e8:	d1f9      	bne.n	80087de <_vfiprintf_r+0x96>
 80087ea:	ebba 0b04 	subs.w	fp, sl, r4
 80087ee:	d00b      	beq.n	8008808 <_vfiprintf_r+0xc0>
 80087f0:	465b      	mov	r3, fp
 80087f2:	4622      	mov	r2, r4
 80087f4:	4629      	mov	r1, r5
 80087f6:	4630      	mov	r0, r6
 80087f8:	f7ff ff93 	bl	8008722 <__sfputs_r>
 80087fc:	3001      	adds	r0, #1
 80087fe:	f000 80aa 	beq.w	8008956 <_vfiprintf_r+0x20e>
 8008802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008804:	445a      	add	r2, fp
 8008806:	9209      	str	r2, [sp, #36]	; 0x24
 8008808:	f89a 3000 	ldrb.w	r3, [sl]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 80a2 	beq.w	8008956 <_vfiprintf_r+0x20e>
 8008812:	2300      	movs	r3, #0
 8008814:	f04f 32ff 	mov.w	r2, #4294967295
 8008818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800881c:	f10a 0a01 	add.w	sl, sl, #1
 8008820:	9304      	str	r3, [sp, #16]
 8008822:	9307      	str	r3, [sp, #28]
 8008824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008828:	931a      	str	r3, [sp, #104]	; 0x68
 800882a:	4654      	mov	r4, sl
 800882c:	2205      	movs	r2, #5
 800882e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008832:	4858      	ldr	r0, [pc, #352]	; (8008994 <_vfiprintf_r+0x24c>)
 8008834:	f7f7 fd1c 	bl	8000270 <memchr>
 8008838:	9a04      	ldr	r2, [sp, #16]
 800883a:	b9d8      	cbnz	r0, 8008874 <_vfiprintf_r+0x12c>
 800883c:	06d1      	lsls	r1, r2, #27
 800883e:	bf44      	itt	mi
 8008840:	2320      	movmi	r3, #32
 8008842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008846:	0713      	lsls	r3, r2, #28
 8008848:	bf44      	itt	mi
 800884a:	232b      	movmi	r3, #43	; 0x2b
 800884c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008850:	f89a 3000 	ldrb.w	r3, [sl]
 8008854:	2b2a      	cmp	r3, #42	; 0x2a
 8008856:	d015      	beq.n	8008884 <_vfiprintf_r+0x13c>
 8008858:	9a07      	ldr	r2, [sp, #28]
 800885a:	4654      	mov	r4, sl
 800885c:	2000      	movs	r0, #0
 800885e:	f04f 0c0a 	mov.w	ip, #10
 8008862:	4621      	mov	r1, r4
 8008864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008868:	3b30      	subs	r3, #48	; 0x30
 800886a:	2b09      	cmp	r3, #9
 800886c:	d94e      	bls.n	800890c <_vfiprintf_r+0x1c4>
 800886e:	b1b0      	cbz	r0, 800889e <_vfiprintf_r+0x156>
 8008870:	9207      	str	r2, [sp, #28]
 8008872:	e014      	b.n	800889e <_vfiprintf_r+0x156>
 8008874:	eba0 0308 	sub.w	r3, r0, r8
 8008878:	fa09 f303 	lsl.w	r3, r9, r3
 800887c:	4313      	orrs	r3, r2
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	46a2      	mov	sl, r4
 8008882:	e7d2      	b.n	800882a <_vfiprintf_r+0xe2>
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	1d19      	adds	r1, r3, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	9103      	str	r1, [sp, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	bfbb      	ittet	lt
 8008890:	425b      	neglt	r3, r3
 8008892:	f042 0202 	orrlt.w	r2, r2, #2
 8008896:	9307      	strge	r3, [sp, #28]
 8008898:	9307      	strlt	r3, [sp, #28]
 800889a:	bfb8      	it	lt
 800889c:	9204      	strlt	r2, [sp, #16]
 800889e:	7823      	ldrb	r3, [r4, #0]
 80088a0:	2b2e      	cmp	r3, #46	; 0x2e
 80088a2:	d10c      	bne.n	80088be <_vfiprintf_r+0x176>
 80088a4:	7863      	ldrb	r3, [r4, #1]
 80088a6:	2b2a      	cmp	r3, #42	; 0x2a
 80088a8:	d135      	bne.n	8008916 <_vfiprintf_r+0x1ce>
 80088aa:	9b03      	ldr	r3, [sp, #12]
 80088ac:	1d1a      	adds	r2, r3, #4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	9203      	str	r2, [sp, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bfb8      	it	lt
 80088b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ba:	3402      	adds	r4, #2
 80088bc:	9305      	str	r3, [sp, #20]
 80088be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089a4 <_vfiprintf_r+0x25c>
 80088c2:	7821      	ldrb	r1, [r4, #0]
 80088c4:	2203      	movs	r2, #3
 80088c6:	4650      	mov	r0, sl
 80088c8:	f7f7 fcd2 	bl	8000270 <memchr>
 80088cc:	b140      	cbz	r0, 80088e0 <_vfiprintf_r+0x198>
 80088ce:	2340      	movs	r3, #64	; 0x40
 80088d0:	eba0 000a 	sub.w	r0, r0, sl
 80088d4:	fa03 f000 	lsl.w	r0, r3, r0
 80088d8:	9b04      	ldr	r3, [sp, #16]
 80088da:	4303      	orrs	r3, r0
 80088dc:	3401      	adds	r4, #1
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e4:	482c      	ldr	r0, [pc, #176]	; (8008998 <_vfiprintf_r+0x250>)
 80088e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ea:	2206      	movs	r2, #6
 80088ec:	f7f7 fcc0 	bl	8000270 <memchr>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d03f      	beq.n	8008974 <_vfiprintf_r+0x22c>
 80088f4:	4b29      	ldr	r3, [pc, #164]	; (800899c <_vfiprintf_r+0x254>)
 80088f6:	bb1b      	cbnz	r3, 8008940 <_vfiprintf_r+0x1f8>
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	3307      	adds	r3, #7
 80088fc:	f023 0307 	bic.w	r3, r3, #7
 8008900:	3308      	adds	r3, #8
 8008902:	9303      	str	r3, [sp, #12]
 8008904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008906:	443b      	add	r3, r7
 8008908:	9309      	str	r3, [sp, #36]	; 0x24
 800890a:	e767      	b.n	80087dc <_vfiprintf_r+0x94>
 800890c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008910:	460c      	mov	r4, r1
 8008912:	2001      	movs	r0, #1
 8008914:	e7a5      	b.n	8008862 <_vfiprintf_r+0x11a>
 8008916:	2300      	movs	r3, #0
 8008918:	3401      	adds	r4, #1
 800891a:	9305      	str	r3, [sp, #20]
 800891c:	4619      	mov	r1, r3
 800891e:	f04f 0c0a 	mov.w	ip, #10
 8008922:	4620      	mov	r0, r4
 8008924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008928:	3a30      	subs	r2, #48	; 0x30
 800892a:	2a09      	cmp	r2, #9
 800892c:	d903      	bls.n	8008936 <_vfiprintf_r+0x1ee>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0c5      	beq.n	80088be <_vfiprintf_r+0x176>
 8008932:	9105      	str	r1, [sp, #20]
 8008934:	e7c3      	b.n	80088be <_vfiprintf_r+0x176>
 8008936:	fb0c 2101 	mla	r1, ip, r1, r2
 800893a:	4604      	mov	r4, r0
 800893c:	2301      	movs	r3, #1
 800893e:	e7f0      	b.n	8008922 <_vfiprintf_r+0x1da>
 8008940:	ab03      	add	r3, sp, #12
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	462a      	mov	r2, r5
 8008946:	4b16      	ldr	r3, [pc, #88]	; (80089a0 <_vfiprintf_r+0x258>)
 8008948:	a904      	add	r1, sp, #16
 800894a:	4630      	mov	r0, r6
 800894c:	f3af 8000 	nop.w
 8008950:	4607      	mov	r7, r0
 8008952:	1c78      	adds	r0, r7, #1
 8008954:	d1d6      	bne.n	8008904 <_vfiprintf_r+0x1bc>
 8008956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008958:	07d9      	lsls	r1, r3, #31
 800895a:	d405      	bmi.n	8008968 <_vfiprintf_r+0x220>
 800895c:	89ab      	ldrh	r3, [r5, #12]
 800895e:	059a      	lsls	r2, r3, #22
 8008960:	d402      	bmi.n	8008968 <_vfiprintf_r+0x220>
 8008962:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008964:	f000 fc35 	bl	80091d2 <__retarget_lock_release_recursive>
 8008968:	89ab      	ldrh	r3, [r5, #12]
 800896a:	065b      	lsls	r3, r3, #25
 800896c:	f53f af12 	bmi.w	8008794 <_vfiprintf_r+0x4c>
 8008970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008972:	e711      	b.n	8008798 <_vfiprintf_r+0x50>
 8008974:	ab03      	add	r3, sp, #12
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	462a      	mov	r2, r5
 800897a:	4b09      	ldr	r3, [pc, #36]	; (80089a0 <_vfiprintf_r+0x258>)
 800897c:	a904      	add	r1, sp, #16
 800897e:	4630      	mov	r0, r6
 8008980:	f000 f880 	bl	8008a84 <_printf_i>
 8008984:	e7e4      	b.n	8008950 <_vfiprintf_r+0x208>
 8008986:	bf00      	nop
 8008988:	0800aff8 	.word	0x0800aff8
 800898c:	0800b018 	.word	0x0800b018
 8008990:	0800afd8 	.word	0x0800afd8
 8008994:	0800afa5 	.word	0x0800afa5
 8008998:	0800afaf 	.word	0x0800afaf
 800899c:	00000000 	.word	0x00000000
 80089a0:	08008723 	.word	0x08008723
 80089a4:	0800afab 	.word	0x0800afab

080089a8 <_printf_common>:
 80089a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ac:	4616      	mov	r6, r2
 80089ae:	4699      	mov	r9, r3
 80089b0:	688a      	ldr	r2, [r1, #8]
 80089b2:	690b      	ldr	r3, [r1, #16]
 80089b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089b8:	4293      	cmp	r3, r2
 80089ba:	bfb8      	it	lt
 80089bc:	4613      	movlt	r3, r2
 80089be:	6033      	str	r3, [r6, #0]
 80089c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089c4:	4607      	mov	r7, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b10a      	cbz	r2, 80089ce <_printf_common+0x26>
 80089ca:	3301      	adds	r3, #1
 80089cc:	6033      	str	r3, [r6, #0]
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	0699      	lsls	r1, r3, #26
 80089d2:	bf42      	ittt	mi
 80089d4:	6833      	ldrmi	r3, [r6, #0]
 80089d6:	3302      	addmi	r3, #2
 80089d8:	6033      	strmi	r3, [r6, #0]
 80089da:	6825      	ldr	r5, [r4, #0]
 80089dc:	f015 0506 	ands.w	r5, r5, #6
 80089e0:	d106      	bne.n	80089f0 <_printf_common+0x48>
 80089e2:	f104 0a19 	add.w	sl, r4, #25
 80089e6:	68e3      	ldr	r3, [r4, #12]
 80089e8:	6832      	ldr	r2, [r6, #0]
 80089ea:	1a9b      	subs	r3, r3, r2
 80089ec:	42ab      	cmp	r3, r5
 80089ee:	dc26      	bgt.n	8008a3e <_printf_common+0x96>
 80089f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089f4:	1e13      	subs	r3, r2, #0
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	bf18      	it	ne
 80089fa:	2301      	movne	r3, #1
 80089fc:	0692      	lsls	r2, r2, #26
 80089fe:	d42b      	bmi.n	8008a58 <_printf_common+0xb0>
 8008a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a04:	4649      	mov	r1, r9
 8008a06:	4638      	mov	r0, r7
 8008a08:	47c0      	blx	r8
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	d01e      	beq.n	8008a4c <_printf_common+0xa4>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	68e5      	ldr	r5, [r4, #12]
 8008a12:	6832      	ldr	r2, [r6, #0]
 8008a14:	f003 0306 	and.w	r3, r3, #6
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	bf08      	it	eq
 8008a1c:	1aad      	subeq	r5, r5, r2
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	6922      	ldr	r2, [r4, #16]
 8008a22:	bf0c      	ite	eq
 8008a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a28:	2500      	movne	r5, #0
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	bfc4      	itt	gt
 8008a2e:	1a9b      	subgt	r3, r3, r2
 8008a30:	18ed      	addgt	r5, r5, r3
 8008a32:	2600      	movs	r6, #0
 8008a34:	341a      	adds	r4, #26
 8008a36:	42b5      	cmp	r5, r6
 8008a38:	d11a      	bne.n	8008a70 <_printf_common+0xc8>
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e008      	b.n	8008a50 <_printf_common+0xa8>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4652      	mov	r2, sl
 8008a42:	4649      	mov	r1, r9
 8008a44:	4638      	mov	r0, r7
 8008a46:	47c0      	blx	r8
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d103      	bne.n	8008a54 <_printf_common+0xac>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a54:	3501      	adds	r5, #1
 8008a56:	e7c6      	b.n	80089e6 <_printf_common+0x3e>
 8008a58:	18e1      	adds	r1, r4, r3
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	2030      	movs	r0, #48	; 0x30
 8008a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a62:	4422      	add	r2, r4
 8008a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	e7c7      	b.n	8008a00 <_printf_common+0x58>
 8008a70:	2301      	movs	r3, #1
 8008a72:	4622      	mov	r2, r4
 8008a74:	4649      	mov	r1, r9
 8008a76:	4638      	mov	r0, r7
 8008a78:	47c0      	blx	r8
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d0e6      	beq.n	8008a4c <_printf_common+0xa4>
 8008a7e:	3601      	adds	r6, #1
 8008a80:	e7d9      	b.n	8008a36 <_printf_common+0x8e>
	...

08008a84 <_printf_i>:
 8008a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a88:	460c      	mov	r4, r1
 8008a8a:	4691      	mov	r9, r2
 8008a8c:	7e27      	ldrb	r7, [r4, #24]
 8008a8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a90:	2f78      	cmp	r7, #120	; 0x78
 8008a92:	4680      	mov	r8, r0
 8008a94:	469a      	mov	sl, r3
 8008a96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a9a:	d807      	bhi.n	8008aac <_printf_i+0x28>
 8008a9c:	2f62      	cmp	r7, #98	; 0x62
 8008a9e:	d80a      	bhi.n	8008ab6 <_printf_i+0x32>
 8008aa0:	2f00      	cmp	r7, #0
 8008aa2:	f000 80d8 	beq.w	8008c56 <_printf_i+0x1d2>
 8008aa6:	2f58      	cmp	r7, #88	; 0x58
 8008aa8:	f000 80a3 	beq.w	8008bf2 <_printf_i+0x16e>
 8008aac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ab4:	e03a      	b.n	8008b2c <_printf_i+0xa8>
 8008ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aba:	2b15      	cmp	r3, #21
 8008abc:	d8f6      	bhi.n	8008aac <_printf_i+0x28>
 8008abe:	a001      	add	r0, pc, #4	; (adr r0, 8008ac4 <_printf_i+0x40>)
 8008ac0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ac4:	08008b1d 	.word	0x08008b1d
 8008ac8:	08008b31 	.word	0x08008b31
 8008acc:	08008aad 	.word	0x08008aad
 8008ad0:	08008aad 	.word	0x08008aad
 8008ad4:	08008aad 	.word	0x08008aad
 8008ad8:	08008aad 	.word	0x08008aad
 8008adc:	08008b31 	.word	0x08008b31
 8008ae0:	08008aad 	.word	0x08008aad
 8008ae4:	08008aad 	.word	0x08008aad
 8008ae8:	08008aad 	.word	0x08008aad
 8008aec:	08008aad 	.word	0x08008aad
 8008af0:	08008c3d 	.word	0x08008c3d
 8008af4:	08008b61 	.word	0x08008b61
 8008af8:	08008c1f 	.word	0x08008c1f
 8008afc:	08008aad 	.word	0x08008aad
 8008b00:	08008aad 	.word	0x08008aad
 8008b04:	08008c5f 	.word	0x08008c5f
 8008b08:	08008aad 	.word	0x08008aad
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008aad 	.word	0x08008aad
 8008b14:	08008aad 	.word	0x08008aad
 8008b18:	08008c27 	.word	0x08008c27
 8008b1c:	680b      	ldr	r3, [r1, #0]
 8008b1e:	1d1a      	adds	r2, r3, #4
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	600a      	str	r2, [r1, #0]
 8008b24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e0a3      	b.n	8008c78 <_printf_i+0x1f4>
 8008b30:	6825      	ldr	r5, [r4, #0]
 8008b32:	6808      	ldr	r0, [r1, #0]
 8008b34:	062e      	lsls	r6, r5, #24
 8008b36:	f100 0304 	add.w	r3, r0, #4
 8008b3a:	d50a      	bpl.n	8008b52 <_printf_i+0xce>
 8008b3c:	6805      	ldr	r5, [r0, #0]
 8008b3e:	600b      	str	r3, [r1, #0]
 8008b40:	2d00      	cmp	r5, #0
 8008b42:	da03      	bge.n	8008b4c <_printf_i+0xc8>
 8008b44:	232d      	movs	r3, #45	; 0x2d
 8008b46:	426d      	negs	r5, r5
 8008b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b4c:	485e      	ldr	r0, [pc, #376]	; (8008cc8 <_printf_i+0x244>)
 8008b4e:	230a      	movs	r3, #10
 8008b50:	e019      	b.n	8008b86 <_printf_i+0x102>
 8008b52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b56:	6805      	ldr	r5, [r0, #0]
 8008b58:	600b      	str	r3, [r1, #0]
 8008b5a:	bf18      	it	ne
 8008b5c:	b22d      	sxthne	r5, r5
 8008b5e:	e7ef      	b.n	8008b40 <_printf_i+0xbc>
 8008b60:	680b      	ldr	r3, [r1, #0]
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	1d18      	adds	r0, r3, #4
 8008b66:	6008      	str	r0, [r1, #0]
 8008b68:	0628      	lsls	r0, r5, #24
 8008b6a:	d501      	bpl.n	8008b70 <_printf_i+0xec>
 8008b6c:	681d      	ldr	r5, [r3, #0]
 8008b6e:	e002      	b.n	8008b76 <_printf_i+0xf2>
 8008b70:	0669      	lsls	r1, r5, #25
 8008b72:	d5fb      	bpl.n	8008b6c <_printf_i+0xe8>
 8008b74:	881d      	ldrh	r5, [r3, #0]
 8008b76:	4854      	ldr	r0, [pc, #336]	; (8008cc8 <_printf_i+0x244>)
 8008b78:	2f6f      	cmp	r7, #111	; 0x6f
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2308      	moveq	r3, #8
 8008b7e:	230a      	movne	r3, #10
 8008b80:	2100      	movs	r1, #0
 8008b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b86:	6866      	ldr	r6, [r4, #4]
 8008b88:	60a6      	str	r6, [r4, #8]
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	bfa2      	ittt	ge
 8008b8e:	6821      	ldrge	r1, [r4, #0]
 8008b90:	f021 0104 	bicge.w	r1, r1, #4
 8008b94:	6021      	strge	r1, [r4, #0]
 8008b96:	b90d      	cbnz	r5, 8008b9c <_printf_i+0x118>
 8008b98:	2e00      	cmp	r6, #0
 8008b9a:	d04d      	beq.n	8008c38 <_printf_i+0x1b4>
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ba2:	fb03 5711 	mls	r7, r3, r1, r5
 8008ba6:	5dc7      	ldrb	r7, [r0, r7]
 8008ba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bac:	462f      	mov	r7, r5
 8008bae:	42bb      	cmp	r3, r7
 8008bb0:	460d      	mov	r5, r1
 8008bb2:	d9f4      	bls.n	8008b9e <_printf_i+0x11a>
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d10b      	bne.n	8008bd0 <_printf_i+0x14c>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	07df      	lsls	r7, r3, #31
 8008bbc:	d508      	bpl.n	8008bd0 <_printf_i+0x14c>
 8008bbe:	6923      	ldr	r3, [r4, #16]
 8008bc0:	6861      	ldr	r1, [r4, #4]
 8008bc2:	4299      	cmp	r1, r3
 8008bc4:	bfde      	ittt	le
 8008bc6:	2330      	movle	r3, #48	; 0x30
 8008bc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bd0:	1b92      	subs	r2, r2, r6
 8008bd2:	6122      	str	r2, [r4, #16]
 8008bd4:	f8cd a000 	str.w	sl, [sp]
 8008bd8:	464b      	mov	r3, r9
 8008bda:	aa03      	add	r2, sp, #12
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4640      	mov	r0, r8
 8008be0:	f7ff fee2 	bl	80089a8 <_printf_common>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d14c      	bne.n	8008c82 <_printf_i+0x1fe>
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	b004      	add	sp, #16
 8008bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf2:	4835      	ldr	r0, [pc, #212]	; (8008cc8 <_printf_i+0x244>)
 8008bf4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	680e      	ldr	r6, [r1, #0]
 8008bfc:	061f      	lsls	r7, r3, #24
 8008bfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008c02:	600e      	str	r6, [r1, #0]
 8008c04:	d514      	bpl.n	8008c30 <_printf_i+0x1ac>
 8008c06:	07d9      	lsls	r1, r3, #31
 8008c08:	bf44      	itt	mi
 8008c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008c0e:	6023      	strmi	r3, [r4, #0]
 8008c10:	b91d      	cbnz	r5, 8008c1a <_printf_i+0x196>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	f023 0320 	bic.w	r3, r3, #32
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	2310      	movs	r3, #16
 8008c1c:	e7b0      	b.n	8008b80 <_printf_i+0xfc>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	f043 0320 	orr.w	r3, r3, #32
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	2378      	movs	r3, #120	; 0x78
 8008c28:	4828      	ldr	r0, [pc, #160]	; (8008ccc <_printf_i+0x248>)
 8008c2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c2e:	e7e3      	b.n	8008bf8 <_printf_i+0x174>
 8008c30:	065e      	lsls	r6, r3, #25
 8008c32:	bf48      	it	mi
 8008c34:	b2ad      	uxthmi	r5, r5
 8008c36:	e7e6      	b.n	8008c06 <_printf_i+0x182>
 8008c38:	4616      	mov	r6, r2
 8008c3a:	e7bb      	b.n	8008bb4 <_printf_i+0x130>
 8008c3c:	680b      	ldr	r3, [r1, #0]
 8008c3e:	6826      	ldr	r6, [r4, #0]
 8008c40:	6960      	ldr	r0, [r4, #20]
 8008c42:	1d1d      	adds	r5, r3, #4
 8008c44:	600d      	str	r5, [r1, #0]
 8008c46:	0635      	lsls	r5, r6, #24
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	d501      	bpl.n	8008c50 <_printf_i+0x1cc>
 8008c4c:	6018      	str	r0, [r3, #0]
 8008c4e:	e002      	b.n	8008c56 <_printf_i+0x1d2>
 8008c50:	0671      	lsls	r1, r6, #25
 8008c52:	d5fb      	bpl.n	8008c4c <_printf_i+0x1c8>
 8008c54:	8018      	strh	r0, [r3, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	4616      	mov	r6, r2
 8008c5c:	e7ba      	b.n	8008bd4 <_printf_i+0x150>
 8008c5e:	680b      	ldr	r3, [r1, #0]
 8008c60:	1d1a      	adds	r2, r3, #4
 8008c62:	600a      	str	r2, [r1, #0]
 8008c64:	681e      	ldr	r6, [r3, #0]
 8008c66:	6862      	ldr	r2, [r4, #4]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7f7 fb00 	bl	8000270 <memchr>
 8008c70:	b108      	cbz	r0, 8008c76 <_printf_i+0x1f2>
 8008c72:	1b80      	subs	r0, r0, r6
 8008c74:	6060      	str	r0, [r4, #4]
 8008c76:	6863      	ldr	r3, [r4, #4]
 8008c78:	6123      	str	r3, [r4, #16]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c80:	e7a8      	b.n	8008bd4 <_printf_i+0x150>
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	4632      	mov	r2, r6
 8008c86:	4649      	mov	r1, r9
 8008c88:	4640      	mov	r0, r8
 8008c8a:	47d0      	blx	sl
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d0ab      	beq.n	8008be8 <_printf_i+0x164>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	079b      	lsls	r3, r3, #30
 8008c94:	d413      	bmi.n	8008cbe <_printf_i+0x23a>
 8008c96:	68e0      	ldr	r0, [r4, #12]
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	4298      	cmp	r0, r3
 8008c9c:	bfb8      	it	lt
 8008c9e:	4618      	movlt	r0, r3
 8008ca0:	e7a4      	b.n	8008bec <_printf_i+0x168>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4640      	mov	r0, r8
 8008caa:	47d0      	blx	sl
 8008cac:	3001      	adds	r0, #1
 8008cae:	d09b      	beq.n	8008be8 <_printf_i+0x164>
 8008cb0:	3501      	adds	r5, #1
 8008cb2:	68e3      	ldr	r3, [r4, #12]
 8008cb4:	9903      	ldr	r1, [sp, #12]
 8008cb6:	1a5b      	subs	r3, r3, r1
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	dcf2      	bgt.n	8008ca2 <_printf_i+0x21e>
 8008cbc:	e7eb      	b.n	8008c96 <_printf_i+0x212>
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	f104 0619 	add.w	r6, r4, #25
 8008cc4:	e7f5      	b.n	8008cb2 <_printf_i+0x22e>
 8008cc6:	bf00      	nop
 8008cc8:	0800afb6 	.word	0x0800afb6
 8008ccc:	0800afc7 	.word	0x0800afc7

08008cd0 <__swbuf_r>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	460e      	mov	r6, r1
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	b118      	cbz	r0, 8008ce2 <__swbuf_r+0x12>
 8008cda:	6983      	ldr	r3, [r0, #24]
 8008cdc:	b90b      	cbnz	r3, 8008ce2 <__swbuf_r+0x12>
 8008cde:	f000 f9d9 	bl	8009094 <__sinit>
 8008ce2:	4b21      	ldr	r3, [pc, #132]	; (8008d68 <__swbuf_r+0x98>)
 8008ce4:	429c      	cmp	r4, r3
 8008ce6:	d12b      	bne.n	8008d40 <__swbuf_r+0x70>
 8008ce8:	686c      	ldr	r4, [r5, #4]
 8008cea:	69a3      	ldr	r3, [r4, #24]
 8008cec:	60a3      	str	r3, [r4, #8]
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	071a      	lsls	r2, r3, #28
 8008cf2:	d52f      	bpl.n	8008d54 <__swbuf_r+0x84>
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	b36b      	cbz	r3, 8008d54 <__swbuf_r+0x84>
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	6820      	ldr	r0, [r4, #0]
 8008cfc:	1ac0      	subs	r0, r0, r3
 8008cfe:	6963      	ldr	r3, [r4, #20]
 8008d00:	b2f6      	uxtb	r6, r6
 8008d02:	4283      	cmp	r3, r0
 8008d04:	4637      	mov	r7, r6
 8008d06:	dc04      	bgt.n	8008d12 <__swbuf_r+0x42>
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f000 f92e 	bl	8008f6c <_fflush_r>
 8008d10:	bb30      	cbnz	r0, 8008d60 <__swbuf_r+0x90>
 8008d12:	68a3      	ldr	r3, [r4, #8]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	60a3      	str	r3, [r4, #8]
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	701e      	strb	r6, [r3, #0]
 8008d20:	6963      	ldr	r3, [r4, #20]
 8008d22:	3001      	adds	r0, #1
 8008d24:	4283      	cmp	r3, r0
 8008d26:	d004      	beq.n	8008d32 <__swbuf_r+0x62>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	07db      	lsls	r3, r3, #31
 8008d2c:	d506      	bpl.n	8008d3c <__swbuf_r+0x6c>
 8008d2e:	2e0a      	cmp	r6, #10
 8008d30:	d104      	bne.n	8008d3c <__swbuf_r+0x6c>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4628      	mov	r0, r5
 8008d36:	f000 f919 	bl	8008f6c <_fflush_r>
 8008d3a:	b988      	cbnz	r0, 8008d60 <__swbuf_r+0x90>
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d40:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <__swbuf_r+0x9c>)
 8008d42:	429c      	cmp	r4, r3
 8008d44:	d101      	bne.n	8008d4a <__swbuf_r+0x7a>
 8008d46:	68ac      	ldr	r4, [r5, #8]
 8008d48:	e7cf      	b.n	8008cea <__swbuf_r+0x1a>
 8008d4a:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <__swbuf_r+0xa0>)
 8008d4c:	429c      	cmp	r4, r3
 8008d4e:	bf08      	it	eq
 8008d50:	68ec      	ldreq	r4, [r5, #12]
 8008d52:	e7ca      	b.n	8008cea <__swbuf_r+0x1a>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4628      	mov	r0, r5
 8008d58:	f000 f80c 	bl	8008d74 <__swsetup_r>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d0cb      	beq.n	8008cf8 <__swbuf_r+0x28>
 8008d60:	f04f 37ff 	mov.w	r7, #4294967295
 8008d64:	e7ea      	b.n	8008d3c <__swbuf_r+0x6c>
 8008d66:	bf00      	nop
 8008d68:	0800aff8 	.word	0x0800aff8
 8008d6c:	0800b018 	.word	0x0800b018
 8008d70:	0800afd8 	.word	0x0800afd8

08008d74 <__swsetup_r>:
 8008d74:	4b32      	ldr	r3, [pc, #200]	; (8008e40 <__swsetup_r+0xcc>)
 8008d76:	b570      	push	{r4, r5, r6, lr}
 8008d78:	681d      	ldr	r5, [r3, #0]
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	b125      	cbz	r5, 8008d8a <__swsetup_r+0x16>
 8008d80:	69ab      	ldr	r3, [r5, #24]
 8008d82:	b913      	cbnz	r3, 8008d8a <__swsetup_r+0x16>
 8008d84:	4628      	mov	r0, r5
 8008d86:	f000 f985 	bl	8009094 <__sinit>
 8008d8a:	4b2e      	ldr	r3, [pc, #184]	; (8008e44 <__swsetup_r+0xd0>)
 8008d8c:	429c      	cmp	r4, r3
 8008d8e:	d10f      	bne.n	8008db0 <__swsetup_r+0x3c>
 8008d90:	686c      	ldr	r4, [r5, #4]
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d98:	0719      	lsls	r1, r3, #28
 8008d9a:	d42c      	bmi.n	8008df6 <__swsetup_r+0x82>
 8008d9c:	06dd      	lsls	r5, r3, #27
 8008d9e:	d411      	bmi.n	8008dc4 <__swsetup_r+0x50>
 8008da0:	2309      	movs	r3, #9
 8008da2:	6033      	str	r3, [r6, #0]
 8008da4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008da8:	81a3      	strh	r3, [r4, #12]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	e03e      	b.n	8008e2e <__swsetup_r+0xba>
 8008db0:	4b25      	ldr	r3, [pc, #148]	; (8008e48 <__swsetup_r+0xd4>)
 8008db2:	429c      	cmp	r4, r3
 8008db4:	d101      	bne.n	8008dba <__swsetup_r+0x46>
 8008db6:	68ac      	ldr	r4, [r5, #8]
 8008db8:	e7eb      	b.n	8008d92 <__swsetup_r+0x1e>
 8008dba:	4b24      	ldr	r3, [pc, #144]	; (8008e4c <__swsetup_r+0xd8>)
 8008dbc:	429c      	cmp	r4, r3
 8008dbe:	bf08      	it	eq
 8008dc0:	68ec      	ldreq	r4, [r5, #12]
 8008dc2:	e7e6      	b.n	8008d92 <__swsetup_r+0x1e>
 8008dc4:	0758      	lsls	r0, r3, #29
 8008dc6:	d512      	bpl.n	8008dee <__swsetup_r+0x7a>
 8008dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dca:	b141      	cbz	r1, 8008dde <__swsetup_r+0x6a>
 8008dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dd0:	4299      	cmp	r1, r3
 8008dd2:	d002      	beq.n	8008dda <__swsetup_r+0x66>
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f7ff f8c7 	bl	8007f68 <_free_r>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008de4:	81a3      	strh	r3, [r4, #12]
 8008de6:	2300      	movs	r3, #0
 8008de8:	6063      	str	r3, [r4, #4]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f043 0308 	orr.w	r3, r3, #8
 8008df4:	81a3      	strh	r3, [r4, #12]
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	b94b      	cbnz	r3, 8008e0e <__swsetup_r+0x9a>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e04:	d003      	beq.n	8008e0e <__swsetup_r+0x9a>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f000 fa07 	bl	800921c <__smakebuf_r>
 8008e0e:	89a0      	ldrh	r0, [r4, #12]
 8008e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e14:	f010 0301 	ands.w	r3, r0, #1
 8008e18:	d00a      	beq.n	8008e30 <__swsetup_r+0xbc>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60a3      	str	r3, [r4, #8]
 8008e1e:	6963      	ldr	r3, [r4, #20]
 8008e20:	425b      	negs	r3, r3
 8008e22:	61a3      	str	r3, [r4, #24]
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	b943      	cbnz	r3, 8008e3a <__swsetup_r+0xc6>
 8008e28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e2c:	d1ba      	bne.n	8008da4 <__swsetup_r+0x30>
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	0781      	lsls	r1, r0, #30
 8008e32:	bf58      	it	pl
 8008e34:	6963      	ldrpl	r3, [r4, #20]
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	e7f4      	b.n	8008e24 <__swsetup_r+0xb0>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	e7f7      	b.n	8008e2e <__swsetup_r+0xba>
 8008e3e:	bf00      	nop
 8008e40:	2000001c 	.word	0x2000001c
 8008e44:	0800aff8 	.word	0x0800aff8
 8008e48:	0800b018 	.word	0x0800b018
 8008e4c:	0800afd8 	.word	0x0800afd8

08008e50 <abort>:
 8008e50:	b508      	push	{r3, lr}
 8008e52:	2006      	movs	r0, #6
 8008e54:	f000 fa7a 	bl	800934c <raise>
 8008e58:	2001      	movs	r0, #1
 8008e5a:	f7f9 fac5 	bl	80023e8 <_exit>
	...

08008e60 <__sflush_r>:
 8008e60:	898a      	ldrh	r2, [r1, #12]
 8008e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e66:	4605      	mov	r5, r0
 8008e68:	0710      	lsls	r0, r2, #28
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	d458      	bmi.n	8008f20 <__sflush_r+0xc0>
 8008e6e:	684b      	ldr	r3, [r1, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dc05      	bgt.n	8008e80 <__sflush_r+0x20>
 8008e74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	dc02      	bgt.n	8008e80 <__sflush_r+0x20>
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	d0f9      	beq.n	8008e7a <__sflush_r+0x1a>
 8008e86:	2300      	movs	r3, #0
 8008e88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e8c:	682f      	ldr	r7, [r5, #0]
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	d032      	beq.n	8008ef8 <__sflush_r+0x98>
 8008e92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	075a      	lsls	r2, r3, #29
 8008e98:	d505      	bpl.n	8008ea6 <__sflush_r+0x46>
 8008e9a:	6863      	ldr	r3, [r4, #4]
 8008e9c:	1ac0      	subs	r0, r0, r3
 8008e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ea0:	b10b      	cbz	r3, 8008ea6 <__sflush_r+0x46>
 8008ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ea4:	1ac0      	subs	r0, r0, r3
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eac:	6a21      	ldr	r1, [r4, #32]
 8008eae:	4628      	mov	r0, r5
 8008eb0:	47b0      	blx	r6
 8008eb2:	1c43      	adds	r3, r0, #1
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	d106      	bne.n	8008ec6 <__sflush_r+0x66>
 8008eb8:	6829      	ldr	r1, [r5, #0]
 8008eba:	291d      	cmp	r1, #29
 8008ebc:	d82c      	bhi.n	8008f18 <__sflush_r+0xb8>
 8008ebe:	4a2a      	ldr	r2, [pc, #168]	; (8008f68 <__sflush_r+0x108>)
 8008ec0:	40ca      	lsrs	r2, r1
 8008ec2:	07d6      	lsls	r6, r2, #31
 8008ec4:	d528      	bpl.n	8008f18 <__sflush_r+0xb8>
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	6062      	str	r2, [r4, #4]
 8008eca:	04d9      	lsls	r1, r3, #19
 8008ecc:	6922      	ldr	r2, [r4, #16]
 8008ece:	6022      	str	r2, [r4, #0]
 8008ed0:	d504      	bpl.n	8008edc <__sflush_r+0x7c>
 8008ed2:	1c42      	adds	r2, r0, #1
 8008ed4:	d101      	bne.n	8008eda <__sflush_r+0x7a>
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	b903      	cbnz	r3, 8008edc <__sflush_r+0x7c>
 8008eda:	6560      	str	r0, [r4, #84]	; 0x54
 8008edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ede:	602f      	str	r7, [r5, #0]
 8008ee0:	2900      	cmp	r1, #0
 8008ee2:	d0ca      	beq.n	8008e7a <__sflush_r+0x1a>
 8008ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ee8:	4299      	cmp	r1, r3
 8008eea:	d002      	beq.n	8008ef2 <__sflush_r+0x92>
 8008eec:	4628      	mov	r0, r5
 8008eee:	f7ff f83b 	bl	8007f68 <_free_r>
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	6360      	str	r0, [r4, #52]	; 0x34
 8008ef6:	e7c1      	b.n	8008e7c <__sflush_r+0x1c>
 8008ef8:	6a21      	ldr	r1, [r4, #32]
 8008efa:	2301      	movs	r3, #1
 8008efc:	4628      	mov	r0, r5
 8008efe:	47b0      	blx	r6
 8008f00:	1c41      	adds	r1, r0, #1
 8008f02:	d1c7      	bne.n	8008e94 <__sflush_r+0x34>
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d0c4      	beq.n	8008e94 <__sflush_r+0x34>
 8008f0a:	2b1d      	cmp	r3, #29
 8008f0c:	d001      	beq.n	8008f12 <__sflush_r+0xb2>
 8008f0e:	2b16      	cmp	r3, #22
 8008f10:	d101      	bne.n	8008f16 <__sflush_r+0xb6>
 8008f12:	602f      	str	r7, [r5, #0]
 8008f14:	e7b1      	b.n	8008e7a <__sflush_r+0x1a>
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	e7ad      	b.n	8008e7c <__sflush_r+0x1c>
 8008f20:	690f      	ldr	r7, [r1, #16]
 8008f22:	2f00      	cmp	r7, #0
 8008f24:	d0a9      	beq.n	8008e7a <__sflush_r+0x1a>
 8008f26:	0793      	lsls	r3, r2, #30
 8008f28:	680e      	ldr	r6, [r1, #0]
 8008f2a:	bf08      	it	eq
 8008f2c:	694b      	ldreq	r3, [r1, #20]
 8008f2e:	600f      	str	r7, [r1, #0]
 8008f30:	bf18      	it	ne
 8008f32:	2300      	movne	r3, #0
 8008f34:	eba6 0807 	sub.w	r8, r6, r7
 8008f38:	608b      	str	r3, [r1, #8]
 8008f3a:	f1b8 0f00 	cmp.w	r8, #0
 8008f3e:	dd9c      	ble.n	8008e7a <__sflush_r+0x1a>
 8008f40:	6a21      	ldr	r1, [r4, #32]
 8008f42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f44:	4643      	mov	r3, r8
 8008f46:	463a      	mov	r2, r7
 8008f48:	4628      	mov	r0, r5
 8008f4a:	47b0      	blx	r6
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	dc06      	bgt.n	8008f5e <__sflush_r+0xfe>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f56:	81a3      	strh	r3, [r4, #12]
 8008f58:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5c:	e78e      	b.n	8008e7c <__sflush_r+0x1c>
 8008f5e:	4407      	add	r7, r0
 8008f60:	eba8 0800 	sub.w	r8, r8, r0
 8008f64:	e7e9      	b.n	8008f3a <__sflush_r+0xda>
 8008f66:	bf00      	nop
 8008f68:	20400001 	.word	0x20400001

08008f6c <_fflush_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	690b      	ldr	r3, [r1, #16]
 8008f70:	4605      	mov	r5, r0
 8008f72:	460c      	mov	r4, r1
 8008f74:	b913      	cbnz	r3, 8008f7c <_fflush_r+0x10>
 8008f76:	2500      	movs	r5, #0
 8008f78:	4628      	mov	r0, r5
 8008f7a:	bd38      	pop	{r3, r4, r5, pc}
 8008f7c:	b118      	cbz	r0, 8008f86 <_fflush_r+0x1a>
 8008f7e:	6983      	ldr	r3, [r0, #24]
 8008f80:	b90b      	cbnz	r3, 8008f86 <_fflush_r+0x1a>
 8008f82:	f000 f887 	bl	8009094 <__sinit>
 8008f86:	4b14      	ldr	r3, [pc, #80]	; (8008fd8 <_fflush_r+0x6c>)
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	d11b      	bne.n	8008fc4 <_fflush_r+0x58>
 8008f8c:	686c      	ldr	r4, [r5, #4]
 8008f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0ef      	beq.n	8008f76 <_fflush_r+0xa>
 8008f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f98:	07d0      	lsls	r0, r2, #31
 8008f9a:	d404      	bmi.n	8008fa6 <_fflush_r+0x3a>
 8008f9c:	0599      	lsls	r1, r3, #22
 8008f9e:	d402      	bmi.n	8008fa6 <_fflush_r+0x3a>
 8008fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fa2:	f000 f915 	bl	80091d0 <__retarget_lock_acquire_recursive>
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	4621      	mov	r1, r4
 8008faa:	f7ff ff59 	bl	8008e60 <__sflush_r>
 8008fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fb0:	07da      	lsls	r2, r3, #31
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	d4e0      	bmi.n	8008f78 <_fflush_r+0xc>
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	059b      	lsls	r3, r3, #22
 8008fba:	d4dd      	bmi.n	8008f78 <_fflush_r+0xc>
 8008fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fbe:	f000 f908 	bl	80091d2 <__retarget_lock_release_recursive>
 8008fc2:	e7d9      	b.n	8008f78 <_fflush_r+0xc>
 8008fc4:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <_fflush_r+0x70>)
 8008fc6:	429c      	cmp	r4, r3
 8008fc8:	d101      	bne.n	8008fce <_fflush_r+0x62>
 8008fca:	68ac      	ldr	r4, [r5, #8]
 8008fcc:	e7df      	b.n	8008f8e <_fflush_r+0x22>
 8008fce:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <_fflush_r+0x74>)
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	bf08      	it	eq
 8008fd4:	68ec      	ldreq	r4, [r5, #12]
 8008fd6:	e7da      	b.n	8008f8e <_fflush_r+0x22>
 8008fd8:	0800aff8 	.word	0x0800aff8
 8008fdc:	0800b018 	.word	0x0800b018
 8008fe0:	0800afd8 	.word	0x0800afd8

08008fe4 <std>:
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	4604      	mov	r4, r0
 8008fea:	e9c0 3300 	strd	r3, r3, [r0]
 8008fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ff2:	6083      	str	r3, [r0, #8]
 8008ff4:	8181      	strh	r1, [r0, #12]
 8008ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ff8:	81c2      	strh	r2, [r0, #14]
 8008ffa:	6183      	str	r3, [r0, #24]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	2208      	movs	r2, #8
 8009000:	305c      	adds	r0, #92	; 0x5c
 8009002:	f7fe ffa9 	bl	8007f58 <memset>
 8009006:	4b05      	ldr	r3, [pc, #20]	; (800901c <std+0x38>)
 8009008:	6263      	str	r3, [r4, #36]	; 0x24
 800900a:	4b05      	ldr	r3, [pc, #20]	; (8009020 <std+0x3c>)
 800900c:	62a3      	str	r3, [r4, #40]	; 0x28
 800900e:	4b05      	ldr	r3, [pc, #20]	; (8009024 <std+0x40>)
 8009010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009012:	4b05      	ldr	r3, [pc, #20]	; (8009028 <std+0x44>)
 8009014:	6224      	str	r4, [r4, #32]
 8009016:	6323      	str	r3, [r4, #48]	; 0x30
 8009018:	bd10      	pop	{r4, pc}
 800901a:	bf00      	nop
 800901c:	08009385 	.word	0x08009385
 8009020:	080093a7 	.word	0x080093a7
 8009024:	080093df 	.word	0x080093df
 8009028:	08009403 	.word	0x08009403

0800902c <_cleanup_r>:
 800902c:	4901      	ldr	r1, [pc, #4]	; (8009034 <_cleanup_r+0x8>)
 800902e:	f000 b8af 	b.w	8009190 <_fwalk_reent>
 8009032:	bf00      	nop
 8009034:	08008f6d 	.word	0x08008f6d

08009038 <__sfmoreglue>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	1e4a      	subs	r2, r1, #1
 800903c:	2568      	movs	r5, #104	; 0x68
 800903e:	4355      	muls	r5, r2
 8009040:	460e      	mov	r6, r1
 8009042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009046:	f7fe ffdf 	bl	8008008 <_malloc_r>
 800904a:	4604      	mov	r4, r0
 800904c:	b140      	cbz	r0, 8009060 <__sfmoreglue+0x28>
 800904e:	2100      	movs	r1, #0
 8009050:	e9c0 1600 	strd	r1, r6, [r0]
 8009054:	300c      	adds	r0, #12
 8009056:	60a0      	str	r0, [r4, #8]
 8009058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800905c:	f7fe ff7c 	bl	8007f58 <memset>
 8009060:	4620      	mov	r0, r4
 8009062:	bd70      	pop	{r4, r5, r6, pc}

08009064 <__sfp_lock_acquire>:
 8009064:	4801      	ldr	r0, [pc, #4]	; (800906c <__sfp_lock_acquire+0x8>)
 8009066:	f000 b8b3 	b.w	80091d0 <__retarget_lock_acquire_recursive>
 800906a:	bf00      	nop
 800906c:	20000588 	.word	0x20000588

08009070 <__sfp_lock_release>:
 8009070:	4801      	ldr	r0, [pc, #4]	; (8009078 <__sfp_lock_release+0x8>)
 8009072:	f000 b8ae 	b.w	80091d2 <__retarget_lock_release_recursive>
 8009076:	bf00      	nop
 8009078:	20000588 	.word	0x20000588

0800907c <__sinit_lock_acquire>:
 800907c:	4801      	ldr	r0, [pc, #4]	; (8009084 <__sinit_lock_acquire+0x8>)
 800907e:	f000 b8a7 	b.w	80091d0 <__retarget_lock_acquire_recursive>
 8009082:	bf00      	nop
 8009084:	20000583 	.word	0x20000583

08009088 <__sinit_lock_release>:
 8009088:	4801      	ldr	r0, [pc, #4]	; (8009090 <__sinit_lock_release+0x8>)
 800908a:	f000 b8a2 	b.w	80091d2 <__retarget_lock_release_recursive>
 800908e:	bf00      	nop
 8009090:	20000583 	.word	0x20000583

08009094 <__sinit>:
 8009094:	b510      	push	{r4, lr}
 8009096:	4604      	mov	r4, r0
 8009098:	f7ff fff0 	bl	800907c <__sinit_lock_acquire>
 800909c:	69a3      	ldr	r3, [r4, #24]
 800909e:	b11b      	cbz	r3, 80090a8 <__sinit+0x14>
 80090a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a4:	f7ff bff0 	b.w	8009088 <__sinit_lock_release>
 80090a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090ac:	6523      	str	r3, [r4, #80]	; 0x50
 80090ae:	4b13      	ldr	r3, [pc, #76]	; (80090fc <__sinit+0x68>)
 80090b0:	4a13      	ldr	r2, [pc, #76]	; (8009100 <__sinit+0x6c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80090b6:	42a3      	cmp	r3, r4
 80090b8:	bf04      	itt	eq
 80090ba:	2301      	moveq	r3, #1
 80090bc:	61a3      	streq	r3, [r4, #24]
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 f820 	bl	8009104 <__sfp>
 80090c4:	6060      	str	r0, [r4, #4]
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 f81c 	bl	8009104 <__sfp>
 80090cc:	60a0      	str	r0, [r4, #8]
 80090ce:	4620      	mov	r0, r4
 80090d0:	f000 f818 	bl	8009104 <__sfp>
 80090d4:	2200      	movs	r2, #0
 80090d6:	60e0      	str	r0, [r4, #12]
 80090d8:	2104      	movs	r1, #4
 80090da:	6860      	ldr	r0, [r4, #4]
 80090dc:	f7ff ff82 	bl	8008fe4 <std>
 80090e0:	68a0      	ldr	r0, [r4, #8]
 80090e2:	2201      	movs	r2, #1
 80090e4:	2109      	movs	r1, #9
 80090e6:	f7ff ff7d 	bl	8008fe4 <std>
 80090ea:	68e0      	ldr	r0, [r4, #12]
 80090ec:	2202      	movs	r2, #2
 80090ee:	2112      	movs	r1, #18
 80090f0:	f7ff ff78 	bl	8008fe4 <std>
 80090f4:	2301      	movs	r3, #1
 80090f6:	61a3      	str	r3, [r4, #24]
 80090f8:	e7d2      	b.n	80090a0 <__sinit+0xc>
 80090fa:	bf00      	nop
 80090fc:	0800adec 	.word	0x0800adec
 8009100:	0800902d 	.word	0x0800902d

08009104 <__sfp>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	4607      	mov	r7, r0
 8009108:	f7ff ffac 	bl	8009064 <__sfp_lock_acquire>
 800910c:	4b1e      	ldr	r3, [pc, #120]	; (8009188 <__sfp+0x84>)
 800910e:	681e      	ldr	r6, [r3, #0]
 8009110:	69b3      	ldr	r3, [r6, #24]
 8009112:	b913      	cbnz	r3, 800911a <__sfp+0x16>
 8009114:	4630      	mov	r0, r6
 8009116:	f7ff ffbd 	bl	8009094 <__sinit>
 800911a:	3648      	adds	r6, #72	; 0x48
 800911c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009120:	3b01      	subs	r3, #1
 8009122:	d503      	bpl.n	800912c <__sfp+0x28>
 8009124:	6833      	ldr	r3, [r6, #0]
 8009126:	b30b      	cbz	r3, 800916c <__sfp+0x68>
 8009128:	6836      	ldr	r6, [r6, #0]
 800912a:	e7f7      	b.n	800911c <__sfp+0x18>
 800912c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009130:	b9d5      	cbnz	r5, 8009168 <__sfp+0x64>
 8009132:	4b16      	ldr	r3, [pc, #88]	; (800918c <__sfp+0x88>)
 8009134:	60e3      	str	r3, [r4, #12]
 8009136:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800913a:	6665      	str	r5, [r4, #100]	; 0x64
 800913c:	f000 f847 	bl	80091ce <__retarget_lock_init_recursive>
 8009140:	f7ff ff96 	bl	8009070 <__sfp_lock_release>
 8009144:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009148:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800914c:	6025      	str	r5, [r4, #0]
 800914e:	61a5      	str	r5, [r4, #24]
 8009150:	2208      	movs	r2, #8
 8009152:	4629      	mov	r1, r5
 8009154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009158:	f7fe fefe 	bl	8007f58 <memset>
 800915c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009164:	4620      	mov	r0, r4
 8009166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009168:	3468      	adds	r4, #104	; 0x68
 800916a:	e7d9      	b.n	8009120 <__sfp+0x1c>
 800916c:	2104      	movs	r1, #4
 800916e:	4638      	mov	r0, r7
 8009170:	f7ff ff62 	bl	8009038 <__sfmoreglue>
 8009174:	4604      	mov	r4, r0
 8009176:	6030      	str	r0, [r6, #0]
 8009178:	2800      	cmp	r0, #0
 800917a:	d1d5      	bne.n	8009128 <__sfp+0x24>
 800917c:	f7ff ff78 	bl	8009070 <__sfp_lock_release>
 8009180:	230c      	movs	r3, #12
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	e7ee      	b.n	8009164 <__sfp+0x60>
 8009186:	bf00      	nop
 8009188:	0800adec 	.word	0x0800adec
 800918c:	ffff0001 	.word	0xffff0001

08009190 <_fwalk_reent>:
 8009190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009194:	4606      	mov	r6, r0
 8009196:	4688      	mov	r8, r1
 8009198:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800919c:	2700      	movs	r7, #0
 800919e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091a2:	f1b9 0901 	subs.w	r9, r9, #1
 80091a6:	d505      	bpl.n	80091b4 <_fwalk_reent+0x24>
 80091a8:	6824      	ldr	r4, [r4, #0]
 80091aa:	2c00      	cmp	r4, #0
 80091ac:	d1f7      	bne.n	800919e <_fwalk_reent+0xe>
 80091ae:	4638      	mov	r0, r7
 80091b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091b4:	89ab      	ldrh	r3, [r5, #12]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d907      	bls.n	80091ca <_fwalk_reent+0x3a>
 80091ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091be:	3301      	adds	r3, #1
 80091c0:	d003      	beq.n	80091ca <_fwalk_reent+0x3a>
 80091c2:	4629      	mov	r1, r5
 80091c4:	4630      	mov	r0, r6
 80091c6:	47c0      	blx	r8
 80091c8:	4307      	orrs	r7, r0
 80091ca:	3568      	adds	r5, #104	; 0x68
 80091cc:	e7e9      	b.n	80091a2 <_fwalk_reent+0x12>

080091ce <__retarget_lock_init_recursive>:
 80091ce:	4770      	bx	lr

080091d0 <__retarget_lock_acquire_recursive>:
 80091d0:	4770      	bx	lr

080091d2 <__retarget_lock_release_recursive>:
 80091d2:	4770      	bx	lr

080091d4 <__swhatbuf_r>:
 80091d4:	b570      	push	{r4, r5, r6, lr}
 80091d6:	460e      	mov	r6, r1
 80091d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091dc:	2900      	cmp	r1, #0
 80091de:	b096      	sub	sp, #88	; 0x58
 80091e0:	4614      	mov	r4, r2
 80091e2:	461d      	mov	r5, r3
 80091e4:	da07      	bge.n	80091f6 <__swhatbuf_r+0x22>
 80091e6:	2300      	movs	r3, #0
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	89b3      	ldrh	r3, [r6, #12]
 80091ec:	061a      	lsls	r2, r3, #24
 80091ee:	d410      	bmi.n	8009212 <__swhatbuf_r+0x3e>
 80091f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f4:	e00e      	b.n	8009214 <__swhatbuf_r+0x40>
 80091f6:	466a      	mov	r2, sp
 80091f8:	f000 f92a 	bl	8009450 <_fstat_r>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	dbf2      	blt.n	80091e6 <__swhatbuf_r+0x12>
 8009200:	9a01      	ldr	r2, [sp, #4]
 8009202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800920a:	425a      	negs	r2, r3
 800920c:	415a      	adcs	r2, r3
 800920e:	602a      	str	r2, [r5, #0]
 8009210:	e7ee      	b.n	80091f0 <__swhatbuf_r+0x1c>
 8009212:	2340      	movs	r3, #64	; 0x40
 8009214:	2000      	movs	r0, #0
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	b016      	add	sp, #88	; 0x58
 800921a:	bd70      	pop	{r4, r5, r6, pc}

0800921c <__smakebuf_r>:
 800921c:	898b      	ldrh	r3, [r1, #12]
 800921e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009220:	079d      	lsls	r5, r3, #30
 8009222:	4606      	mov	r6, r0
 8009224:	460c      	mov	r4, r1
 8009226:	d507      	bpl.n	8009238 <__smakebuf_r+0x1c>
 8009228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	6123      	str	r3, [r4, #16]
 8009230:	2301      	movs	r3, #1
 8009232:	6163      	str	r3, [r4, #20]
 8009234:	b002      	add	sp, #8
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	ab01      	add	r3, sp, #4
 800923a:	466a      	mov	r2, sp
 800923c:	f7ff ffca 	bl	80091d4 <__swhatbuf_r>
 8009240:	9900      	ldr	r1, [sp, #0]
 8009242:	4605      	mov	r5, r0
 8009244:	4630      	mov	r0, r6
 8009246:	f7fe fedf 	bl	8008008 <_malloc_r>
 800924a:	b948      	cbnz	r0, 8009260 <__smakebuf_r+0x44>
 800924c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009250:	059a      	lsls	r2, r3, #22
 8009252:	d4ef      	bmi.n	8009234 <__smakebuf_r+0x18>
 8009254:	f023 0303 	bic.w	r3, r3, #3
 8009258:	f043 0302 	orr.w	r3, r3, #2
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	e7e3      	b.n	8009228 <__smakebuf_r+0xc>
 8009260:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <__smakebuf_r+0x7c>)
 8009262:	62b3      	str	r3, [r6, #40]	; 0x28
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	6020      	str	r0, [r4, #0]
 8009268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800926c:	81a3      	strh	r3, [r4, #12]
 800926e:	9b00      	ldr	r3, [sp, #0]
 8009270:	6163      	str	r3, [r4, #20]
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	6120      	str	r0, [r4, #16]
 8009276:	b15b      	cbz	r3, 8009290 <__smakebuf_r+0x74>
 8009278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800927c:	4630      	mov	r0, r6
 800927e:	f000 f8f9 	bl	8009474 <_isatty_r>
 8009282:	b128      	cbz	r0, 8009290 <__smakebuf_r+0x74>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f023 0303 	bic.w	r3, r3, #3
 800928a:	f043 0301 	orr.w	r3, r3, #1
 800928e:	81a3      	strh	r3, [r4, #12]
 8009290:	89a0      	ldrh	r0, [r4, #12]
 8009292:	4305      	orrs	r5, r0
 8009294:	81a5      	strh	r5, [r4, #12]
 8009296:	e7cd      	b.n	8009234 <__smakebuf_r+0x18>
 8009298:	0800902d 	.word	0x0800902d

0800929c <memcpy>:
 800929c:	440a      	add	r2, r1
 800929e:	4291      	cmp	r1, r2
 80092a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80092a4:	d100      	bne.n	80092a8 <memcpy+0xc>
 80092a6:	4770      	bx	lr
 80092a8:	b510      	push	{r4, lr}
 80092aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092b2:	4291      	cmp	r1, r2
 80092b4:	d1f9      	bne.n	80092aa <memcpy+0xe>
 80092b6:	bd10      	pop	{r4, pc}

080092b8 <memmove>:
 80092b8:	4288      	cmp	r0, r1
 80092ba:	b510      	push	{r4, lr}
 80092bc:	eb01 0402 	add.w	r4, r1, r2
 80092c0:	d902      	bls.n	80092c8 <memmove+0x10>
 80092c2:	4284      	cmp	r4, r0
 80092c4:	4623      	mov	r3, r4
 80092c6:	d807      	bhi.n	80092d8 <memmove+0x20>
 80092c8:	1e43      	subs	r3, r0, #1
 80092ca:	42a1      	cmp	r1, r4
 80092cc:	d008      	beq.n	80092e0 <memmove+0x28>
 80092ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092d6:	e7f8      	b.n	80092ca <memmove+0x12>
 80092d8:	4402      	add	r2, r0
 80092da:	4601      	mov	r1, r0
 80092dc:	428a      	cmp	r2, r1
 80092de:	d100      	bne.n	80092e2 <memmove+0x2a>
 80092e0:	bd10      	pop	{r4, pc}
 80092e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092ea:	e7f7      	b.n	80092dc <memmove+0x24>

080092ec <_malloc_usable_size_r>:
 80092ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092f0:	1f18      	subs	r0, r3, #4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bfbc      	itt	lt
 80092f6:	580b      	ldrlt	r3, [r1, r0]
 80092f8:	18c0      	addlt	r0, r0, r3
 80092fa:	4770      	bx	lr

080092fc <_raise_r>:
 80092fc:	291f      	cmp	r1, #31
 80092fe:	b538      	push	{r3, r4, r5, lr}
 8009300:	4604      	mov	r4, r0
 8009302:	460d      	mov	r5, r1
 8009304:	d904      	bls.n	8009310 <_raise_r+0x14>
 8009306:	2316      	movs	r3, #22
 8009308:	6003      	str	r3, [r0, #0]
 800930a:	f04f 30ff 	mov.w	r0, #4294967295
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009312:	b112      	cbz	r2, 800931a <_raise_r+0x1e>
 8009314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009318:	b94b      	cbnz	r3, 800932e <_raise_r+0x32>
 800931a:	4620      	mov	r0, r4
 800931c:	f000 f830 	bl	8009380 <_getpid_r>
 8009320:	462a      	mov	r2, r5
 8009322:	4601      	mov	r1, r0
 8009324:	4620      	mov	r0, r4
 8009326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800932a:	f000 b817 	b.w	800935c <_kill_r>
 800932e:	2b01      	cmp	r3, #1
 8009330:	d00a      	beq.n	8009348 <_raise_r+0x4c>
 8009332:	1c59      	adds	r1, r3, #1
 8009334:	d103      	bne.n	800933e <_raise_r+0x42>
 8009336:	2316      	movs	r3, #22
 8009338:	6003      	str	r3, [r0, #0]
 800933a:	2001      	movs	r0, #1
 800933c:	e7e7      	b.n	800930e <_raise_r+0x12>
 800933e:	2400      	movs	r4, #0
 8009340:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009344:	4628      	mov	r0, r5
 8009346:	4798      	blx	r3
 8009348:	2000      	movs	r0, #0
 800934a:	e7e0      	b.n	800930e <_raise_r+0x12>

0800934c <raise>:
 800934c:	4b02      	ldr	r3, [pc, #8]	; (8009358 <raise+0xc>)
 800934e:	4601      	mov	r1, r0
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	f7ff bfd3 	b.w	80092fc <_raise_r>
 8009356:	bf00      	nop
 8009358:	2000001c 	.word	0x2000001c

0800935c <_kill_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4d07      	ldr	r5, [pc, #28]	; (800937c <_kill_r+0x20>)
 8009360:	2300      	movs	r3, #0
 8009362:	4604      	mov	r4, r0
 8009364:	4608      	mov	r0, r1
 8009366:	4611      	mov	r1, r2
 8009368:	602b      	str	r3, [r5, #0]
 800936a:	f7f9 f82d 	bl	80023c8 <_kill>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	d102      	bne.n	8009378 <_kill_r+0x1c>
 8009372:	682b      	ldr	r3, [r5, #0]
 8009374:	b103      	cbz	r3, 8009378 <_kill_r+0x1c>
 8009376:	6023      	str	r3, [r4, #0]
 8009378:	bd38      	pop	{r3, r4, r5, pc}
 800937a:	bf00      	nop
 800937c:	2000057c 	.word	0x2000057c

08009380 <_getpid_r>:
 8009380:	f7f9 b81a 	b.w	80023b8 <_getpid>

08009384 <__sread>:
 8009384:	b510      	push	{r4, lr}
 8009386:	460c      	mov	r4, r1
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	f000 f894 	bl	80094b8 <_read_r>
 8009390:	2800      	cmp	r0, #0
 8009392:	bfab      	itete	ge
 8009394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009396:	89a3      	ldrhlt	r3, [r4, #12]
 8009398:	181b      	addge	r3, r3, r0
 800939a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800939e:	bfac      	ite	ge
 80093a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80093a2:	81a3      	strhlt	r3, [r4, #12]
 80093a4:	bd10      	pop	{r4, pc}

080093a6 <__swrite>:
 80093a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093aa:	461f      	mov	r7, r3
 80093ac:	898b      	ldrh	r3, [r1, #12]
 80093ae:	05db      	lsls	r3, r3, #23
 80093b0:	4605      	mov	r5, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	4616      	mov	r6, r2
 80093b6:	d505      	bpl.n	80093c4 <__swrite+0x1e>
 80093b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093bc:	2302      	movs	r3, #2
 80093be:	2200      	movs	r2, #0
 80093c0:	f000 f868 	bl	8009494 <_lseek_r>
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	4632      	mov	r2, r6
 80093d2:	463b      	mov	r3, r7
 80093d4:	4628      	mov	r0, r5
 80093d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093da:	f000 b817 	b.w	800940c <_write_r>

080093de <__sseek>:
 80093de:	b510      	push	{r4, lr}
 80093e0:	460c      	mov	r4, r1
 80093e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e6:	f000 f855 	bl	8009494 <_lseek_r>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	bf15      	itete	ne
 80093f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80093f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093fa:	81a3      	strheq	r3, [r4, #12]
 80093fc:	bf18      	it	ne
 80093fe:	81a3      	strhne	r3, [r4, #12]
 8009400:	bd10      	pop	{r4, pc}

08009402 <__sclose>:
 8009402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009406:	f000 b813 	b.w	8009430 <_close_r>
	...

0800940c <_write_r>:
 800940c:	b538      	push	{r3, r4, r5, lr}
 800940e:	4d07      	ldr	r5, [pc, #28]	; (800942c <_write_r+0x20>)
 8009410:	4604      	mov	r4, r0
 8009412:	4608      	mov	r0, r1
 8009414:	4611      	mov	r1, r2
 8009416:	2200      	movs	r2, #0
 8009418:	602a      	str	r2, [r5, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	f7f9 f80b 	bl	8002436 <_write>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_write_r+0x1e>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_write_r+0x1e>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	2000057c 	.word	0x2000057c

08009430 <_close_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d06      	ldr	r5, [pc, #24]	; (800944c <_close_r+0x1c>)
 8009434:	2300      	movs	r3, #0
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	602b      	str	r3, [r5, #0]
 800943c:	f7f9 f817 	bl	800246e <_close>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_close_r+0x1a>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_close_r+0x1a>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	2000057c 	.word	0x2000057c

08009450 <_fstat_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d07      	ldr	r5, [pc, #28]	; (8009470 <_fstat_r+0x20>)
 8009454:	2300      	movs	r3, #0
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	4611      	mov	r1, r2
 800945c:	602b      	str	r3, [r5, #0]
 800945e:	f7f9 f812 	bl	8002486 <_fstat>
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	d102      	bne.n	800946c <_fstat_r+0x1c>
 8009466:	682b      	ldr	r3, [r5, #0]
 8009468:	b103      	cbz	r3, 800946c <_fstat_r+0x1c>
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	bd38      	pop	{r3, r4, r5, pc}
 800946e:	bf00      	nop
 8009470:	2000057c 	.word	0x2000057c

08009474 <_isatty_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4d06      	ldr	r5, [pc, #24]	; (8009490 <_isatty_r+0x1c>)
 8009478:	2300      	movs	r3, #0
 800947a:	4604      	mov	r4, r0
 800947c:	4608      	mov	r0, r1
 800947e:	602b      	str	r3, [r5, #0]
 8009480:	f7f9 f811 	bl	80024a6 <_isatty>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	d102      	bne.n	800948e <_isatty_r+0x1a>
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	b103      	cbz	r3, 800948e <_isatty_r+0x1a>
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	bd38      	pop	{r3, r4, r5, pc}
 8009490:	2000057c 	.word	0x2000057c

08009494 <_lseek_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d07      	ldr	r5, [pc, #28]	; (80094b4 <_lseek_r+0x20>)
 8009498:	4604      	mov	r4, r0
 800949a:	4608      	mov	r0, r1
 800949c:	4611      	mov	r1, r2
 800949e:	2200      	movs	r2, #0
 80094a0:	602a      	str	r2, [r5, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	f7f9 f80a 	bl	80024bc <_lseek>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d102      	bne.n	80094b2 <_lseek_r+0x1e>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	b103      	cbz	r3, 80094b2 <_lseek_r+0x1e>
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	2000057c 	.word	0x2000057c

080094b8 <_read_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d07      	ldr	r5, [pc, #28]	; (80094d8 <_read_r+0x20>)
 80094bc:	4604      	mov	r4, r0
 80094be:	4608      	mov	r0, r1
 80094c0:	4611      	mov	r1, r2
 80094c2:	2200      	movs	r2, #0
 80094c4:	602a      	str	r2, [r5, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	f7f8 ff98 	bl	80023fc <_read>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_read_r+0x1e>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_read_r+0x1e>
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	2000057c 	.word	0x2000057c
 80094dc:	00000000 	.word	0x00000000

080094e0 <sin>:
 80094e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094e2:	eeb0 7b40 	vmov.f64	d7, d0
 80094e6:	ee17 3a90 	vmov	r3, s15
 80094ea:	4a1f      	ldr	r2, [pc, #124]	; (8009568 <sin+0x88>)
 80094ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094f0:	4293      	cmp	r3, r2
 80094f2:	dc05      	bgt.n	8009500 <sin+0x20>
 80094f4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8009560 <sin+0x80>
 80094f8:	2000      	movs	r0, #0
 80094fa:	f000 fc65 	bl	8009dc8 <__kernel_sin>
 80094fe:	e004      	b.n	800950a <sin+0x2a>
 8009500:	4a1a      	ldr	r2, [pc, #104]	; (800956c <sin+0x8c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	dd04      	ble.n	8009510 <sin+0x30>
 8009506:	ee30 0b40 	vsub.f64	d0, d0, d0
 800950a:	b005      	add	sp, #20
 800950c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009510:	4668      	mov	r0, sp
 8009512:	f000 f82d 	bl	8009570 <__ieee754_rem_pio2>
 8009516:	f000 0003 	and.w	r0, r0, #3
 800951a:	2801      	cmp	r0, #1
 800951c:	d008      	beq.n	8009530 <sin+0x50>
 800951e:	2802      	cmp	r0, #2
 8009520:	d00d      	beq.n	800953e <sin+0x5e>
 8009522:	b9b0      	cbnz	r0, 8009552 <sin+0x72>
 8009524:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009528:	ed9d 0b00 	vldr	d0, [sp]
 800952c:	2001      	movs	r0, #1
 800952e:	e7e4      	b.n	80094fa <sin+0x1a>
 8009530:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009534:	ed9d 0b00 	vldr	d0, [sp]
 8009538:	f000 f95a 	bl	80097f0 <__kernel_cos>
 800953c:	e7e5      	b.n	800950a <sin+0x2a>
 800953e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009542:	ed9d 0b00 	vldr	d0, [sp]
 8009546:	2001      	movs	r0, #1
 8009548:	f000 fc3e 	bl	8009dc8 <__kernel_sin>
 800954c:	eeb1 0b40 	vneg.f64	d0, d0
 8009550:	e7db      	b.n	800950a <sin+0x2a>
 8009552:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009556:	ed9d 0b00 	vldr	d0, [sp]
 800955a:	f000 f949 	bl	80097f0 <__kernel_cos>
 800955e:	e7f5      	b.n	800954c <sin+0x6c>
	...
 8009568:	3fe921fb 	.word	0x3fe921fb
 800956c:	7fefffff 	.word	0x7fefffff

08009570 <__ieee754_rem_pio2>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	eeb0 7b40 	vmov.f64	d7, d0
 8009576:	ee17 5a90 	vmov	r5, s15
 800957a:	4b97      	ldr	r3, [pc, #604]	; (80097d8 <__ieee754_rem_pio2+0x268>)
 800957c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009580:	429e      	cmp	r6, r3
 8009582:	b088      	sub	sp, #32
 8009584:	4604      	mov	r4, r0
 8009586:	dc07      	bgt.n	8009598 <__ieee754_rem_pio2+0x28>
 8009588:	2200      	movs	r2, #0
 800958a:	2300      	movs	r3, #0
 800958c:	ed84 0b00 	vstr	d0, [r4]
 8009590:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009594:	2000      	movs	r0, #0
 8009596:	e01b      	b.n	80095d0 <__ieee754_rem_pio2+0x60>
 8009598:	4b90      	ldr	r3, [pc, #576]	; (80097dc <__ieee754_rem_pio2+0x26c>)
 800959a:	429e      	cmp	r6, r3
 800959c:	dc3b      	bgt.n	8009616 <__ieee754_rem_pio2+0xa6>
 800959e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80095a2:	2d00      	cmp	r5, #0
 80095a4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8009798 <__ieee754_rem_pio2+0x228>
 80095a8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80095ac:	dd19      	ble.n	80095e2 <__ieee754_rem_pio2+0x72>
 80095ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 80095b2:	429e      	cmp	r6, r3
 80095b4:	d00e      	beq.n	80095d4 <__ieee754_rem_pio2+0x64>
 80095b6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80097a0 <__ieee754_rem_pio2+0x230>
 80095ba:	ee37 5b46 	vsub.f64	d5, d7, d6
 80095be:	ee37 7b45 	vsub.f64	d7, d7, d5
 80095c2:	ed84 5b00 	vstr	d5, [r4]
 80095c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80095ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80095ce:	2001      	movs	r0, #1
 80095d0:	b008      	add	sp, #32
 80095d2:	bd70      	pop	{r4, r5, r6, pc}
 80095d4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80097a8 <__ieee754_rem_pio2+0x238>
 80095d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80095dc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80097b0 <__ieee754_rem_pio2+0x240>
 80095e0:	e7eb      	b.n	80095ba <__ieee754_rem_pio2+0x4a>
 80095e2:	429e      	cmp	r6, r3
 80095e4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80095e8:	d00e      	beq.n	8009608 <__ieee754_rem_pio2+0x98>
 80095ea:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80097a0 <__ieee754_rem_pio2+0x230>
 80095ee:	ee37 5b06 	vadd.f64	d5, d7, d6
 80095f2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80095f6:	ed84 5b00 	vstr	d5, [r4]
 80095fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80095fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009602:	ed84 7b02 	vstr	d7, [r4, #8]
 8009606:	e7e3      	b.n	80095d0 <__ieee754_rem_pio2+0x60>
 8009608:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80097a8 <__ieee754_rem_pio2+0x238>
 800960c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009610:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80097b0 <__ieee754_rem_pio2+0x240>
 8009614:	e7eb      	b.n	80095ee <__ieee754_rem_pio2+0x7e>
 8009616:	4b72      	ldr	r3, [pc, #456]	; (80097e0 <__ieee754_rem_pio2+0x270>)
 8009618:	429e      	cmp	r6, r3
 800961a:	dc6e      	bgt.n	80096fa <__ieee754_rem_pio2+0x18a>
 800961c:	f000 fc2c 	bl	8009e78 <fabs>
 8009620:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009624:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80097b8 <__ieee754_rem_pio2+0x248>
 8009628:	eea0 7b06 	vfma.f64	d7, d0, d6
 800962c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009630:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8009634:	ee17 0a90 	vmov	r0, s15
 8009638:	eeb1 4b45 	vneg.f64	d4, d5
 800963c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8009798 <__ieee754_rem_pio2+0x228>
 8009640:	eea5 0b47 	vfms.f64	d0, d5, d7
 8009644:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80097a0 <__ieee754_rem_pio2+0x230>
 8009648:	281f      	cmp	r0, #31
 800964a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800964e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009652:	dc08      	bgt.n	8009666 <__ieee754_rem_pio2+0xf6>
 8009654:	4b63      	ldr	r3, [pc, #396]	; (80097e4 <__ieee754_rem_pio2+0x274>)
 8009656:	1e42      	subs	r2, r0, #1
 8009658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800965c:	42b3      	cmp	r3, r6
 800965e:	d002      	beq.n	8009666 <__ieee754_rem_pio2+0xf6>
 8009660:	ed84 6b00 	vstr	d6, [r4]
 8009664:	e024      	b.n	80096b0 <__ieee754_rem_pio2+0x140>
 8009666:	ee16 3a90 	vmov	r3, s13
 800966a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800966e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8009672:	2b10      	cmp	r3, #16
 8009674:	ea4f 5226 	mov.w	r2, r6, asr #20
 8009678:	ddf2      	ble.n	8009660 <__ieee754_rem_pio2+0xf0>
 800967a:	eeb0 6b40 	vmov.f64	d6, d0
 800967e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80097a8 <__ieee754_rem_pio2+0x238>
 8009682:	eea4 6b03 	vfma.f64	d6, d4, d3
 8009686:	ee30 7b46 	vsub.f64	d7, d0, d6
 800968a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800968e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80097b0 <__ieee754_rem_pio2+0x240>
 8009692:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8009696:	ee36 3b47 	vsub.f64	d3, d6, d7
 800969a:	ee13 3a90 	vmov	r3, s7
 800969e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	2b31      	cmp	r3, #49	; 0x31
 80096a6:	dc17      	bgt.n	80096d8 <__ieee754_rem_pio2+0x168>
 80096a8:	eeb0 0b46 	vmov.f64	d0, d6
 80096ac:	ed84 3b00 	vstr	d3, [r4]
 80096b0:	ed94 6b00 	vldr	d6, [r4]
 80096b4:	2d00      	cmp	r5, #0
 80096b6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80096ba:	ee30 7b47 	vsub.f64	d7, d0, d7
 80096be:	ed84 7b02 	vstr	d7, [r4, #8]
 80096c2:	da85      	bge.n	80095d0 <__ieee754_rem_pio2+0x60>
 80096c4:	eeb1 6b46 	vneg.f64	d6, d6
 80096c8:	ed84 6b00 	vstr	d6, [r4]
 80096cc:	eeb1 7b47 	vneg.f64	d7, d7
 80096d0:	4240      	negs	r0, r0
 80096d2:	ed84 7b02 	vstr	d7, [r4, #8]
 80096d6:	e77b      	b.n	80095d0 <__ieee754_rem_pio2+0x60>
 80096d8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80097c0 <__ieee754_rem_pio2+0x250>
 80096dc:	eeb0 0b46 	vmov.f64	d0, d6
 80096e0:	eea4 0b03 	vfma.f64	d0, d4, d3
 80096e4:	ee36 7b40 	vsub.f64	d7, d6, d0
 80096e8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80097c8 <__ieee754_rem_pio2+0x258>
 80096ec:	eea4 7b03 	vfma.f64	d7, d4, d3
 80096f0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80096f4:	ee30 6b47 	vsub.f64	d6, d0, d7
 80096f8:	e7b2      	b.n	8009660 <__ieee754_rem_pio2+0xf0>
 80096fa:	4b3b      	ldr	r3, [pc, #236]	; (80097e8 <__ieee754_rem_pio2+0x278>)
 80096fc:	429e      	cmp	r6, r3
 80096fe:	dd06      	ble.n	800970e <__ieee754_rem_pio2+0x19e>
 8009700:	ee30 7b40 	vsub.f64	d7, d0, d0
 8009704:	ed80 7b02 	vstr	d7, [r0, #8]
 8009708:	ed80 7b00 	vstr	d7, [r0]
 800970c:	e742      	b.n	8009594 <__ieee754_rem_pio2+0x24>
 800970e:	1532      	asrs	r2, r6, #20
 8009710:	ee10 0a10 	vmov	r0, s0
 8009714:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8009718:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800971c:	ec41 0b17 	vmov	d7, r0, r1
 8009720:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009724:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80097d0 <__ieee754_rem_pio2+0x260>
 8009728:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800972c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009730:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009734:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009738:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800973c:	a902      	add	r1, sp, #8
 800973e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8009742:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009746:	ed8d 6b04 	vstr	d6, [sp, #16]
 800974a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800974e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009752:	2603      	movs	r6, #3
 8009754:	4608      	mov	r0, r1
 8009756:	ed91 7b04 	vldr	d7, [r1, #16]
 800975a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009762:	4633      	mov	r3, r6
 8009764:	f1a1 0108 	sub.w	r1, r1, #8
 8009768:	f106 36ff 	add.w	r6, r6, #4294967295
 800976c:	d0f3      	beq.n	8009756 <__ieee754_rem_pio2+0x1e6>
 800976e:	491f      	ldr	r1, [pc, #124]	; (80097ec <__ieee754_rem_pio2+0x27c>)
 8009770:	9101      	str	r1, [sp, #4]
 8009772:	2102      	movs	r1, #2
 8009774:	9100      	str	r1, [sp, #0]
 8009776:	4621      	mov	r1, r4
 8009778:	f000 f8a6 	bl	80098c8 <__kernel_rem_pio2>
 800977c:	2d00      	cmp	r5, #0
 800977e:	f6bf af27 	bge.w	80095d0 <__ieee754_rem_pio2+0x60>
 8009782:	ed94 7b00 	vldr	d7, [r4]
 8009786:	eeb1 7b47 	vneg.f64	d7, d7
 800978a:	ed84 7b00 	vstr	d7, [r4]
 800978e:	ed94 7b02 	vldr	d7, [r4, #8]
 8009792:	e79b      	b.n	80096cc <__ieee754_rem_pio2+0x15c>
 8009794:	f3af 8000 	nop.w
 8009798:	54400000 	.word	0x54400000
 800979c:	3ff921fb 	.word	0x3ff921fb
 80097a0:	1a626331 	.word	0x1a626331
 80097a4:	3dd0b461 	.word	0x3dd0b461
 80097a8:	1a600000 	.word	0x1a600000
 80097ac:	3dd0b461 	.word	0x3dd0b461
 80097b0:	2e037073 	.word	0x2e037073
 80097b4:	3ba3198a 	.word	0x3ba3198a
 80097b8:	6dc9c883 	.word	0x6dc9c883
 80097bc:	3fe45f30 	.word	0x3fe45f30
 80097c0:	2e000000 	.word	0x2e000000
 80097c4:	3ba3198a 	.word	0x3ba3198a
 80097c8:	252049c1 	.word	0x252049c1
 80097cc:	397b839a 	.word	0x397b839a
 80097d0:	00000000 	.word	0x00000000
 80097d4:	41700000 	.word	0x41700000
 80097d8:	3fe921fb 	.word	0x3fe921fb
 80097dc:	4002d97b 	.word	0x4002d97b
 80097e0:	413921fb 	.word	0x413921fb
 80097e4:	0800b038 	.word	0x0800b038
 80097e8:	7fefffff 	.word	0x7fefffff
 80097ec:	0800b0b8 	.word	0x0800b0b8

080097f0 <__kernel_cos>:
 80097f0:	ee10 1a90 	vmov	r1, s1
 80097f4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80097f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80097fc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8009800:	da05      	bge.n	800980e <__kernel_cos+0x1e>
 8009802:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8009806:	ee17 3a90 	vmov	r3, s15
 800980a:	2b00      	cmp	r3, #0
 800980c:	d03d      	beq.n	800988a <__kernel_cos+0x9a>
 800980e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8009812:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8009890 <__kernel_cos+0xa0>
 8009816:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009898 <__kernel_cos+0xa8>
 800981a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800981e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80098a0 <__kernel_cos+0xb0>
 8009822:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009826:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80098a8 <__kernel_cos+0xb8>
 800982a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800982e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80098b0 <__kernel_cos+0xc0>
 8009832:	4b23      	ldr	r3, [pc, #140]	; (80098c0 <__kernel_cos+0xd0>)
 8009834:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009838:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80098b8 <__kernel_cos+0xc8>
 800983c:	4299      	cmp	r1, r3
 800983e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8009842:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009846:	ee26 5b03 	vmul.f64	d5, d6, d3
 800984a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800984e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8009852:	eea3 6b05 	vfma.f64	d6, d3, d5
 8009856:	dc04      	bgt.n	8009862 <__kernel_cos+0x72>
 8009858:	ee37 6b46 	vsub.f64	d6, d7, d6
 800985c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8009860:	4770      	bx	lr
 8009862:	4b18      	ldr	r3, [pc, #96]	; (80098c4 <__kernel_cos+0xd4>)
 8009864:	4299      	cmp	r1, r3
 8009866:	dc0d      	bgt.n	8009884 <__kernel_cos+0x94>
 8009868:	2200      	movs	r2, #0
 800986a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800986e:	ec43 2b15 	vmov	d5, r2, r3
 8009872:	ee34 0b45 	vsub.f64	d0, d4, d5
 8009876:	ee37 7b45 	vsub.f64	d7, d7, d5
 800987a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800987e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8009882:	4770      	bx	lr
 8009884:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8009888:	e7f3      	b.n	8009872 <__kernel_cos+0x82>
 800988a:	eeb0 0b44 	vmov.f64	d0, d4
 800988e:	4770      	bx	lr
 8009890:	be8838d4 	.word	0xbe8838d4
 8009894:	bda8fae9 	.word	0xbda8fae9
 8009898:	bdb4b1c4 	.word	0xbdb4b1c4
 800989c:	3e21ee9e 	.word	0x3e21ee9e
 80098a0:	809c52ad 	.word	0x809c52ad
 80098a4:	be927e4f 	.word	0xbe927e4f
 80098a8:	19cb1590 	.word	0x19cb1590
 80098ac:	3efa01a0 	.word	0x3efa01a0
 80098b0:	16c15177 	.word	0x16c15177
 80098b4:	bf56c16c 	.word	0xbf56c16c
 80098b8:	5555554c 	.word	0x5555554c
 80098bc:	3fa55555 	.word	0x3fa55555
 80098c0:	3fd33332 	.word	0x3fd33332
 80098c4:	3fe90000 	.word	0x3fe90000

080098c8 <__kernel_rem_pio2>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	ed2d 8b06 	vpush	{d8-d10}
 80098d0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80098d4:	469b      	mov	fp, r3
 80098d6:	460f      	mov	r7, r1
 80098d8:	4bcf      	ldr	r3, [pc, #828]	; (8009c18 <__kernel_rem_pio2+0x350>)
 80098da:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80098dc:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80098e0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80098e4:	9000      	str	r0, [sp, #0]
 80098e6:	f112 0f14 	cmn.w	r2, #20
 80098ea:	bfa8      	it	ge
 80098ec:	2318      	movge	r3, #24
 80098ee:	f10b 31ff 	add.w	r1, fp, #4294967295
 80098f2:	bfb8      	it	lt
 80098f4:	2300      	movlt	r3, #0
 80098f6:	f06f 0417 	mvn.w	r4, #23
 80098fa:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8009c00 <__kernel_rem_pio2+0x338>
 80098fe:	bfa4      	itt	ge
 8009900:	f1a2 0a03 	subge.w	sl, r2, #3
 8009904:	fb9a f3f3 	sdivge	r3, sl, r3
 8009908:	fb03 4404 	mla	r4, r3, r4, r4
 800990c:	1a5d      	subs	r5, r3, r1
 800990e:	4414      	add	r4, r2
 8009910:	eb09 0601 	add.w	r6, r9, r1
 8009914:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8009918:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800991c:	2200      	movs	r2, #0
 800991e:	42b2      	cmp	r2, r6
 8009920:	dd12      	ble.n	8009948 <__kernel_rem_pio2+0x80>
 8009922:	aa18      	add	r2, sp, #96	; 0x60
 8009924:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8009928:	460e      	mov	r6, r1
 800992a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800992e:	f1cb 0a01 	rsb	sl, fp, #1
 8009932:	eb0a 0006 	add.w	r0, sl, r6
 8009936:	4581      	cmp	r9, r0
 8009938:	db25      	blt.n	8009986 <__kernel_rem_pio2+0xbe>
 800993a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8009c00 <__kernel_rem_pio2+0x338>
 800993e:	f8dd e000 	ldr.w	lr, [sp]
 8009942:	4615      	mov	r5, r2
 8009944:	2000      	movs	r0, #0
 8009946:	e015      	b.n	8009974 <__kernel_rem_pio2+0xac>
 8009948:	42d5      	cmn	r5, r2
 800994a:	d409      	bmi.n	8009960 <__kernel_rem_pio2+0x98>
 800994c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8009950:	ee07 0a90 	vmov	s15, r0
 8009954:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009958:	eca8 7b02 	vstmia	r8!, {d7}
 800995c:	3201      	adds	r2, #1
 800995e:	e7de      	b.n	800991e <__kernel_rem_pio2+0x56>
 8009960:	eeb0 7b46 	vmov.f64	d7, d6
 8009964:	e7f8      	b.n	8009958 <__kernel_rem_pio2+0x90>
 8009966:	ecbe 5b02 	vldmia	lr!, {d5}
 800996a:	ed95 6b00 	vldr	d6, [r5]
 800996e:	3001      	adds	r0, #1
 8009970:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009974:	4288      	cmp	r0, r1
 8009976:	f1a5 0508 	sub.w	r5, r5, #8
 800997a:	ddf4      	ble.n	8009966 <__kernel_rem_pio2+0x9e>
 800997c:	eca8 7b02 	vstmia	r8!, {d7}
 8009980:	3208      	adds	r2, #8
 8009982:	3601      	adds	r6, #1
 8009984:	e7d5      	b.n	8009932 <__kernel_rem_pio2+0x6a>
 8009986:	aa04      	add	r2, sp, #16
 8009988:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8009c08 <__kernel_rem_pio2+0x340>
 800998c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8009c10 <__kernel_rem_pio2+0x348>
 8009990:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8009994:	9201      	str	r2, [sp, #4]
 8009996:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800999a:	464e      	mov	r6, r9
 800999c:	ab90      	add	r3, sp, #576	; 0x240
 800999e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80099a2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80099a6:	ab04      	add	r3, sp, #16
 80099a8:	4618      	mov	r0, r3
 80099aa:	4632      	mov	r2, r6
 80099ac:	2a00      	cmp	r2, #0
 80099ae:	dc4e      	bgt.n	8009a4e <__kernel_rem_pio2+0x186>
 80099b0:	4620      	mov	r0, r4
 80099b2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80099b6:	f000 fadf 	bl	8009f78 <scalbn>
 80099ba:	eeb0 8b40 	vmov.f64	d8, d0
 80099be:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80099c2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80099c6:	f000 fa63 	bl	8009e90 <floor>
 80099ca:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80099ce:	eea0 8b47 	vfms.f64	d8, d0, d7
 80099d2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80099d6:	2c00      	cmp	r4, #0
 80099d8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80099dc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80099e0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80099e4:	ee17 8a90 	vmov	r8, s15
 80099e8:	dd46      	ble.n	8009a78 <__kernel_rem_pio2+0x1b0>
 80099ea:	1e70      	subs	r0, r6, #1
 80099ec:	aa04      	add	r2, sp, #16
 80099ee:	f1c4 0c18 	rsb	ip, r4, #24
 80099f2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80099f6:	fa45 f20c 	asr.w	r2, r5, ip
 80099fa:	4490      	add	r8, r2
 80099fc:	fa02 f20c 	lsl.w	r2, r2, ip
 8009a00:	1aad      	subs	r5, r5, r2
 8009a02:	aa04      	add	r2, sp, #16
 8009a04:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8009a08:	f1c4 0217 	rsb	r2, r4, #23
 8009a0c:	4115      	asrs	r5, r2
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	dd41      	ble.n	8009a96 <__kernel_rem_pio2+0x1ce>
 8009a12:	f04f 0c00 	mov.w	ip, #0
 8009a16:	f108 0801 	add.w	r8, r8, #1
 8009a1a:	4660      	mov	r0, ip
 8009a1c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8009a20:	4566      	cmp	r6, ip
 8009a22:	dc69      	bgt.n	8009af8 <__kernel_rem_pio2+0x230>
 8009a24:	2c00      	cmp	r4, #0
 8009a26:	dd03      	ble.n	8009a30 <__kernel_rem_pio2+0x168>
 8009a28:	2c01      	cmp	r4, #1
 8009a2a:	d076      	beq.n	8009b1a <__kernel_rem_pio2+0x252>
 8009a2c:	2c02      	cmp	r4, #2
 8009a2e:	d07f      	beq.n	8009b30 <__kernel_rem_pio2+0x268>
 8009a30:	2d02      	cmp	r5, #2
 8009a32:	d130      	bne.n	8009a96 <__kernel_rem_pio2+0x1ce>
 8009a34:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009a38:	ee30 8b48 	vsub.f64	d8, d0, d8
 8009a3c:	b358      	cbz	r0, 8009a96 <__kernel_rem_pio2+0x1ce>
 8009a3e:	4620      	mov	r0, r4
 8009a40:	9102      	str	r1, [sp, #8]
 8009a42:	f000 fa99 	bl	8009f78 <scalbn>
 8009a46:	9902      	ldr	r1, [sp, #8]
 8009a48:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009a4c:	e023      	b.n	8009a96 <__kernel_rem_pio2+0x1ce>
 8009a4e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8009a52:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009a56:	3a01      	subs	r2, #1
 8009a58:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8009a5c:	ad68      	add	r5, sp, #416	; 0x1a0
 8009a5e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009a62:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009a66:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8009a6a:	eca0 0a01 	vstmia	r0!, {s0}
 8009a6e:	ed95 0b00 	vldr	d0, [r5]
 8009a72:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009a76:	e799      	b.n	80099ac <__kernel_rem_pio2+0xe4>
 8009a78:	d105      	bne.n	8009a86 <__kernel_rem_pio2+0x1be>
 8009a7a:	1e72      	subs	r2, r6, #1
 8009a7c:	a804      	add	r0, sp, #16
 8009a7e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8009a82:	15ed      	asrs	r5, r5, #23
 8009a84:	e7c3      	b.n	8009a0e <__kernel_rem_pio2+0x146>
 8009a86:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009a8a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a92:	da2f      	bge.n	8009af4 <__kernel_rem_pio2+0x22c>
 8009a94:	2500      	movs	r5, #0
 8009a96:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a9e:	f040 8087 	bne.w	8009bb0 <__kernel_rem_pio2+0x2e8>
 8009aa2:	1e73      	subs	r3, r6, #1
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f04f 0c00 	mov.w	ip, #0
 8009aaa:	4548      	cmp	r0, r9
 8009aac:	da47      	bge.n	8009b3e <__kernel_rem_pio2+0x276>
 8009aae:	f1bc 0f00 	cmp.w	ip, #0
 8009ab2:	d070      	beq.n	8009b96 <__kernel_rem_pio2+0x2ce>
 8009ab4:	aa04      	add	r2, sp, #16
 8009ab6:	3c18      	subs	r4, #24
 8009ab8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009abc:	2a00      	cmp	r2, #0
 8009abe:	d075      	beq.n	8009bac <__kernel_rem_pio2+0x2e4>
 8009ac0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	f000 fa56 	bl	8009f78 <scalbn>
 8009acc:	9b00      	ldr	r3, [sp, #0]
 8009ace:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8009c08 <__kernel_rem_pio2+0x340>
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	2a00      	cmp	r2, #0
 8009ad6:	f280 80ac 	bge.w	8009c32 <__kernel_rem_pio2+0x36a>
 8009ada:	4619      	mov	r1, r3
 8009adc:	2000      	movs	r0, #0
 8009ade:	2900      	cmp	r1, #0
 8009ae0:	f2c0 80cd 	blt.w	8009c7e <__kernel_rem_pio2+0x3b6>
 8009ae4:	aa68      	add	r2, sp, #416	; 0x1a0
 8009ae6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8009aea:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8009c00 <__kernel_rem_pio2+0x338>
 8009aee:	4e4b      	ldr	r6, [pc, #300]	; (8009c1c <__kernel_rem_pio2+0x354>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	e0b8      	b.n	8009c66 <__kernel_rem_pio2+0x39e>
 8009af4:	2502      	movs	r5, #2
 8009af6:	e78c      	b.n	8009a12 <__kernel_rem_pio2+0x14a>
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	b948      	cbnz	r0, 8009b10 <__kernel_rem_pio2+0x248>
 8009afc:	b11a      	cbz	r2, 8009b06 <__kernel_rem_pio2+0x23e>
 8009afe:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f10c 0c01 	add.w	ip, ip, #1
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	e787      	b.n	8009a20 <__kernel_rem_pio2+0x158>
 8009b10:	ebae 0202 	sub.w	r2, lr, r2
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	4602      	mov	r2, r0
 8009b18:	e7f5      	b.n	8009b06 <__kernel_rem_pio2+0x23e>
 8009b1a:	1e72      	subs	r2, r6, #1
 8009b1c:	ab04      	add	r3, sp, #16
 8009b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b22:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009b26:	f10d 0c10 	add.w	ip, sp, #16
 8009b2a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8009b2e:	e77f      	b.n	8009a30 <__kernel_rem_pio2+0x168>
 8009b30:	1e72      	subs	r2, r6, #1
 8009b32:	ab04      	add	r3, sp, #16
 8009b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009b3c:	e7f3      	b.n	8009b26 <__kernel_rem_pio2+0x25e>
 8009b3e:	aa04      	add	r2, sp, #16
 8009b40:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8009b44:	3801      	subs	r0, #1
 8009b46:	ea4c 0c02 	orr.w	ip, ip, r2
 8009b4a:	e7ae      	b.n	8009aaa <__kernel_rem_pio2+0x1e2>
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009b52:	2a00      	cmp	r2, #0
 8009b54:	d0fa      	beq.n	8009b4c <__kernel_rem_pio2+0x284>
 8009b56:	eb06 020b 	add.w	r2, r6, fp
 8009b5a:	ad18      	add	r5, sp, #96	; 0x60
 8009b5c:	1c73      	adds	r3, r6, #1
 8009b5e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009b62:	4406      	add	r6, r0
 8009b64:	429e      	cmp	r6, r3
 8009b66:	f6ff af19 	blt.w	800999c <__kernel_rem_pio2+0xd4>
 8009b6a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8009b6e:	9d00      	ldr	r5, [sp, #0]
 8009b70:	ee07 0a90 	vmov	s15, r0
 8009b74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009b78:	2000      	movs	r0, #0
 8009b7a:	eca2 7b02 	vstmia	r2!, {d7}
 8009b7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009c00 <__kernel_rem_pio2+0x338>
 8009b82:	4694      	mov	ip, r2
 8009b84:	4288      	cmp	r0, r1
 8009b86:	dd09      	ble.n	8009b9c <__kernel_rem_pio2+0x2d4>
 8009b88:	a868      	add	r0, sp, #416	; 0x1a0
 8009b8a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8009b8e:	ed80 7b00 	vstr	d7, [r0]
 8009b92:	3301      	adds	r3, #1
 8009b94:	e7e6      	b.n	8009b64 <__kernel_rem_pio2+0x29c>
 8009b96:	9b01      	ldr	r3, [sp, #4]
 8009b98:	2001      	movs	r0, #1
 8009b9a:	e7d8      	b.n	8009b4e <__kernel_rem_pio2+0x286>
 8009b9c:	ecb5 5b02 	vldmia	r5!, {d5}
 8009ba0:	ed3c 6b02 	vldmdb	ip!, {d6}
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009baa:	e7eb      	b.n	8009b84 <__kernel_rem_pio2+0x2bc>
 8009bac:	3b01      	subs	r3, #1
 8009bae:	e781      	b.n	8009ab4 <__kernel_rem_pio2+0x1ec>
 8009bb0:	4260      	negs	r0, r4
 8009bb2:	eeb0 0b48 	vmov.f64	d0, d8
 8009bb6:	f000 f9df 	bl	8009f78 <scalbn>
 8009bba:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8009c10 <__kernel_rem_pio2+0x348>
 8009bbe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8009bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc6:	db2b      	blt.n	8009c20 <__kernel_rem_pio2+0x358>
 8009bc8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8009c08 <__kernel_rem_pio2+0x340>
 8009bcc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009bd0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009bd4:	aa04      	add	r2, sp, #16
 8009bd6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8009bda:	eea5 0b46 	vfms.f64	d0, d5, d6
 8009bde:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009be2:	a904      	add	r1, sp, #16
 8009be4:	ee10 3a10 	vmov	r3, s0
 8009be8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009bec:	ee17 2a10 	vmov	r2, s14
 8009bf0:	1c73      	adds	r3, r6, #1
 8009bf2:	3418      	adds	r4, #24
 8009bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009bf8:	e762      	b.n	8009ac0 <__kernel_rem_pio2+0x1f8>
 8009bfa:	bf00      	nop
 8009bfc:	f3af 8000 	nop.w
	...
 8009c0c:	3e700000 	.word	0x3e700000
 8009c10:	00000000 	.word	0x00000000
 8009c14:	41700000 	.word	0x41700000
 8009c18:	0800b200 	.word	0x0800b200
 8009c1c:	0800b1c0 	.word	0x0800b1c0
 8009c20:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009c24:	aa04      	add	r2, sp, #16
 8009c26:	ee10 3a10 	vmov	r3, s0
 8009c2a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009c2e:	4633      	mov	r3, r6
 8009c30:	e746      	b.n	8009ac0 <__kernel_rem_pio2+0x1f8>
 8009c32:	a804      	add	r0, sp, #16
 8009c34:	a968      	add	r1, sp, #416	; 0x1a0
 8009c36:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009c3a:	9000      	str	r0, [sp, #0]
 8009c3c:	ee07 0a90 	vmov	s15, r0
 8009c40:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009c44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009c48:	3a01      	subs	r2, #1
 8009c4a:	ee27 7b00 	vmul.f64	d7, d7, d0
 8009c4e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8009c52:	ed81 7b00 	vstr	d7, [r1]
 8009c56:	e73d      	b.n	8009ad4 <__kernel_rem_pio2+0x20c>
 8009c58:	ecb6 5b02 	vldmia	r6!, {d5}
 8009c5c:	ecb4 6b02 	vldmia	r4!, {d6}
 8009c60:	3201      	adds	r2, #1
 8009c62:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009c66:	454a      	cmp	r2, r9
 8009c68:	dc01      	bgt.n	8009c6e <__kernel_rem_pio2+0x3a6>
 8009c6a:	4290      	cmp	r0, r2
 8009c6c:	daf4      	bge.n	8009c58 <__kernel_rem_pio2+0x390>
 8009c6e:	aa40      	add	r2, sp, #256	; 0x100
 8009c70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009c74:	ed82 7b00 	vstr	d7, [r2]
 8009c78:	3901      	subs	r1, #1
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	e72f      	b.n	8009ade <__kernel_rem_pio2+0x216>
 8009c7e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8009c80:	2a02      	cmp	r2, #2
 8009c82:	dc0a      	bgt.n	8009c9a <__kernel_rem_pio2+0x3d2>
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	dc5a      	bgt.n	8009d3e <__kernel_rem_pio2+0x476>
 8009c88:	d039      	beq.n	8009cfe <__kernel_rem_pio2+0x436>
 8009c8a:	f008 0007 	and.w	r0, r8, #7
 8009c8e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8009c92:	ecbd 8b06 	vpop	{d8-d10}
 8009c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8009c9c:	2a03      	cmp	r2, #3
 8009c9e:	d1f4      	bne.n	8009c8a <__kernel_rem_pio2+0x3c2>
 8009ca0:	aa40      	add	r2, sp, #256	; 0x100
 8009ca2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	2800      	cmp	r0, #0
 8009cac:	f1a1 0108 	sub.w	r1, r1, #8
 8009cb0:	dc52      	bgt.n	8009d58 <__kernel_rem_pio2+0x490>
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	2901      	cmp	r1, #1
 8009cb6:	f1a2 0208 	sub.w	r2, r2, #8
 8009cba:	dc5d      	bgt.n	8009d78 <__kernel_rem_pio2+0x4b0>
 8009cbc:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8009dc0 <__kernel_rem_pio2+0x4f8>
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	dc69      	bgt.n	8009d98 <__kernel_rem_pio2+0x4d0>
 8009cc4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8009cc8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8009ccc:	2d00      	cmp	r5, #0
 8009cce:	d16c      	bne.n	8009daa <__kernel_rem_pio2+0x4e2>
 8009cd0:	ed87 5b00 	vstr	d5, [r7]
 8009cd4:	ed87 6b02 	vstr	d6, [r7, #8]
 8009cd8:	ed87 7b04 	vstr	d7, [r7, #16]
 8009cdc:	e7d5      	b.n	8009c8a <__kernel_rem_pio2+0x3c2>
 8009cde:	aa40      	add	r2, sp, #256	; 0x100
 8009ce0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009ce4:	ed92 6b00 	vldr	d6, [r2]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	daf5      	bge.n	8009cde <__kernel_rem_pio2+0x416>
 8009cf2:	b10d      	cbz	r5, 8009cf8 <__kernel_rem_pio2+0x430>
 8009cf4:	eeb1 7b47 	vneg.f64	d7, d7
 8009cf8:	ed87 7b00 	vstr	d7, [r7]
 8009cfc:	e7c5      	b.n	8009c8a <__kernel_rem_pio2+0x3c2>
 8009cfe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009dc0 <__kernel_rem_pio2+0x4f8>
 8009d02:	e7f4      	b.n	8009cee <__kernel_rem_pio2+0x426>
 8009d04:	a940      	add	r1, sp, #256	; 0x100
 8009d06:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009d0a:	ed91 7b00 	vldr	d7, [r1]
 8009d0e:	3a01      	subs	r2, #1
 8009d10:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009d14:	2a00      	cmp	r2, #0
 8009d16:	daf5      	bge.n	8009d04 <__kernel_rem_pio2+0x43c>
 8009d18:	b1ad      	cbz	r5, 8009d46 <__kernel_rem_pio2+0x47e>
 8009d1a:	eeb1 7b46 	vneg.f64	d7, d6
 8009d1e:	ed87 7b00 	vstr	d7, [r7]
 8009d22:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8009d26:	a942      	add	r1, sp, #264	; 0x108
 8009d28:	2201      	movs	r2, #1
 8009d2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	da0c      	bge.n	8009d4c <__kernel_rem_pio2+0x484>
 8009d32:	b10d      	cbz	r5, 8009d38 <__kernel_rem_pio2+0x470>
 8009d34:	eeb1 7b47 	vneg.f64	d7, d7
 8009d38:	ed87 7b02 	vstr	d7, [r7, #8]
 8009d3c:	e7a5      	b.n	8009c8a <__kernel_rem_pio2+0x3c2>
 8009d3e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009dc0 <__kernel_rem_pio2+0x4f8>
 8009d42:	461a      	mov	r2, r3
 8009d44:	e7e6      	b.n	8009d14 <__kernel_rem_pio2+0x44c>
 8009d46:	eeb0 7b46 	vmov.f64	d7, d6
 8009d4a:	e7e8      	b.n	8009d1e <__kernel_rem_pio2+0x456>
 8009d4c:	ecb1 6b02 	vldmia	r1!, {d6}
 8009d50:	3201      	adds	r2, #1
 8009d52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009d56:	e7ea      	b.n	8009d2e <__kernel_rem_pio2+0x466>
 8009d58:	ed91 7b00 	vldr	d7, [r1]
 8009d5c:	ed91 5b02 	vldr	d5, [r1, #8]
 8009d60:	3801      	subs	r0, #1
 8009d62:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009d66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009d6a:	ed81 6b00 	vstr	d6, [r1]
 8009d6e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009d72:	ed81 7b02 	vstr	d7, [r1, #8]
 8009d76:	e798      	b.n	8009caa <__kernel_rem_pio2+0x3e2>
 8009d78:	ed92 7b00 	vldr	d7, [r2]
 8009d7c:	ed92 5b02 	vldr	d5, [r2, #8]
 8009d80:	3901      	subs	r1, #1
 8009d82:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009d86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009d8a:	ed82 6b00 	vstr	d6, [r2]
 8009d8e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009d92:	ed82 7b02 	vstr	d7, [r2, #8]
 8009d96:	e78d      	b.n	8009cb4 <__kernel_rem_pio2+0x3ec>
 8009d98:	aa40      	add	r2, sp, #256	; 0x100
 8009d9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009d9e:	ed92 6b00 	vldr	d6, [r2]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009da8:	e78a      	b.n	8009cc0 <__kernel_rem_pio2+0x3f8>
 8009daa:	eeb1 5b45 	vneg.f64	d5, d5
 8009dae:	eeb1 6b46 	vneg.f64	d6, d6
 8009db2:	ed87 5b00 	vstr	d5, [r7]
 8009db6:	eeb1 7b47 	vneg.f64	d7, d7
 8009dba:	ed87 6b02 	vstr	d6, [r7, #8]
 8009dbe:	e78b      	b.n	8009cd8 <__kernel_rem_pio2+0x410>
	...

08009dc8 <__kernel_sin>:
 8009dc8:	ee10 3a90 	vmov	r3, s1
 8009dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dd0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009dd4:	da04      	bge.n	8009de0 <__kernel_sin+0x18>
 8009dd6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8009dda:	ee17 3a90 	vmov	r3, s15
 8009dde:	b35b      	cbz	r3, 8009e38 <__kernel_sin+0x70>
 8009de0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8009de4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8009de8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009e40 <__kernel_sin+0x78>
 8009dec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009e48 <__kernel_sin+0x80>
 8009df0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009df4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009e50 <__kernel_sin+0x88>
 8009df8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009dfc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009e58 <__kernel_sin+0x90>
 8009e00:	eea7 4b06 	vfma.f64	d4, d7, d6
 8009e04:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009e60 <__kernel_sin+0x98>
 8009e08:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009e0c:	b930      	cbnz	r0, 8009e1c <__kernel_sin+0x54>
 8009e0e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009e68 <__kernel_sin+0xa0>
 8009e12:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009e16:	eea4 0b05 	vfma.f64	d0, d4, d5
 8009e1a:	4770      	bx	lr
 8009e1c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8009e20:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009e24:	eea1 7b04 	vfma.f64	d7, d1, d4
 8009e28:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8009e2c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009e70 <__kernel_sin+0xa8>
 8009e30:	eea5 1b07 	vfma.f64	d1, d5, d7
 8009e34:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	f3af 8000 	nop.w
 8009e40:	5acfd57c 	.word	0x5acfd57c
 8009e44:	3de5d93a 	.word	0x3de5d93a
 8009e48:	8a2b9ceb 	.word	0x8a2b9ceb
 8009e4c:	be5ae5e6 	.word	0xbe5ae5e6
 8009e50:	57b1fe7d 	.word	0x57b1fe7d
 8009e54:	3ec71de3 	.word	0x3ec71de3
 8009e58:	19c161d5 	.word	0x19c161d5
 8009e5c:	bf2a01a0 	.word	0xbf2a01a0
 8009e60:	1110f8a6 	.word	0x1110f8a6
 8009e64:	3f811111 	.word	0x3f811111
 8009e68:	55555549 	.word	0x55555549
 8009e6c:	bfc55555 	.word	0xbfc55555
 8009e70:	55555549 	.word	0x55555549
 8009e74:	3fc55555 	.word	0x3fc55555

08009e78 <fabs>:
 8009e78:	ec51 0b10 	vmov	r0, r1, d0
 8009e7c:	ee10 2a10 	vmov	r2, s0
 8009e80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e84:	ec43 2b10 	vmov	d0, r2, r3
 8009e88:	4770      	bx	lr
 8009e8a:	0000      	movs	r0, r0
 8009e8c:	0000      	movs	r0, r0
	...

08009e90 <floor>:
 8009e90:	ee10 1a90 	vmov	r1, s1
 8009e94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009e98:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8009e9c:	2b13      	cmp	r3, #19
 8009e9e:	b530      	push	{r4, r5, lr}
 8009ea0:	ee10 0a10 	vmov	r0, s0
 8009ea4:	ee10 5a10 	vmov	r5, s0
 8009ea8:	dc31      	bgt.n	8009f0e <floor+0x7e>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	da15      	bge.n	8009eda <floor+0x4a>
 8009eae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009f68 <floor+0xd8>
 8009eb2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009eb6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ebe:	dd07      	ble.n	8009ed0 <floor+0x40>
 8009ec0:	2900      	cmp	r1, #0
 8009ec2:	da4e      	bge.n	8009f62 <floor+0xd2>
 8009ec4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ec8:	4318      	orrs	r0, r3
 8009eca:	d001      	beq.n	8009ed0 <floor+0x40>
 8009ecc:	4928      	ldr	r1, [pc, #160]	; (8009f70 <floor+0xe0>)
 8009ece:	2000      	movs	r0, #0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	ec43 2b10 	vmov	d0, r2, r3
 8009ed8:	e020      	b.n	8009f1c <floor+0x8c>
 8009eda:	4a26      	ldr	r2, [pc, #152]	; (8009f74 <floor+0xe4>)
 8009edc:	411a      	asrs	r2, r3
 8009ede:	ea01 0402 	and.w	r4, r1, r2
 8009ee2:	4304      	orrs	r4, r0
 8009ee4:	d01a      	beq.n	8009f1c <floor+0x8c>
 8009ee6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009f68 <floor+0xd8>
 8009eea:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009eee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef6:	ddeb      	ble.n	8009ed0 <floor+0x40>
 8009ef8:	2900      	cmp	r1, #0
 8009efa:	bfbe      	ittt	lt
 8009efc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8009f00:	fa40 f303 	asrlt.w	r3, r0, r3
 8009f04:	18c9      	addlt	r1, r1, r3
 8009f06:	ea21 0102 	bic.w	r1, r1, r2
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	e7e0      	b.n	8009ed0 <floor+0x40>
 8009f0e:	2b33      	cmp	r3, #51	; 0x33
 8009f10:	dd05      	ble.n	8009f1e <floor+0x8e>
 8009f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f16:	d101      	bne.n	8009f1c <floor+0x8c>
 8009f18:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009f1c:	bd30      	pop	{r4, r5, pc}
 8009f1e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8009f22:	f04f 32ff 	mov.w	r2, #4294967295
 8009f26:	40e2      	lsrs	r2, r4
 8009f28:	4202      	tst	r2, r0
 8009f2a:	d0f7      	beq.n	8009f1c <floor+0x8c>
 8009f2c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8009f68 <floor+0xd8>
 8009f30:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009f34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3c:	ddc8      	ble.n	8009ed0 <floor+0x40>
 8009f3e:	2900      	cmp	r1, #0
 8009f40:	da02      	bge.n	8009f48 <floor+0xb8>
 8009f42:	2b14      	cmp	r3, #20
 8009f44:	d103      	bne.n	8009f4e <floor+0xbe>
 8009f46:	3101      	adds	r1, #1
 8009f48:	ea20 0002 	bic.w	r0, r0, r2
 8009f4c:	e7c0      	b.n	8009ed0 <floor+0x40>
 8009f4e:	2401      	movs	r4, #1
 8009f50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009f54:	fa04 f303 	lsl.w	r3, r4, r3
 8009f58:	4418      	add	r0, r3
 8009f5a:	42a8      	cmp	r0, r5
 8009f5c:	bf38      	it	cc
 8009f5e:	1909      	addcc	r1, r1, r4
 8009f60:	e7f2      	b.n	8009f48 <floor+0xb8>
 8009f62:	2000      	movs	r0, #0
 8009f64:	4601      	mov	r1, r0
 8009f66:	e7b3      	b.n	8009ed0 <floor+0x40>
 8009f68:	8800759c 	.word	0x8800759c
 8009f6c:	7e37e43c 	.word	0x7e37e43c
 8009f70:	bff00000 	.word	0xbff00000
 8009f74:	000fffff 	.word	0x000fffff

08009f78 <scalbn>:
 8009f78:	b082      	sub	sp, #8
 8009f7a:	ed8d 0b00 	vstr	d0, [sp]
 8009f7e:	9b01      	ldr	r3, [sp, #4]
 8009f80:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009f84:	b9a2      	cbnz	r2, 8009fb0 <scalbn+0x38>
 8009f86:	9a00      	ldr	r2, [sp, #0]
 8009f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	d03a      	beq.n	800a006 <scalbn+0x8e>
 8009f90:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800a068 <scalbn+0xf0>
 8009f94:	4b40      	ldr	r3, [pc, #256]	; (800a098 <scalbn+0x120>)
 8009f96:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009f9a:	4298      	cmp	r0, r3
 8009f9c:	ed8d 7b00 	vstr	d7, [sp]
 8009fa0:	da11      	bge.n	8009fc6 <scalbn+0x4e>
 8009fa2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800a070 <scalbn+0xf8>
 8009fa6:	ed9d 6b00 	vldr	d6, [sp]
 8009faa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009fae:	e007      	b.n	8009fc0 <scalbn+0x48>
 8009fb0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009fb4:	428a      	cmp	r2, r1
 8009fb6:	d10a      	bne.n	8009fce <scalbn+0x56>
 8009fb8:	ed9d 7b00 	vldr	d7, [sp]
 8009fbc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009fc0:	ed8d 7b00 	vstr	d7, [sp]
 8009fc4:	e01f      	b.n	800a006 <scalbn+0x8e>
 8009fc6:	9b01      	ldr	r3, [sp, #4]
 8009fc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009fcc:	3a36      	subs	r2, #54	; 0x36
 8009fce:	4402      	add	r2, r0
 8009fd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009fd4:	428a      	cmp	r2, r1
 8009fd6:	dd0a      	ble.n	8009fee <scalbn+0x76>
 8009fd8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800a078 <scalbn+0x100>
 8009fdc:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800a080 <scalbn+0x108>
 8009fe0:	eeb0 6b47 	vmov.f64	d6, d7
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	fe27 7b05 	vselge.f64	d7, d7, d5
 8009fec:	e7dd      	b.n	8009faa <scalbn+0x32>
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	dd0d      	ble.n	800a00e <scalbn+0x96>
 8009ff2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ff6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ffa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ffe:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a002:	e9cd 0100 	strd	r0, r1, [sp]
 800a006:	ed9d 0b00 	vldr	d0, [sp]
 800a00a:	b002      	add	sp, #8
 800a00c:	4770      	bx	lr
 800a00e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a012:	da18      	bge.n	800a046 <scalbn+0xce>
 800a014:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a018:	4298      	cmp	r0, r3
 800a01a:	9b01      	ldr	r3, [sp, #4]
 800a01c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a020:	dd09      	ble.n	800a036 <scalbn+0xbe>
 800a022:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a078 <scalbn+0x100>
 800a026:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800a080 <scalbn+0x108>
 800a02a:	eeb0 6b47 	vmov.f64	d6, d7
 800a02e:	2b00      	cmp	r3, #0
 800a030:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800a034:	e7b9      	b.n	8009faa <scalbn+0x32>
 800a036:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800a070 <scalbn+0xf8>
 800a03a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800a088 <scalbn+0x110>
 800a03e:	eeb0 6b47 	vmov.f64	d6, d7
 800a042:	2b00      	cmp	r3, #0
 800a044:	e7f4      	b.n	800a030 <scalbn+0xb8>
 800a046:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a04a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a04e:	3236      	adds	r2, #54	; 0x36
 800a050:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a054:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a058:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800a090 <scalbn+0x118>
 800a05c:	ec41 0b17 	vmov	d7, r0, r1
 800a060:	e7a3      	b.n	8009faa <scalbn+0x32>
 800a062:	bf00      	nop
 800a064:	f3af 8000 	nop.w
 800a068:	00000000 	.word	0x00000000
 800a06c:	43500000 	.word	0x43500000
 800a070:	c2f8f359 	.word	0xc2f8f359
 800a074:	01a56e1f 	.word	0x01a56e1f
 800a078:	8800759c 	.word	0x8800759c
 800a07c:	7e37e43c 	.word	0x7e37e43c
 800a080:	8800759c 	.word	0x8800759c
 800a084:	fe37e43c 	.word	0xfe37e43c
 800a088:	c2f8f359 	.word	0xc2f8f359
 800a08c:	81a56e1f 	.word	0x81a56e1f
 800a090:	00000000 	.word	0x00000000
 800a094:	3c900000 	.word	0x3c900000
 800a098:	ffff3cb0 	.word	0xffff3cb0

0800a09c <_init>:
 800a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09e:	bf00      	nop
 800a0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0a2:	bc08      	pop	{r3}
 800a0a4:	469e      	mov	lr, r3
 800a0a6:	4770      	bx	lr

0800a0a8 <_fini>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	bf00      	nop
 800a0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ae:	bc08      	pop	{r3}
 800a0b0:	469e      	mov	lr, r3
 800a0b2:	4770      	bx	lr
